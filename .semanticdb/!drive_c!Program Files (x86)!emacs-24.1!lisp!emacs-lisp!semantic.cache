;; Object emacs-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-lisp/"
  :tables (list 
   (semanticdb-table "byte-run.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("macro-declaration-function" function (:arguments ("macro" "decl")) nil [1275 2202])
            ("setq" code nil nil [2205 2266])
            ("fset" code nil nil [2373 2394])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [3461 3862])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [3864 3942])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "when")) nil [3944 4313])
            ("make-obsolete" function
               (:user-visible-flag t
                :arguments ("obsolete-name" "current-name" "when"))
                nil [4315 5039])
            ("set-advertised-calling-convention" code nil nil [5040 5189])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [5191 5825])
            ("set-advertised-calling-convention" code nil nil [5826 6013])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [6015 6660])
            ("set-advertised-calling-convention" code nil nil [6661 6842])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [6844 8357])
            ("set-advertised-calling-convention" code nil nil [8358 8545])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [8875 9261])
            ("dont-compile" function (:arguments ("body")) nil [9263 9550])
            ("eval-when-compile" function (:arguments ("body")) nil [9793 10218])
            ("eval-and-compile" function (:arguments ("body")) nil [10220 10416])
            ("put" code nil nil [10418 10465])
            ("with-no-warnings" function (:arguments ("body")) nil [10466 10651]))          
    :file "byte-run.el"
    :pointmax 11972
    :fsize 11971
    :lastmodtime '(20456 43127)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cl-macs.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [1515 1528])
            ("cl-pop2" function (:arguments ("place")) nil [1530 1652])
            ("put" code nil nil [1653 1699])
            ("cl-optimize-safety" variable nil nil [1701 1728])
            ("cl-optimize-speed" variable nil nil [1729 1755])
            ("cl-old-bc-file-form" variable nil nil [2182 2214])
            ("cl-simple-funcs" variable
               (:constant-flag t
                :default-value (quote (car cdr nth aref elt if and or + - 1+ 1- min max car-safe cdr-safe progn prog1 prog2)))
                nil [2359 2480])
            ("cl-safe-funcs" variable
               (:constant-flag t
                :default-value (quote (* / % length memq list vector vectorp < > <= >= = error)))
                nil [2481 2569])
            ("cl-simple-expr-p" function (:arguments ("x" "size")) nil [2623 3069])
            ("cl-simple-exprs-p" function (:arguments ("xs")) nil [3071 3182])
            ("cl-safe-expr-p" function (:arguments ("x")) nil [3214 3554])
            ("cl-const-expr-p" function (:arguments ("x")) nil [3619 3874])
            ("cl-const-exprs-p" function (:arguments ("xs")) nil [3876 3985])
            ("cl-const-expr-val" function (:arguments ("x")) nil [3987 4078])
            ("cl-expr-access-order" function (:arguments ("x" "v")) nil [4080 4614])
            ("cl-expr-contains" function (:arguments ("x" "y")) nil [4682 4936])
            ("cl-expr-contains-any" function (:arguments ("x" "y")) nil [4938 5037])
            ("cl-expr-depends-p" function (:arguments ("x" "y")) nil [5098 5227])
            ("*gensym-counter*" variable nil nil [5243 5268])
            ("gensym" function (:arguments ("prefix")) nil [5284 5632])
            ("gentemp" function (:arguments ("prefix")) nil [5649 6005])
            ("defun*" function (:arguments ("name" "args" "body")) nil [6047 6439])
            ("defmacro*" function (:arguments ("name" "args" "body")) nil [6456 6854])
            ("function*" function (:arguments ("func")) nil [6871 7275])
            ("cl-transform-function-property" function (:arguments ("func" "prop" "form")) nil [7277 7531])
            ("lambda-list-keywords" variable
               (:constant-flag t
                :default-value (quote (&optional &rest &key &allow-other-keys &aux &whole &body &environment)))
                nil [7533 7639])
            ("cl-macro-environment" variable nil nil [7641 7912])
            ("bind-block" variable nil nil [7913 7932])
            ("bind-defs" variable nil nil [7933 7951])
            ("bind-enquote" variable nil nil [7952 7973])
            ("bind-inits" variable nil nil [7974 7993])
            ("bind-lets" variable nil nil [7994 8012])
            ("bind-forms" variable nil nil [8013 8032])
            ("declare-function" code nil nil [8034 8105])
            ("cl--make-usage-var" function (:arguments ("x")) nil [8107 8303])
            ("cl--make-usage-args" function (:arguments ("arglist")) nil [8305 9344])
            ("cl-transform-lambda" function (:arguments ("form" "bind-block")) nil [9346 11827])
            ("cl-do-arglist" function (:arguments ("args" "expr" "num")) nil [11829 16757])
            ("cl-arglist-args" function (:arguments ("args")) nil [16759 17212])
            ("destructuring-bind" function (:arguments ("args" "expr" "body")) nil [17229 17562])
            ("cl-not-toplevel" variable nil nil [17592 17620])
            ("eval-when" function (:arguments ("when" "body")) nil [17637 18476])
            ("cl-compile-time-too" function (:arguments ("form")) nil [18478 18991])
            ("load-time-value" function (:arguments ("form" "read-only")) nil [19008 19805])
            ("case" function (:arguments ("expr" "clauses")) nil [19860 21127])
            ("ecase" function (:arguments ("expr" "clauses")) nil [21144 21355])
            ("typecase" function (:arguments ("expr" "clauses")) nil [21372 22298])
            ("etypecase" function (:arguments ("expr" "clauses")) nil [22315 22535])
            ("block" function (:arguments ("name" "body")) nil [22576 23289])
            ("return" function (:arguments ("result")) nil [23306 23462])
            ("return-from" function (:arguments ("name" "result")) nil [23479 23937])
            ("loop-args" variable nil nil [23963 23981])
            ("loop-accum-var" variable nil nil [23982 24005])
            ("loop-accum-vars" variable nil nil [24006 24030])
            ("loop-bindings" variable nil nil [24031 24053])
            ("loop-body" variable nil nil [24054 24072])
            ("loop-destr-temps" variable nil nil [24073 24098])
            ("loop-finally" variable nil nil [24099 24120])
            ("loop-finish-flag" variable nil nil [24121 24146])
            ("loop-first-flag" variable nil nil [24147 24171])
            ("loop-initially" variable nil nil [24172 24195])
            ("loop-map-form" variable nil nil [24196 24218])
            ("loop-name" variable nil nil [24219 24237])
            ("loop-result" variable nil nil [24238 24258])
            ("loop-result-explicit" variable nil nil [24259 24288])
            ("loop-result-var" variable nil nil [24289 24313])
            ("loop-steps" variable nil nil [24314 24333])
            ("loop-symbol-macs" variable nil nil [24334 24359])
            ("loop" function (:arguments ("loop-args")) nil [24376 27239])
            ("cl-parse-loop-clause" function nil nil [27241 43403])
            ("cl-loop-let" function (:arguments ("specs" "body" "par")) nil [43405 44612])
            ("cl-loop-handle-accum" function (:arguments ("def" "func")) nil [44614 45109])
            ("cl-loop-build-ands" function (:arguments ("clauses")) nil [45111 45839])
            ("do" function (:arguments ("steps" "endtest" "body")) nil [45898 46075])
            ("do*" function (:arguments ("steps" "endtest" "body")) nil [46092 46269])
            ("cl-expand-do-loop" function (:arguments ("steps" "endtest" "body" "star")) nil [46271 46899])
            ("dolist" function (:arguments ("spec" "body")) nil [46916 48260])
            ("dotimes" function (:arguments ("spec" "body")) nil [48277 49573])
            ("do-symbols" function (:arguments ("spec" "body")) nil [49590 50038])
            ("do-all-symbols" function (:arguments ("spec" "body")) nil [50055 50159])
            ("psetq" function (:arguments ("args")) nil [50195 50451])
            ("progv" function (:arguments ("symbols" "values" "body")) nil [50502 51113])
            ("flet" function (:arguments ("bindings" "body")) nil [51208 52538])
            ("labels" function (:arguments ("bindings" "body")) nil [52555 53534])
            ("macrolet" function (:arguments ("bindings" "body")) nil [53640 54199])
            ("symbol-macrolet" function (:arguments ("bindings" "body")) nil [54216 54794])
            ("cl-closure-vars" variable nil nil [54796 54824])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [54840 56206])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [56223 56726])
            ("cl-defun-expander" function (:arguments ("func" "rest")) nil [56728 56888])
            ("multiple-value-bind" function (:arguments ("vars" "form" "body")) nil [56928 57586])
            ("multiple-value-setq" function (:arguments ("vars" "form")) nil [57603 58447])
            ("locally" function (:arguments ("body")) nil [58484 58534])
            ("the" function (:arguments ("type" "form")) nil [58550 58581])
            ("cl-proclaim-history" variable (:default-value t) nil [58583 58613])
            ("cl-declare-stack" variable (:default-value t) nil [58640 58667])
            ("cl-do-proclaim" function (:arguments ("spec" "hist")) nil [58698 60198])
            ("cl-proclaims-deferred" variable nil nil [60262 60292])
            ("let" code nil nil [60293 60410])
            ("declare" function (:arguments ("specs")) nil [60427 60811])
            ("define-setf-method" function (:arguments ("func" "args" "body")) nil [60858 61651])
            ("defalias" code nil nil [61652 61704])
            ("defsetf" function (:arguments ("func" "arg1" "args")) nil [61721 64751])
            ("defsetf" code nil nil [64801 64820])
            ("defsetf" code nil nil [64821 64841])
            ("defsetf" code nil nil [64842 64862])
            ("defsetf" code nil nil [64863 64920])
            ("defsetf" code nil nil [64921 64978])
            ("defsetf" code nil nil [64979 65036])
            ("defsetf" code nil nil [65037 65094])
            ("defsetf" code nil nil [65095 65223])
            ("defsetf" code nil nil [65224 65241])
            ("defsetf" code nil nil [65242 65304])
            ("defsetf" code nil nil [65305 65374])
            ("defsetf" code nil nil [65375 65442])
            ("defsetf" code nil nil [65443 65559])
            ("defsetf" code nil nil [65560 65590])
            ("defsetf" code nil nil [65591 65622])
            ("defsetf" code nil nil [65623 65649])
            ("defsetf" code nil nil [65720 65742])
            ("defsetf" code nil nil [65743 65806])
            ("defsetf" code nil nil [65807 65870])
            ("defsetf" code nil nil [65871 65936])
            ("defsetf" code nil nil [65937 66004])
            ("defsetf" code nil nil [66005 66072])
            ("defsetf" code nil nil [66073 66142])
            ("defsetf" code nil nil [66143 66211])
            ("defsetf" code nil nil [66212 66279])
            ("defsetf" code nil nil [66280 66347])
            ("defsetf" code nil nil [66348 66369])
            ("defsetf" code nil nil [66412 66462])
            ("defsetf" code nil nil [66463 66583])
            ("defsetf" code nil nil [66584 66621])
            ("defsetf" code nil nil [66622 66709])
            ("defsetf" code nil nil [66710 66760])
            ("defsetf" code nil nil [66761 66796])
            ("defsetf" code nil nil [66797 66840])
            ("defsetf" code nil nil [66841 66882])
            ("defsetf" code nil nil [66883 66928])
            ("defsetf" code nil nil [66929 67026])
            ("defsetf" code nil nil [67027 67070])
            ("defsetf" code nil nil [67071 67136])
            ("defsetf" code nil nil [67137 67190])
            ("defsetf" code nil nil [67191 67226])
            ("defsetf" code nil nil [67227 67263])
            ("defsetf" code nil nil [67264 67343])
            ("defsetf" code nil nil [67344 67439])
            ("defsetf" code nil nil [67440 67507])
            ("defsetf" code nil nil [67508 67587])
            ("defsetf" code nil nil [67588 67671])
            ("defsetf" code nil nil [67672 67709])
            ("defsetf" code nil nil [67710 67752])
            ("defsetf" code nil nil [67753 67805])
            ("defsetf" code nil nil [67806 67854])
            ("defsetf" code nil nil [67855 67895])
            ("defsetf" code nil nil [67896 67943])
            ("defsetf" code nil nil [67944 67995])
            ("defsetf" code nil nil [67996 68021])
            ("defsetf" code nil nil [68022 68057])
            ("defsetf" code nil nil [68058 68101])
            ("defsetf" code nil nil [68102 68143])
            ("defsetf" code nil nil [68144 68185])
            ("defsetf" code nil nil [68186 68211])
            ("defsetf" code nil nil [68212 68244])
            ("defsetf" code nil nil [68245 68283])
            ("defsetf" code nil nil [68284 68321])
            ("defsetf" code nil nil [68322 68450])
            ("defsetf" code nil nil [68451 68484])
            ("defsetf" code nil nil [68485 68596])
            ("defsetf" code nil nil [68597 68708])
            ("defsetf" code nil nil [68709 68734])
            ("defsetf" code nil nil [68735 68769])
            ("defsetf" code nil nil [68770 68866])
            ("defsetf" code nil nil [68867 68963])
            ("defsetf" code nil nil [68964 69007])
            ("defsetf" code nil nil [69008 69051])
            ("defsetf" code nil nil [69052 69099])
            ("defsetf" code nil nil [69100 69133])
            ("defsetf" code nil nil [69134 69246])
            ("defsetf" code nil nil [69247 69290])
            ("defsetf" code nil nil [69291 69332])
            ("defsetf" code nil nil [69333 69372])
            ("defsetf" code nil nil [69373 69412])
            ("defsetf" code nil nil [69413 69450])
            ("defsetf" code nil nil [69451 69504])
            ("defsetf" code nil nil [69505 69544])
            ("defsetf" code nil nil [69545 69602])
            ("defsetf" code nil nil [69603 69646])
            ("defsetf" code nil nil [69647 69704])
            ("defsetf" code nil nil [69705 69758])
            ("defsetf" code nil nil [69759 69871])
            ("defsetf" code nil nil [69872 69915])
            ("defsetf" code nil nil [69916 69963])
            ("defsetf" code nil nil [69964 70003])
            ("defsetf" code nil nil [70004 70043])
            ("defsetf" code nil nil [70044 70156])
            ("defsetf" code nil nil [70157 70220])
            ("defsetf" code nil nil [70221 70264])
            ("define-setf-method" code nil nil [70528 71034])
            ("define-setf-method" code nil nil [71263 71783])
            ("cl-setf-make-apply" function (:arguments ("form" "func" "temps")) nil [71785 72095])
            ("define-setf-method" code nil nil [72097 72565])
            ("define-setf-method" code nil nil [72567 73137])
            ("define-setf-method" code nil nil [73139 73748])
            ("get-setf-method" function (:arguments ("place" "env")) nil [73806 75110])
            ("cl-setf-do-modify" function (:arguments ("place" "opt-expr")) nil [75112 75844])
            ("cl-setf-do-store" function (:arguments ("spec" "val")) nil [75846 76138])
            ("cl-setf-simple-store-p" function (:arguments ("sym" "form")) nil [76140 76397])
            ("setf" function (:arguments ("args")) nil [76446 77188])
            ("psetf" function (:arguments ("args")) nil [77205 78046])
            ("cl-do-pop" function (:arguments ("place")) nil [78063 78464])
            ("remf" function (:arguments ("place" "tag")) nil [78481 79274])
            ("shiftf" function (:arguments ("place" "args")) nil [79291 79790])
            ("rotatef" function (:arguments ("args")) nil [79807 80778])
            ("letf" function (:arguments ("bindings" "body")) nil [80795 82884])
            ("letf*" function (:arguments ("bindings" "body")) nil [82901 83664])
            ("callf" function (:arguments ("func" "place" "args")) nil [83681 84175])
            ("callf2" function (:arguments ("func" "arg1" "place" "args")) nil [84192 84930])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [84947 85497])
            ("defstruct" function (:arguments ("struct" "descs")) nil [85532 94471])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [94488 95167])
            ("deftype" function (:arguments ("name" "arglist" "body")) nil [95212 95504])
            ("cl-make-type-test" function (:arguments ("val" "type")) nil [95506 97079])
            ("typep" function (:arguments ("object" "type")) nil [97096 97278])
            ("check-type" function (:arguments ("form" "type" "string")) nil [97295 97923])
            ("assert" function (:arguments ("form" "show-args" "string" "args")) nil [97940 98783])
            ("define-compiler-macro" function (:arguments ("func" "args" "body")) nil [98822 100468])
            ("compiler-macroexpand" function (:arguments ("form")) nil [100485 100922])
            ("cl-byte-compile-compiler-macro" function (:arguments ("form")) nil [100924 101093])
            ("cl-active-block-names" variable nil nil [101136 101170])
            ("define-compiler-macro" code nil nil [101172 101754])
            ("define-compiler-macro" code nil nil [101756 101944])
            ("defsubst*" function (:arguments ("name" "args" "body")) nil [101961 103196])
            ("cl-defsubst-expand" function (:arguments ("argns" "body" "simple" "whole" "unsafe" "argvs")) nil [103198 104377])
            ("put" code nil nil [104583 104611])
            ("define-compiler-macro" code nil nil [104612 105249])
            ("define-compiler-macro" code nil nil [105251 105578])
            ("define-compiler-macro" code nil nil [105580 106011])
            ("define-compiler-macro" code nil nil [106013 106240])
            ("define-compiler-macro" code nil nil [106242 106447])
            ("define-compiler-macro" code nil nil [106449 106591])
            ("define-compiler-macro" code nil nil [106593 106942])
            ("mapc" code nil nil [106945 107917])
            ("proclaim" code nil nil [107947 108059])
            ("mapc" code nil nil [108099 108288])
            ("mapc" code nil nil [108338 108478])
            ("run-hooks" code nil nil [108481 108511]))          
    :file "cl-macs.el"
    :pointmax 108684
    :fsize 108683
    :lastmodtime '(20456 43128)
    :unmatched-syntax '((semantic-list 1862 . 2158))
    )
   (semanticdb-table "cl.el"
    :file "cl.el"
    :fsize 25041
    :lastmodtime '(20456 43128)
    )
   )
  :file "!drive_c!Program Files (x86)!emacs-24.1!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.1"
  :semanticdb-version "2.1"
  )
