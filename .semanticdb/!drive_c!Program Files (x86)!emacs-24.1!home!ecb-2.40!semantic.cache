;; Object ecb-2.40/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "ecb-2.40/"
  :tables (list 
   (semanticdb-table "ecb.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [5543 5564])
            ("ecb-upgrade" include nil nil [5636 5658])
            ("ecb-util" include nil nil [5659 5678])
            ("ecb-cedet-load-ok" variable
               (:constant-flag t
                :default-value (featurep (quote cedet)))
                nil [5740 5786])
            ("ecb-compiled-in-semantic-version" variable
               (:constant-flag t
                :default-value (eval-when-compile (ignore-errors semantic-version)))
                nil [5788 6034])
            ("ecb-compiled-in-cedet-version" variable
               (:constant-flag t
                :default-value (eval-when-compile (ignore-errors cedet-version)))
                nil [6036 6270])
            ("when" code nil nil [6272 6439])
            ("message" code nil nil [6620 7168])
            ("tree-buffer" include nil nil [7191 7213])
            ("ecb-file-browser" include nil nil [7214 7241])
            ("ecb-method-browser" include nil nil [7242 7271])
            ("ecb-jde" include nil nil [7272 7290])
            ("ecb-layout" include nil nil [7291 7312])
            ("ecb-create-layout" include nil nil [7313 7341])
            ("ecb-mode-line" include nil nil [7342 7366])
            ("ecb-help" include nil nil [7367 7386])
            ("ecb-navigate" include nil nil [7387 7410])
            ("ecb-eshell" include nil nil [7411 7432])
            ("ecb-compilation" include nil nil [7433 7459])
            ("ecb-cycle" include nil nil [7460 7480])
            ("ecb-face" include nil nil [7481 7500])
            ("ecb-tod" include nil nil [7501 7519])
            ("ecb-speedbar" include nil nil [7520 7543])
            ("ecb-autogen" include nil nil [7544 7566])
            ("ecb-winman-support" include nil nil [7567 7596])
            ("ecb-compatibility" include nil nil [7597 7625])
            ("ecb-analyse" include nil nil [7638 7660])
            ("ecb-symboldef" include nil nil [7661 7685])
            ("assoc" include nil nil [7704 7720])
            ("cl" include nil nil [7772 7785])
            ("silentcomp-defun" code nil nil [7799 7833])
            ("silentcomp-defvar" code nil nil [7834 7866])
            ("silentcomp-defvar" code nil nil [7867 7918])
            ("silentcomp-defun" code nil nil [7928 7969])
            ("silentcomp-defun" code nil nil [7970 8011])
            ("silentcomp-defvar" code nil nil [8013 8048])
            ("silentcomp-defun" code nil nil [8049 8082])
            ("silentcomp-defun" code nil nil [8083 8113])
            ("silentcomp-defun" code nil nil [8114 8149])
            ("silentcomp-defun" code nil nil [8150 8183])
            ("silentcomp-defun" code nil nil [8185 8227])
            ("silentcomp-defvar" code nil nil [8228 8272])
            ("ecb-major-mode-selected-source" variable nil nil [8398 8486])
            ("ecb-item-in-tree-buffer-selected" variable nil nil [8488 8615])
            ("ecb-initialize-all-internals" function (:arguments ("no-caches")) nil [8617 8876])
            ("ecb-minor-mode" variable nil nil [8929 9057])
            ("ecb-activated-window-configuration" variable nil nil [9059 9164])
            ("ecb" customgroup (:user-visible-flag t) nil [9294 9369])
            ("ecb-general" customgroup (:user-visible-flag t) nil [9371 9477])
            ("ecb-most-important" customgroup (:user-visible-flag t) nil [9479 9599])
            ("ecb-use-recursive-edit" variable (:user-visible-flag t) nil [9601 9786])
            ("ecb-auto-activate" variable (:user-visible-flag t) nil [9788 10009])
            ("ecb-activation-selects-ecb-frame-if-already-active" variable
               (:user-visible-flag t
                :default-value (quote ask))
                nil [10011 10549])
            ("ecb-clear-caches-before-activate" variable (:user-visible-flag t) nil [10551 11258])
            ("ecb-stealthy-tasks-delay" variable
               (:user-visible-flag t
                :default-value 1)
                nil [11260 12532])
            ("ecb-minor-mode-text" variable
               (:user-visible-flag t
                :default-value " ECB")
                nil [12556 12941])
            ("ecb-auto-compatibility-check" variable
               (:user-visible-flag t
                :default-value t)
                nil [12943 13758])
            ("ecb-version-check" variable
               (:user-visible-flag t
                :default-value t)
                nil [13760 14028])
            ("ecb-debug-mode" variable (:user-visible-flag t) nil [14030 14601])
            ("ecb-run-ediff-in-ecb-frame" variable
               (:user-visible-flag t
                :default-value t)
                nil [14603 15124])
            ("ecb-activate-before-layout-draw-hook" variable (:user-visible-flag t) nil [15127 16349])
            ("ecb-before-activate-hook" variable (:user-visible-flag t) nil [16352 16918])
            ("ecb-activate-hook" variable (:user-visible-flag t) nil [16921 17264])
            ("ecb-deactivate-hook" variable (:user-visible-flag t) nil [17266 17453])
            ("ecb-before-deactivate-hook" variable (:user-visible-flag t) nil [17455 17792])
            ("ecb-kill-buffer-hook" function nil nil [17919 19200])
            ("ecb-window-sync" function
               (:user-visible-flag t
                :arguments ("only-basic-windows"))
                nil [19203 20746])
            ("ecb-customize" function (:user-visible-flag t) nil [20749 20903])
            ("ecb-customize-most-important" function (:user-visible-flag t) nil [20905 21095])
            ("ecb-menu-item" function (:arguments ("item")) nil [21258 21754])
            ("ecb-menu-name" variable (:default-value "ECB") nil [21756 21784])
            ("ecb-menu-bar" variable (:default-value (list ecb-menu-name (ecb-menu-item ["Select ECB frame" ecb-select-ecb-frame :active (and ecb-minor-mode (not (equal (selected-frame) ecb-frame))) :help "Select the ECB-frame."]) (ecb-menu-item ["Synchronize ECB windows" (ecb-window-sync) :active (and (equal (selected-frame) ecb-frame) (ecb-point-in-edit-window-number)) :help "Synchronize the ECB windows with the current edit-window."]) (ecb-menu-item ["Update directories buffer" ecb-update-directories-buffer :active (equal (selected-frame) ecb-frame) :help "Updates the directories buffer with current disk-state"]) (ecb-menu-item ["Add all buffers to history" ecb-add-all-buffers-to-history :active (and (equal (selected-frame) ecb-frame) (ecb-window-live-p ecb-history-buffer-name)) :help "Add all current file-buffers to history"]) "-" (ecb-menu-item ["Rebuild methods buffer" ecb-rebuild-methods-buffer :active (equal (selected-frame) ecb-frame) :help "Rebuild the methods buffer completely"]) (ecb-menu-item ["Expand methods buffer" ecb-expand-methods-nodes :active (equal (selected-frame) ecb-frame) :help "Expand all nodes of a certain indent-level"]) (ecb-menu-item ["Toggle auto. expanding of the method buffer" ecb-toggle-auto-expand-tag-tree :active (equal (selected-frame) ecb-frame) :help "Toggle auto. expanding of the method buffer"]) "-" (ecb-menu-item ["Change layout" ecb-change-layout :active (equal (selected-frame) ecb-frame) :help "Change the layout."]) (ecb-menu-item ["Redraw layout" ecb-redraw-layout :active (equal (selected-frame) ecb-frame) :help "Redraw the current layout."]) (ecb-menu-item ["Toggle layout" ecb-toggle-layout :active (and (equal (selected-frame) ecb-frame) (> (length ecb-toggle-layout-sequence) 1)) :help "Toggle between several layouts"]) (ecb-menu-item ["Toggle visibility of ECB windows" ecb-toggle-ecb-windows :active (equal (selected-frame) ecb-frame) :help "Toggle the visibility of all ECB windows."]) (list "Layout administration" (ecb-menu-item ["Store current window-sizes" ecb-store-window-sizes :active (equal (selected-frame) ecb-frame) :help "Store current sizes of the ecb-windows in current layout."]) (ecb-menu-item ["Restore sizes of the ecb-windows" ecb-restore-window-sizes :active (equal (selected-frame) ecb-frame) :help "Restore the sizes of the ecb-windows in current layout."]) (ecb-menu-item ["Restore default-sizes of the ecb-windows" ecb-restore-default-window-sizes :active (equal (selected-frame) ecb-frame) :help "Restore the default-sizes of the ecb-windows in current layout."]) "-" (ecb-menu-item ["Create new layout" ecb-create-new-layout :active (equal (selected-frame) ecb-frame) :help "Create a new ECB-layout."]) (ecb-menu-item ["Delete new layout" ecb-delete-new-layout :active (equal (selected-frame) ecb-frame) :help "Delete an user-created ECB-layout."]) "-" (ecb-menu-item ["Show help for a layout" ecb-show-layout-help :active t :help "Show the documentation for a layout."])) "-" (ecb-menu-item ["Toggle compile window" ecb-toggle-compile-window :active (equal (selected-frame) ecb-frame) :help "Toggle visibility of compile window."]) (ecb-menu-item ["Toggle enlarged compile window" ecb-toggle-compile-window-height :active (and (equal (selected-frame) ecb-frame) ecb-compile-window (ecb-compile-window-live-p)) :help "Toggle enlarged compile window."]) "-" (list "Navigate" (ecb-menu-item ["Previous (back)" ecb-nav-goto-previous :active t :help "Go to the previous navigation point"]) (ecb-menu-item ["Next (forward)" ecb-nav-goto-next :active t :help "Go to the next navigation point"])) (list "Goto window" (ecb-menu-item ["Last selected edit-window" ecb-goto-window-edit-last :active t :help "Go to the last selected edit-window"]) (ecb-menu-item ["Edit-window 1" ecb-goto-window-edit1 :active t :help "Go to the first edit-window"]) (ecb-menu-item ["Edit-window 2" ecb-goto-window-edit2 :active (ecb-edit-window-splitted) :help "Go to the second edit-window (if splitted)"]) (ecb-menu-item ["Directories" ecb-goto-window-directories :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-directories-buffer-name) :help "Go to the directories window"]) (ecb-menu-item ["Sources" ecb-goto-window-sources :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-sources-buffer-name) :help "Go to the sources window"]) (ecb-menu-item ["Methods and Variables" ecb-goto-window-methods :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-methods-buffer-name) :help "Go to the methods/variables window"]) (ecb-menu-item ["History" ecb-goto-window-history :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-history-buffer-name) :help "Go to the history window"]) (ecb-menu-item ["Analyse" ecb-goto-window-analyse :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-analyse-buffer-name) :help "Go to the analyse window"]) (ecb-menu-item ["Speedbar" ecb-goto-window-speedbar :active (and ecb-use-speedbar-instead-native-tree-buffer (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-speedbar-buffer-name)) :help "Go to the integrated speedbar window"]) (ecb-menu-item ["Compilation" ecb-goto-window-compilation :active (equal (quote visible) (ecb-compile-window-state)) :help "Go to the history window"])) (list "Display window maximized" (ecb-menu-item ["Directories" ecb-maximize-window-directories :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-directories-buffer-name) :help "Maximize the directories window - even if currently not visible"]) (ecb-menu-item ["Sources" ecb-maximize-window-sources :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-sources-buffer-name) :help "Maximize the sources window - even if currently not visible"]) (ecb-menu-item ["Methods and Variables" ecb-maximize-window-methods :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-methods-buffer-name) :help "Maximize the methods/variables window - even if currently not visible"]) (ecb-menu-item ["History" ecb-maximize-window-history :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-history-buffer-name) :help "Maximize the history window - even if currently not visible"]) (ecb-menu-item ["Analyse" ecb-maximize-window-analyse :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-analyse-buffer-name) :help "Maximize the analyse window - even if currently not visible"]) (ecb-menu-item ["Speedbar" ecb-maximize-window-speedbar :active (and ecb-use-speedbar-instead-native-tree-buffer (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-speedbar-buffer-name)) :help "Maximize the integrated speedbar window - even if not visible"])) "-" (list "Preferences" (ecb-menu-item ["Most important..." (customize-group "ecb-most-important") :active t :help "Customize the most important options"]) (ecb-menu-item ["All..." (ecb-customize) :active t :help "Display all available option-groups..."]) "-" (ecb-menu-item ["General..." (customize-group "ecb-general") :active t :help "Customize general ECB options"]) (ecb-menu-item ["Directories..." (customize-group "ecb-directories") :active t :help "Customize ECB directories"]) (ecb-menu-item ["Sources..." (customize-group "ecb-sources") :active t :help "Customize ECB sources"]) (ecb-menu-item ["Methods..." (customize-group "ecb-methods") :active t :help "Customize ECB method display"]) (ecb-menu-item ["History..." (customize-group "ecb-history") :active t :help "Customize ECB history"]) (ecb-menu-item ["Analyse..." (customize-group "ecb-analyse") :active t :help "Customize ECB analyse ingeractor"]) (ecb-menu-item ["Version control..." (customize-group "ecb-version-control") :active t :help "Customize the version-control-support"]) (ecb-menu-item ["Layout..." (customize-group "ecb-layout") :active t :help "Customize ECB layout"]) (ecb-menu-item ["Tree-buffer style and handling..." (customize-group "ecb-tree-buffer") :active t :help "Customize the tree-buffers of ECB"]) (ecb-menu-item ["Face options..." (customize-group "ecb-face-options") :active t :help "Customize ECB faces"]) (ecb-menu-item ["Help options..." (customize-group "ecb-help") :active t :help "Customize options for the online help of ECB"]) (ecb-menu-item ["ECB/eshell options..." (customize-group "ecb-eshell") :active t :help "Customize options for the eshell integration of ECB"]) (ecb-menu-item ["Supporting non-semantic-sources..." (customize-group "ecb-non-semantic") :active t :help "Customize options for parsing non-semantic-sources"]) (ecb-menu-item ["Supporting window-managers..." (customize-group "ecb-winman-support") :active t :help "Customize options for the window-manager-support"])) (list "Upgrade ECB" (ecb-menu-item ["Upgrade ECB-options to current ECB-version" ecb-upgrade-options :active (equal (selected-frame) ecb-frame) :help "Try to upgrade ECB-options to current ECB-version if necessary."])) (list "Help" (ecb-menu-item ["Show Online Help" ecb-show-help :active t :help "Show the online help of ECB."]) (ecb-menu-item ["ECB NEWS" (ecb-display-news-for-upgrade t) :active t :help "Displays the NEWS-file of ECB."]) (ecb-menu-item ["List of most important options" (let ((ecb-show-help-format (quote info))) (ecb-show-help) (Info-goto-node "Most important options")) :active t :help "Displays a a list of options which you should know."]) (ecb-menu-item ["List of all options" (let ((ecb-show-help-format (quote info))) (ecb-show-help) (Info-goto-node "Option Index")) :active t :help "Displays an index of all user-options in the online-help."]) (ecb-menu-item ["List of all commands" (let ((ecb-show-help-format (quote info))) (ecb-show-help) (Info-goto-node "Command Index")) :active t :help "Displays an index of all commands in the online-help."]) (ecb-menu-item ["FAQ" (let ((ecb-show-help-format (quote info))) (ecb-show-help) (Info-goto-node "FAQ")) :active t :help "Show the FAQ of ECB."]) (ecb-menu-item ["Conflicts with other packages" (let ((ecb-show-help-format (quote info))) (ecb-show-help) (Info-goto-node "Conflicts and bugs")) :active t :help "What to do for conflicts with other packages."]) (ecb-menu-item ["Submit problem report" ecb-submit-problem-report :active t :help "Submit a problem report to the ECB mailing list."]) (ecb-menu-item ["ECB Debug mode" (setq ecb-debug-mode (not ecb-debug-mode)) :active t :style toggle :selected ecb-debug-mode :help "Print debug-informations about parsing files in the message buffer."]) (ecb-menu-item ["ECB Layout Debug mode" (setq ecb-layout-debug-mode (not ecb-layout-debug-mode)) :active t :style toggle :selected ecb-layout-debug-mode :help "Print debug-informations about window-operations in the message buffer."]) "-" (ecb-menu-item ["Help preferences..." (customize-group "ecb-help") :active t :help "Customize options for the online help of ECB"]) "-" (concat "ECB " ecb-version)) "-" (ecb-menu-item ["Deactivate ECB" ecb-deactivate :active t :help "Deactivate ECB."]))) nil [21785 35288])
            ("ecb-add-to-minor-modes" function nil nil [35290 35787])
            ("ecb-mode-map" variable nil nil [35789 35855])
            ("ecb-key-map" variable
               (:user-visible-flag t
                :default-value (quote ("C-c ." (t "fh" ecb-history-filter) (t "fs" ecb-sources-filter) (t "fm" ecb-methods-filter) (t "fr" ecb-methods-filter-regexp) (t "ft" ecb-methods-filter-tagclass) (t "fc" ecb-methods-filter-current-type) (t "fp" ecb-methods-filter-protection) (t "fn" ecb-methods-filter-nofilter) (t "fl" ecb-methods-filter-delete-last) (t "ff" ecb-methods-filter-function) (t "p" ecb-nav-goto-previous) (t "n" ecb-nav-goto-next) (t "lc" ecb-change-layout) (t "lr" ecb-redraw-layout) (t "lw" ecb-toggle-ecb-windows) (t "lt" ecb-toggle-layout) (t "s" ecb-window-sync) (t "r" ecb-rebuild-methods-buffer) (t "a" ecb-toggle-auto-expand-tag-tree) (t "x" ecb-expand-methods-nodes) (t "h" ecb-show-help) (t "gl" ecb-goto-window-edit-last) (t "g1" ecb-goto-window-edit1) (t "g2" ecb-goto-window-edit2) (t "gc" ecb-goto-window-compilation) (t "gd" ecb-goto-window-directories) (t "gs" ecb-goto-window-sources) (t "gm" ecb-goto-window-methods) (t "gh" ecb-goto-window-history) (t "ga" ecb-goto-window-analyse) (t "gb" ecb-goto-window-speedbar) (t "md" ecb-maximize-window-directories) (t "ms" ecb-maximize-window-sources) (t "mm" ecb-maximize-window-methods) (t "mh" ecb-maximize-window-history) (t "ma" ecb-maximize-window-analyse) (t "mb" ecb-maximize-window-speedbar) (t "e" eshell) (t "o" ecb-toggle-scroll-other-window-scrolls-compile) (t "\\" ecb-toggle-compile-window) (t "/" ecb-toggle-compile-window-height) (t "," ecb-cycle-maximized-ecb-buffers) (t "." ecb-cycle-through-compilation-buffers))))
                nil [35857 42221])
            ("ecb-activate" function (:user-visible-flag t) nil [42238 42553])
            ("ecb-activate-internal" function nil nil [42555 43086])
            ("ecb-upgrade-check-done" variable nil nil [43089 43124])
            ("ecb-clean-up-after-activation-failure" function (:arguments ("msg" "err")) nil [43126 43513])
            ("ecb-last-window-config-before-deactivation" variable nil nil [43515 43695])
            ("ecb-temporary-changed-emacs-variables-alist" variable nil nil [43697 43931])
            ("ecb-modify-emacs-variable" function (:arguments ("var" "action" "new-value")) nil [43933 45009])
            ("ecb-check-semantic-load" function nil nil [45011 47115])
            ("ecb-check-cedet-load" function nil nil [47117 49899])
            ("ecb-activate--impl" function nil nil [49902 64728])
            ("ecb-deactivate" function (:user-visible-flag t) nil [64731 64856])
            ("ecb-deactivate-internal" function (:arguments ("run-no-hooks")) nil [64858 72117])
            ("ecb-minor-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [72134 72663])
            ("ecb-compile-file-if-necessary" function (:arguments ("file" "force")) nil [72691 73102])
            ("ecb-byte-compile" function
               (:user-visible-flag t
                :arguments ("force-all"))
                nil [73119 74306])
            ("ecb-auto-activate-hook" function nil nil [74308 74446])
            ("add-hook" code nil nil [74448 74502])
            ("silentcomp-defvar" code nil nil [74504 74543])
            ("condition-case" code nil nil [74544 75185])
            ("eval-after-load" code nil nil [75266 78757])
            ("condition-case" code nil nil [78796 83706])
            ("dolist" code nil nil [83977 84079])
            ("ecb-file-browser-initialize" code nil nil [84131 84160])
            ("ecb-method-browser-initialize" code nil nil [84161 84192])
            ("silentcomp-provide" code nil nil [84194 84219]))          
    :file "ecb.el"
    :pointmax 84242
    :fsize 84242
    :lastmodtime '(20457 7013)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "silentcomp.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp-unbound-variables" variable nil nil [4364 4405])
            ("silentcomp-original-functions" variable nil nil [4406 4448])
            ("silentcomp-environment-set" variable nil nil [4449 4488])
            ("silentcomp-restore-environment" function nil nil [4490 5299])
            ("silentcomp-is-compiling" function nil nil [5301 5506])
            ("silentcomp-defvar" function (:arguments ("var")) nil [5508 6064])
            ("silentcomp-defun" function (:arguments ("fun")) nil [6066 7022])
            ("silentcomp-provide" function (:arguments ("feature")) nil [7024 7289])
            ("silentcomp" package nil nil [7291 7312]))          
    :file "silentcomp.el"
    :pointmax 7342
    :fsize 7341
    :lastmodtime '(20457 7013)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ecb-upgrade.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [7367 7388])
            ("ecb-version" variable
               (:constant-flag t
                :default-value "2.40")
                nil [7552 7606])
            ("cl" include nil nil [7629 7642])
            ("ecb-util" include nil nil [7645 7664])
            ("silentcomp-defun" code nil nil [7666 7699])
            ("silentcomp-defun" code nil nil [7700 7758])
            ("ecb-upgrade-news" variable
               (:constant-flag t
                :default-value (quote (("2.40" "ECB now requires full CEDET being installed (at least 1.0pre6)." "More user-responsible buffer-parsing based on the idle-mechanism of semantic." "ECB is able to work with indirect buffers it the base-buffer is filebased." "The history can now be bucketized, see new `ecb-history-make-buckets'." "New faces `ecb-history-bucket-node-face', `ecb-history-dead-buffer-face', `ecb-history-indirect-buffer-face'." "Sticky parwnt-node for all ECB-windows of type tree-buffer." "New support for Git and Monotone as version-control systems." "New command `ecb-goto-window-edit-by-smart-selection'." "New command `ecb-goto-window-ecb-by-smart-selection'." "New option `ecb-ignore-pop-up-frames'." "Full compatibility with Emacs 22 and 23 - see NEWS file." "Better compatibility with CEDET 1.0preX and semantic 2.0preX - see NEWS file." "The internal download-feature of ECB has been completely disabled.") ("2.32" "New ECB-window (tree-buffer) for the semantic-analyser." "New ECB-window for displaying definition for current symbol at point." "Up- and down-arrow are now also smart in the tree-buffers." "Much better maximizing/minimizing of the ecb-tree-windows." "New option `ecb-maximize-next-after-maximized-select'." "`ecb-truncate-lines' has been renamed to `ecb-tree-truncate-lines'") ("2.30" "Support for displaying the VC-state in the tree-buffers; see NEWS." "ECB is now capable of handling remote paths (e.g. TRAMP-paths)" "Precisely expanding of current node via popup-menu of the methods-buffer." "Time consuming tasks are performed stealthy; see `ecb-stealthy-tasks-delay'") ("2.27" "Much saver resizing-mechanism for permanent compile-window. See NEWS.") ("2.26" "Some regexp-options has been changed to regexp-list-options. See NEWS." "New option `ecb-history-exclude-file-regexps'." "`ecb-expand-methods-nodes' works for non-semantic-buffers too." "Readonly-sourcefiles are display in a different face.") ("2.25" "`ecb-sort-history-items' has been renamed to `ecb-history-sort-method'" "New options `ecb-sources-sort-ignore-case' and `ecb-history-sort-ignore-case'" "New icons for parent-display in the Methods-buffer") ("2.24" "New \"current-type\"-filter for the Methods-buffer" "Now directories are prescanned for emptyness") ("2.23" "New cedet1.0beta2 is supported." "Distinction between functions and function-prototypes in the Methods-buffer" "The command `ecb-toggle-layout' now has a prefix-argument" "Default tag-filters for certain files which are applied automatically" "Double-clicking the mouse-1-button now works with integrated speedbar" "A new hook `ecb-speedbar-before-activate-hook'") ("2.22" "New nifty feature for filtering the tags displayed in the Methods-buffer" "Much smarter mechanism to highlight the current tag in the methods-buffer" "New option `ecb-auto-expand-tag-tree-collapse-other'." "Fixed a bug preventing the native Windows-port of XEmacs from working.") ("2.21" "Advice for `balance-windows' so only the edit-windows are balanced." "Gnus, BBDB, VM, Xrefactory etc. work even when ECB-windows are visible." "Commands using `Electric-pop-up-window' now work correctly with ECB." "Fixed some annoying bugs and one fatal bug.") ("2.20" "Fixed a bug preventing tree-buffers with expand-symbol 'before' to work" "'ecb-major-modes-(de)activate' replaced by `ecb-major-modes-show-or-hide'" "New keybinding for the online-help: [C-c . h]" "The edit-area can be splitted in more than 2 windows." "`ecb-other-window-jump-behavior' renamed in `ecb-other-window-behavior'" "New option `ecb-maximize-ecb-window-after-selection'" "popup-menus of the tree-buffers can be used with the tmm-library" "New option `ecb-change-layout-preserves-compwin-state'" "`delete-window' and `delete-other-windows' handle the compile-window" "Support of the default modeline-mechanisms for deleting other windows") ("2.11" "Using semanticdb to jump to type-tags defined in other files") ("2.01" "Support for semantic 2.0" "The tree-buffers can be displayed graphically with images" "Popup-menus of the tree-buffers support submenus" "The sources- and the history-buffer can be filtered" "Ediff runs per default in the ECB-frame") ("1.96" "ECB can work together with the window-managers escreen and winring" "Much better support of the ECB-compile-window"))))
                nil [8089 13294])
            ("ecb-upgradable-option-alist" variable
               (:constant-flag t
                :default-value (quote ((ecb-compile-window-temporally-enlarge ecb-compile-window-temporally-enlarge ecb-upgrade-compile-window-temporally-enlarge) (ecb-hide-ecb-windows-hook ecb-hide-ecb-windows-before-hook identity) (ecb-show-ecb-windows-hook ecb-show-ecb-windows-before-hook identity) (ecb-layout-nr ecb-layout-name ecb-upgrade-layout-nr) (ecb-toggle-layout-sequence ecb-toggle-layout-sequence ecb-upgrade-toggle-layout-sequence) (ecb-cache-directory-contents ecb-cache-directory-contents ecb-upgrade-cache-directory-contents) (ecb-layout-always-operate-in-edit-window ecb-layout-always-operate-in-edit-window ecb-upgrade-alway-operate-in-edit-window) (ecb-truncate-lines ecb-tree-truncate-lines ecb-upgrade-truncate-lines) (ecb-mode-line-prefixes ecb-mode-line-prefixes ecb-upgrade-mode-line-prefixes) (ecb-mode-line-data ecb-mode-line-data ecb-upgrade-mode-line-data) (ecb-use-speedbar-for-directories ecb-use-speedbar-instead-native-tree-buffer ecb-upgrade-use-speedbar-for-directories) (ecb-directories-menu-user-extension ecb-directories-menu-user-extension ecb-upgrade-directories-menu-ext) (ecb-sources-menu-user-extension ecb-sources-menu-user-extension ecb-upgrade-sources-menu-ext) (ecb-methods-menu-user-extension ecb-methods-menu-user-extension ecb-upgrade-methods-menu-ext) (ecb-history-menu-user-extension ecb-history-menu-user-extension ecb-upgrade-history-menu-ext) (ecb-bucket-token-display ecb-bucket-node-display identity) (ecb-auto-expand-token-tree ecb-auto-expand-tag-tree identity) (ecb-font-lock-tokens ecb-font-lock-tags identity) (ecb-token-jump-sets-mark ecb-tag-jump-sets-mark identity) (ecb-token-display-function ecb-tag-display-function ecb-upgrade-token-display-function) (ecb-type-token-display ecb-type-tag-display ecb-upgrade-type-token-display) (ecb-post-process-semantic-tokenlist ecb-post-process-semantic-taglist ecb-upgrade-post-process-semantic-tokenlist) (ecb-show-only-positioned-tokens ecb-show-only-positioned-tags identity) (ecb-show-tokens ecb-show-tags ecb-upgrade-show-tags) (ecb-show-tags ecb-show-tags ecb-upgrade-show-tags) (ecb-highlight-token-with-point ecb-highlight-tag-with-point identity) (ecb-highlight-token-with-point-delay ecb-highlight-tag-with-point-delay identity) (ecb-token-visit-post-actions ecb-tag-visit-post-actions ecb-upgrade-token-visit-post-actions) (ecb-token-header-face ecb-tag-header-face ecb-upgrade-token-header-face) (ecb-post-process-semantic-taglist ecb-post-process-semantic-taglist ecb-upgrade-post-process-semantic-taglist) (ecb-primary-mouse-jump-destination ecb-mouse-click-destination identity) (ecb-split-edit-window ecb-split-edit-window-after-start ecb-upgrade-split-edit-window) (ecb-sort-history-items ecb-history-sort-method ecb-upgrade-sort-history-items) (ecb-other-window-jump-behavior ecb-other-window-behavior ecb-upgrade-other-window-jump-behavior) (ecb-excluded-directories-regexp ecb-excluded-directories-regexps ecb-upgrade-excluded-directories-regexp) (ecb-source-file-regexps ecb-source-file-regexps ecb-upgrade-source-file-regexps) (ecb-exclude-parents-regexp ecb-exclude-parents-regexps ecb-upgrade-exclude-parents-regexp) (ecb-auto-expand-tag-tree-collapse-other ecb-auto-expand-tag-tree-collapse-other ecb-upgrade-auto-expand-tag-tree-collapse-other) (ecb-prescan-directories-for-emptyness ecb-prescan-directories-for-emptyness ecb-upgrade-prescan-directories-for-emptyness) (ecb-sources-perform-read-only-check ecb-sources-perform-read-only-check ecb-upgrade-sources-perform-read-only-check) (ecb-vc-enable-support ecb-vc-enable-support ecb-upgrade-vc-enable-support) (ecb-tree-image-icons-directories ecb-tree-image-icons-directories ecb-upgrade-tree-image-icons-directories) (ecb-tree-RET-selects-edit-window ecb-tree-do-not-leave-window-after-select ecb-upgrade-tree-RET-selects-edit-window) (ecb-grep-find-function ecb-grep-recursive-function identity))))
                nil [13511 20425])
            ("ecb-upgrade-compile-window-temporally-enlarge" function (:arguments ("old-val")) nil [20674 20893])
            ("ecb-upgrade-window-sync" function (:arguments ("old-val")) nil [20924 21060])
            ("ecb-upgrade-layout-nr2name" function (:arguments ("number")) nil [21145 22213])
            ("ecb-upgrade-layout-nr" function (:arguments ("old-val")) nil [22215 22378])
            ("ecb-upgrade-toggle-layout-sequence" function (:arguments ("old-val")) nil [22380 22544])
            ("ecb-upgrade-use-speedbar-for-directories" function (:arguments ("old-val")) nil [22546 22630])
            ("ecb-upgrade-major-modes-activate" function (:arguments ("old-val")) nil [22632 22930])
            ("ecb-upgrade-cache-directory-contents" function (:arguments ("old-val")) nil [22932 23097])
            ("ecb-upgrade-truncate-lines" function (:arguments ("old-val")) nil [23099 24015])
            ("ecb-upgrade-alway-operate-in-edit-window" function (:arguments ("old-val")) nil [24017 24170])
            ("ecb-upgrade-mode-line-prefixes" function (:arguments ("old-val")) nil [24172 24505])
            ("ecb-upgrade-mode-line-data" function (:arguments ("old-val")) nil [24507 25085])
            ("ecb-upgrade-menu-extension" function (:arguments ("old-list")) nil [25087 25220])
            ("ecb-upgrade-directories-menu-ext" function (:arguments ("old-val")) nil [25222 25438])
            ("ecb-upgrade-sources-menu-ext" function (:arguments ("old-val")) nil [25440 25648])
            ("ecb-upgrade-methods-menu-ext" function (:arguments ("old-val")) nil [25650 25858])
            ("ecb-upgrade-history-menu-ext" function (:arguments ("old-val")) nil [25860 26068])
            ("ecb-upgrade-token-display-function" function (:arguments ("old-val")) nil [26070 27942])
            ("ecb-upgrade-type-token-display" function (:arguments ("old-val")) nil [27945 28754])
            ("ecb-upgrade-post-process-semantic-tokenlist" function (:arguments ("old-val")) nil [28756 29168])
            ("ecb-upgrade-token-visit-post-actions" function (:arguments ("old-val")) nil [29170 30110])
            ("ecb-upgrade-token-header-face" function (:arguments ("old-val")) nil [30112 30244])
            ("ecb-upgrade-post-process-semantic-taglist" function (:arguments ("old-val")) nil [30246 30431])
            ("ecb-upgrade-split-edit-window" function (:arguments ("old-val")) nil [30433 30542])
            ("ecb-upgrade-other-window-jump-behavior" function (:arguments ("old-val")) nil [30544 30735])
            ("ecb-upgrade-show-tags" function (:arguments ("old-val")) nil [30737 30856])
            ("ecb-upgrade-sort-history-items" function (:arguments ("old-val")) nil [30858 30945])
            ("ecb-upgrade-excluded-directories-regexp" function (:arguments ("old-val")) nil [30947 31021])
            ("ecb-upgrade-source-file-regexps" function (:arguments ("old-val")) nil [31023 31200])
            ("ecb-upgrade-exclude-parents-regexp" function (:arguments ("old-val")) nil [31206 31288])
            ("ecb-upgrade-auto-expand-tag-tree-collapse-other" function (:arguments ("old-val")) nil [31290 31400])
            ("ecb-upgrade-prescan-directories-for-emptyness" function (:arguments ("old-val")) nil [31402 31499])
            ("ecb-upgrade-sources-perform-read-only-check" function (:arguments ("old-val")) nil [31501 31596])
            ("ecb-upgrade-vc-enable-support" function (:arguments ("old-val")) nil [31600 31681])
            ("ecb-upgrade-tree-image-icons-directories" function (:arguments ("old-val")) nil [31683 32398])
            ("ecb-upgrade-tree-RET-selects-edit-window" function (:arguments ("old-val")) nil [32400 32916])
            ("ecb-upgrade-internal" customgroup (:user-visible-flag t) nil [33133 33282])
            ("ecb-options-version" variable
               (:user-visible-flag t
                :default-value ecb-version)
                nil [33284 33440])
            ("ecb-custom-file-writeable-p" function nil nil [33442 33758])
            ("ecb-customize-save-variable" function (:arguments ("option" "value")) nil [33760 34234])
            ("ecb-customize-set-variable" function (:arguments ("option" "value")) nil [34236 34325])
            ("ecb-option-set-default" function (:arguments ("option")) nil [34327 34539])
            ("ecb-option-upgrade" function (:arguments ("old-option")) nil [34541 36989])
            ("ecb-option-compatible-p" function (:arguments ("option")) nil [36991 37270])
            ("ecb-old-ecb-version" variable nil nil [37272 37402])
            ("ecb-options-version=ecb-version-p" function nil nil [37404 37626])
            ("ecb-store-current-options-version" function nil nil [37628 37930])
            ("ecb-not-compatible-options" variable nil nil [37935 38264])
            ("ecb-all-options" variable nil nil [38267 38295])
            ("ecb-get-all-ecb-options" function nil nil [38297 38589])
            ("ecb-check-not-compatible-options" function nil nil [38591 39301])
            ("ecb-upgrade-not-compatible-options" function nil nil [39303 40537])
            ("ecb-renamed-options" variable nil nil [40544 40576])
            ("ecb-upgrade-renamed-options" function nil nil [40578 42303])
            ("wid-edit" include nil nil [42305 42324])
            ("silentcomp-defvar" code nil nil [42325 42365])
            ("silentcomp-defvar" code nil nil [42366 42399])
            ("ecb-upgrade-button-keymap" variable (:default-value (let (parent-keymap mouse-button1 keymap) (if ecb-running-xemacs (setq parent-keymap widget-button-keymap mouse-button1 [button1]) (setq parent-keymap widget-keymap mouse-button1 [down-mouse-1])) (setq keymap (copy-keymap parent-keymap)) (define-key keymap mouse-button1 (function widget-button-click)) keymap)) nil [42401 42827])
            ("ecb-not-compatible-or-renamed-options-detected" function nil nil [42830 42941])
            ("ecb-upgrade-make-copy-of-custom-file" function nil nil [42943 43449])
            ("ecb-display-upgraded-options" function (:user-visible-flag t) nil [43458 56028])
            ("ecb-display-news-for-upgrade" function
               (:user-visible-flag t
                :arguments ("full-news"))
                nil [56030 57623])
            ("ecb-upgrade-options" function (:user-visible-flag t) nil [57632 58115])
            ("ecb-required-cedet-version-min" variable
               (:constant-flag t
                :default-value (quote (1 0 2 6)))
                nil [58384 58436])
            ("ecb-required-cedet-version-max" variable
               (:constant-flag t
                :default-value (quote (1 1 4 9)))
                nil [58437 58489])
            ("ecb-all-requirements-available" variable nil nil [58491 58534])
            ("ecb-check-requirements" function nil nil [58536 60483])
            ("ecb-package-version-str2list" function (:arguments ("ver-str")) nil [60486 61718])
            ("ecb-package-version-list<" function (:arguments ("ver1" "ver2")) nil [62072 62616])
            ("ecb-package-version-string<" function (:arguments ("ver1-str" "ver2-str")) nil [62618 62891])
            ("ecb-package-version-list2str" function (:arguments ("ver")) nil [62893 63387])
            ("silentcomp-provide" code nil nil [64123 64156]))          
    :file "ecb-upgrade.el"
    :pointmax 64187
    :fsize 64186
    :lastmodtime '(20458 20698)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ecb-util.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1610 1631])
            ("cl" include nil nil [1653 1666])
            ("silentcomp-defun" code nil nil [1741 1782])
            ("silentcomp-defun" code nil nil [1783 1824])
            ("silentcomp-defun" code nil nil [1825 1864])
            ("silentcomp-defun" code nil nil [1865 1893])
            ("silentcomp-defun" code nil nil [1894 1927])
            ("silentcomp-defun" code nil nil [1928 1959])
            ("silentcomp-defun" code nil nil [1960 1991])
            ("silentcomp-defun" code nil nil [1992 2026])
            ("silentcomp-defun" code nil nil [2027 2069])
            ("silentcomp-defun" code nil nil [2070 2106])
            ("silentcomp-defun" code nil nil [2107 2144])
            ("silentcomp-defun" code nil nil [2145 2178])
            ("silentcomp-defun" code nil nil [2188 2223])
            ("silentcomp-defvar" code nil nil [2224 2258])
            ("silentcomp-defun" code nil nil [2259 2290])
            ("silentcomp-defun" code nil nil [2291 2328])
            ("silentcomp-defun" code nil nil [2329 2358])
            ("silentcomp-defun" code nil nil [2359 2389])
            ("silentcomp-defun" code nil nil [2390 2420])
            ("silentcomp-defun" code nil nil [2421 2458])
            ("silentcomp-defun" code nil nil [2469 2503])
            ("silentcomp-defun" code nil nil [2504 2538])
            ("silentcomp-defun" code nil nil [2539 2571])
            ("silentcomp-defun" code nil nil [2572 2601])
            ("silentcomp-defvar" code nil nil [2611 2646])
            ("silentcomp-defvar" code nil nil [2647 2689])
            ("silentcomp-defun" code nil nil [2690 2723])
            ("silentcomp-defun" code nil nil [2724 2759])
            ("silentcomp-defvar" code nil nil [2760 2796])
            ("silentcomp-defvar" code nil nil [2797 2837])
            ("silentcomp-defun" code nil nil [2838 2875])
            ("silentcomp-defvar" code nil nil [2876 2914])
            ("silentcomp-defun" code nil nil [2942 2974])
            ("silentcomp-defun" code nil nil [2975 3006])
            ("silentcomp-defun" code nil nil [3033 3068])
            ("silentcomp-defun" code nil nil [3069 3100])
            ("silentcomp-defun" code nil nil [3102 3132])
            ("ecb-running-xemacs" variable
               (:constant-flag t
                :default-value (featurep (quote xemacs)))
                nil [3289 3337])
            ("ecb-running-unsupported-emacs" variable
               (:constant-flag t
                :default-value (condition-case nil (<= emacs-major-version 20) (error t)))
                nil [3339 3566])
            ("ecb-running-version-22" variable
               (:constant-flag t
                :default-value (and (not ecb-running-unsupported-emacs) (>= emacs-major-version 22)))
                nil [3568 3753])
            ("ecb-running-version-23" variable
               (:constant-flag t
                :default-value (and (not ecb-running-unsupported-emacs) (>= emacs-major-version 23)))
                nil [3755 3940])
            ("ecb-temp-dir" variable
               (:constant-flag t
                :default-value (file-name-as-directory (or (getenv "TMPDIR") (getenv "TMP") (getenv "TEMP") (if (eq system-type (quote windows-nt)) "c:/temp/" "/tmp/"))))
                nil [3942 4162])
            ("ecb-ecb-dir" variable
               (:constant-flag t
                :default-value (expand-file-name (file-name-directory (locate-library "ecb"))))
                nil [4164 4252])
            ("ecb-semantic-dir" variable
               (:constant-flag t
                :default-value (if (locate-library "semantic") (expand-file-name (file-name-directory (locate-library "semantic")))))
                nil [4253 4390])
            ("ecb-ecb-parent-dir" variable
               (:constant-flag t
                :default-value (expand-file-name (concat ecb-ecb-dir "../")))
                nil [4392 4467])
            ("ecb-regular-xemacs-package-p" variable
               (:constant-flag t
                :default-value (and ecb-running-xemacs (file-exists-p (expand-file-name (concat ecb-ecb-dir "_pkg.el"))) (file-exists-p (expand-file-name (concat ecb-ecb-dir "auto-autoloads.el")))))
                nil [4648 4870])
            ("ecb-images-can-be-used" variable nil nil [5037 5110])
            ("ecb-images-can-be-used-init-p" variable nil nil [5111 5191])
            ("ecb-images-can-be-used" function nil nil [5193 5638])
            ("when-ecb-running-xemacs" function (:arguments ("body")) nil [5828 6081])
            ("when-ecb-running-emacs" function (:arguments ("body")) nil [6083 6342])
            ("when" code nil nil [6479 9351])
            ("unless" code nil nil [9353 10955])
            ("if" code nil nil [10982 11829])
            ("if" code nil nil [11861 12513])
            ("if" code nil nil [12531 13169])
            ("ecb-custom-file" function nil nil [13234 13617])
            ("ecb-option-get-value" function (:arguments ("option" "type")) nil [13619 14512])
            ("ecb-remove-assoc" function (:arguments ("key" "list")) nil [14576 14828])
            ("ecb-add-assoc" function (:arguments ("key-value" "list")) nil [14831 14893])
            ("ecb-find-assoc-value" function (:arguments ("key" "list")) nil [14895 14959])
            ("ecb-find-assoc" function (:arguments ("key" "list")) nil [14961 15013])
            ("ecb-filter" function (:arguments ("seq" "pred")) nil [15077 15321])
            ("ecb-some" function (:arguments ("cl-pred" "cl-seq" "cl-rest")) nil [15323 15843])
            ("ecb-copy-list" function (:arguments ("list")) nil [15845 16231])
            ("ecb-set-difference" function (:arguments ("list1" "list2" "test-fcn")) nil [16233 16979])
            ("ecb-member" function (:arguments ("item" "list" "test-fcn")) nil [16982 17583])
            ("ecb-position" function (:arguments ("seq" "elem" "test-fcn")) nil [17585 18145])
            ("ecb-set-elt" function (:arguments ("seq" "n" "val")) nil [18147 18399])
            ("ecb-remove-elt" function (:arguments ("seq" "n")) nil [18401 18643])
            ("ecb-replace-first-occurence" function (:arguments ("seq" "old-elem" "new-elem")) nil [18645 18951])
            ("ecb-replace-all-occurences" function (:arguments ("seq" "old-elem" "new-elem")) nil [18953 19262])
            ("ecb-remove-first-occurence-from-list" function (:arguments ("list" "elem")) nil [19264 19552])
            ("ecb-remove-all-occurences-from-list" function (:arguments ("list" "elem")) nil [19554 19992])
            ("ecb-subseq" function (:arguments ("seq" "start" "end")) nil [19994 21075])
            ("ecb-concatenate" function (:arguments ("type" "seqs")) nil [21077 21423])
            ("ecb-rotate" function (:arguments ("seq" "start-elem")) nil [21425 22017])
            ("ecb-last" function (:arguments ("seq")) nil [22019 22204])
            ("ecb-first" function (:arguments ("seq")) nil [22206 22370])
            ("ecb-next-listelem" function (:arguments ("list" "elem" "nth-next")) nil [22375 23255])
            ("ecb-aggregate-alist" function (:arguments ("alist" "same-predicate" "sort-predicate")) nil [23257 24752])
            ("ecb-member-of-symbol/value-list" function (:arguments ("value" "list" "elem-accessor" "return-accessor" "compare-fcn")) nil [25112 26401])
            ("ecb-match-regexp-list" function (:arguments ("str" "regexp-list" "elem-accessor" "return-accessor")) nil [27074 27907])
            ("ecb-multicache-init" function (:arguments ("cache-var")) nil [27993 28382])
            ("ecb-multicache-add-empty-key" function (:arguments ("cache-var" "key")) nil [28384 29206])
            ("ecb-multicache-get-subcache" function (:arguments ("cache-var" "key" "subcache")) nil [29208 29660])
            ("defecb-multicache" function (:arguments ("name" "size" "test" "subcache" "docstring")) nil [29703 31532])
            ("put" code nil nil [31533 31581])
            ("ecb-multicache-p" function (:arguments ("cache-var")) nil [31676 31891])
            ("ecb-multicache-get-value" function (:arguments ("cache-var" "key" "subcache")) nil [31893 32624])
            ("ecb-multicache-get-values" function (:arguments ("cache-var" "key" "subcache-list")) nil [32626 33528])
            ("ecb-multicache-apply-to-value" function (:arguments ("cache-var" "key" "subcache" "apply-fcn" "only-if-key-exist")) nil [33530 35510])
            ("ecb-multicache-put-value" function (:arguments ("cache-var" "key" "subcache" "value")) nil [35520 36199])
            ("ecb-multicache-clear-value" function (:arguments ("cache-var" "key" "subcache")) nil [36201 36569])
            ("ecb-multicache-remove" function (:arguments ("cache-var" "key")) nil [36571 36856])
            ("ecb-multicache-mapsubcache" function (:arguments ("cache-var" "subcache" "mapfcn")) nil [36858 37812])
            ("ecb-multicache-clear-subcache" function (:arguments ("cache-var" "subcache")) nil [37814 38219])
            ("ecb-multicache-clear" function (:arguments ("cache-var")) nil [38221 38493])
            ("ecb-multicache-print-subcache" function (:arguments ("cache-var" "subcache" "no-nil-value")) nil [38495 41415])
            ("ecb-confirm" function (:arguments ("text")) nil [41482 41529])
            ("ecb-query-string" function (:arguments ("prompt" "choices" "other-prompt")) nil [41646 43130])
            ("ecb-offer-choices" function (:arguments ("prompt" "choices")) nil [43241 44227])
            ("ecb-read-number" function (:arguments ("prompt" "init-value")) nil [46272 47118])
            ("ecb-message-box" function (:arguments ("message-str" "title-text" "button-text")) nil [47120 48470])
            ("ecb-nolog-message" function (:arguments ("args")) nil [52952 53726])
            ("ecb-error" function (:arguments ("args")) nil [53728 54073])
            ("ecb-warning" function (:arguments ("args")) nil [54075 54207])
            ("ecb-info-message" function (:arguments ("args")) nil [54209 54348])
            ("ecb-merge-face-into-text" function (:arguments ("text" "face")) nil [54412 56832])
            ("if" code nil nil [56834 58461])
            ("ecb-string=" function (:arguments ("str1" "str2" "ignore-case")) nil [58463 58714])
            ("ecb-string<" function (:arguments ("str1" "str2" "ignore-case")) nil [58716 59035])
            ("ecb-excessive-trim" function (:arguments ("str")) nil [59037 59411])
            ("ecb-left-trim" function (:arguments ("str")) nil [59667 59957])
            ("ecb-right-trim" function (:arguments ("str")) nil [59959 60099])
            ("ecb-trim" function (:arguments ("str")) nil [60101 60219])
            ("ecb-full-trim" function (:arguments ("str")) nil [60221 60339])
            ("ecb-fit-str-to-width" function (:arguments ("str" "width" "from")) nil [60341 61103])
            ("ecb-normalize-number" function (:arguments ("value" "ref-value")) nil [61167 61550])
            ("ecb-working-message" variable nil nil [61845 61919])
            ("ecb-working-donestring" variable nil nil [61920 62001])
            ("ecb-working-ref1" variable nil nil [62002 62077])
            ("ecb-working-last-percent" variable nil nil [62078 62159])
            ("ecb-working-frame-animation-display" function (:arguments ("length" "number" "frames")) nil [62161 63415])
            ("ecb-working-celeron-strings" variable (:default-value ["[O     ]" "[oO    ]" "[-oO   ]" "[ -oO  ]" "[  -oO ]" "[   -oO]" "[    -O]" "[     O]" "[    Oo]" "[   Oo-]" "[  Oo- ]" "[ Oo-  ]" "[Oo-   ]" "[O-    ]"]) nil [63417 63663])
            ("ecb-working-celeron-display" function (:arguments ("length" "number")) nil [63665 64223])
            ("ecb-working-dynamic-status" function (:arguments ("number")) nil [64227 64671])
            ("ecb-working-status-timeout" function (:arguments ("timeout" "message" "donestr" "forms")) nil [64673 65667])
            ("ecb-working-status-call-process" function (:arguments ("timeout" "message" "donestr" "program" "infile" "buffer" "display" "args")) nil [65670 66841])
            ("ecb-current-line" function nil nil [66905 67075])
            ("ecb-goto-line" function (:arguments ("line")) nil [67077 67431])
            ("ecb-with-readonly-buffer" function (:arguments ("buffer" "body")) nil [67433 68065])
            ("put" code nil nil [68067 68122])
            ("ecb-do-if-buffer-visible-in-ecb-frame" function (:arguments ("buffer-name-symbol" "body")) nil [68124 69500])
            ("put" code nil nil [69501 69569])
            ("ecb-buffer-substring" function (:arguments ("minpoint" "maxpoint" "buffer")) nil [69571 69883])
            ("ecb-delete-file" function (:arguments ("file")) nil [69885 70056])
            ("ecb-buffer-name" function (:arguments ("buffer-or-name")) nil [70058 70262])
            ("ecb-buffer-obj" function (:arguments ("buffer-or-name")) nil [70264 70468])
            ("ecb-buffer-local-value" function (:arguments ("sym" "buffer")) nil [70470 70800])
            ("ecb-file-content-as-string" function (:arguments ("file")) nil [70960 71477])
            ("ecb-current-buffer-archive-extract-p" function nil nil [71479 71881])
            ("ecb-buffer-file-name" function (:arguments ("buffer" "no-indirect-buffers")) nil [71883 72455])
            ("ecb-buffer-or-file-readable-p" function (:arguments ("filename")) nil [72458 73199])
            ("ecb-window-list" function (:arguments ("frame" "minibuf" "window")) nil [73654 76542])
            ("ecb-canonical-windows-list" function nil nil [76544 76820])
            ("ecb-enlarge-window" function (:arguments ("window" "val")) nil [76822 77629])
            ("ecb-window-safely-shrinkable-p" function (:arguments ("window")) nil [77631 78066])
            ("ecb-fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height"))
                nil [78068 82040])
            ("ecb-test-fit-window-to-buffer" function nil nil [82042 82276])
            ("ecb-scroll-window" function (:arguments ("point" "window-start")) nil [82278 82521])
            ("ecb-window-select" function (:arguments ("buffer-or-name")) nil [82523 82935])
            ("ecb-exec-in-window" function (:arguments ("buffer-or-name" "body")) nil [82937 83527])
            ("put" code nil nil [83529 83578])
            ("ecb-make-windows-not-dedicated" function (:arguments ("frame")) nil [83580 83819])
            ("ecb-set-windows-dedicated-state" function (:arguments ("buf-list" "state")) nil [83821 84199])
            ("ecb-window-in-window-list-number" function (:arguments ("win-list" "window")) nil [84202 84651])
            ("ecb-time-to-seconds" function (:arguments ("time")) nil [84761 84925])
            ("ecb-seconds-to-time" function (:arguments ("seconds")) nil [84927 85148])
            ("ecb-subtract-time" function (:arguments ("t1" "t2")) nil [85150 85398])
            ("ecb-time-diff" function (:arguments ("t1" "t2" "rounded")) nil [85400 85711])
            ("ecb-time-less-p" function (:arguments ("t1" "t2")) nil [85860 86030])
            ("ring" include nil nil [86094 86109])
            ("defalias" code nil nil [86110 86146])
            ("defalias" code nil nil [86147 86177])
            ("defalias" code nil nil [86178 86220])
            ("defalias" code nil nil [86221 86261])
            ("defalias" code nil nil [86262 86296])
            ("ecb-ring-elements" function (:arguments ("ring")) nil [86345 86453])
            ("ecb-max-submenu-depth" variable (:default-value 4) nil [86517 86613])
            ("ecb-create-menu-user-ext-type" function (:arguments ("curr-level" "max-level")) nil [86615 87767])
            ("ecb-is-byte-compiling" function nil nil [87830 88033])
            ("ecb-load-in-progress-p" function nil nil [88035 88087])
            ("ecb-current-input-throw-symbol" variable nil nil [88184 88281])
            ("ecb-exit-on-input" function (:arguments ("symbol" "forms")) nil [88283 88716])
            ("put" code nil nil [88717 88765])
            ("ecb-throw-on-input" function (:arguments ("from" "value")) nil [88767 89490])
            ("ecb-test-throw-on-input" function (:user-visible-flag t) nil [89493 90317])
            ("silentcomp-provide" code nil nil [90735 90765]))          
    :file "ecb-util.el"
    :pointmax 90832
    :fsize 90831
    :lastmodtime '(20457 7013)
    :unmatched-syntax '((close-paren 1666 . 1667) (symbol 1635 . 1652) (open-paren 1634 . 1635) (close-paren 1631 . 1632) (symbol 1590 . 1607) (open-paren 1589 . 1590))
    )
   (semanticdb-table "tree-buffer.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1556 1577])
            ("cl" include nil nil [1630 1643])
            ("silentcomp-defun" code nil nil [1662 1703])
            ("silentcomp-defun" code nil nil [1704 1743])
            ("silentcomp-defun" code nil nil [1744 1772])
            ("silentcomp-defun" code nil nil [1773 1811])
            ("silentcomp-defun" code nil nil [1812 1849])
            ("silentcomp-defun" code nil nil [1850 1887])
            ("silentcomp-defun" code nil nil [1888 1922])
            ("silentcomp-defun" code nil nil [1923 1955])
            ("silentcomp-defun" code nil nil [1956 1996])
            ("silentcomp-defun" code nil nil [1997 2036])
            ("silentcomp-defun" code nil nil [2037 2066])
            ("silentcomp-defun" code nil nil [2067 2118])
            ("silentcomp-defun" code nil nil [2119 2171])
            ("silentcomp-defvar" code nil nil [2172 2204])
            ("silentcomp-defvar" code nil nil [2214 2252])
            ("silentcomp-defvar" code nil nil [2253 2288])
            ("silentcomp-defvar" code nil nil [2289 2331])
            ("silentcomp-defun" code nil nil [2332 2362])
            ("silentcomp-defun" code nil nil [2363 2396])
            ("silentcomp-defun" code nil nil [2397 2431])
            ("silentcomp-defun" code nil nil [2432 2467])
            ("silentcomp-defun" code nil nil [2468 2498])
            ("silentcomp-defun" code nil nil [2499 2528])
            ("silentcomp-defun" code nil nil [2529 2564])
            ("silentcomp-defun" code nil nil [2565 2600])
            ("silentcomp-defun" code nil nil [2601 2642])
            ("silentcomp-defun" code nil nil [2643 2680])
            ("silentcomp-defun" code nil nil [2681 2710])
            ("silentcomp-defun" code nil nil [2711 2752])
            ("silentcomp-defvar" code nil nil [2753 2803])
            ("silentcomp-defun" code nil nil [2830 2862])
            ("silentcomp-defun" code nil nil [2863 2894])
            ("tree-buffer-running-xemacs" variable
               (:constant-flag t
                :default-value (featurep (quote xemacs)))
                nil [2896 2952])
            ("if" code nil nil [2984 5764])
            ("if" code nil nil [5791 6441])
            ("if" code nil nil [6460 7529])
            ("tree-buffer-copy-list" function (:arguments ("list")) nil [7554 7948])
            ("tree-buffer-member" function (:arguments ("item" "list" "test-fcn")) nil [7950 8560])
            ("tree-buffer-position" function (:arguments ("seq" "elem" "test-fcn")) nil [8562 9138])
            ("tree-buffer-last" function (:arguments ("seq")) nil [9140 9333])
            ("tree-buffer-first" function (:arguments ("seq")) nil [9335 9507])
            ("tree-buffer-set-elt" function (:arguments ("seq" "n" "val")) nil [9512 9772])
            ("tree-buffer-remove-elt" function (:arguments ("seq" "n")) nil [9774 10046])
            ("tree-buffer-aset" function (:arguments ("array" "idx" "newelt")) nil [10048 10174])
            ("tree-buffer-nolog-message" function (:arguments ("args")) nil [10176 10966])
            ("tree-buffer-current-line" function nil nil [10968 11146])
            ("tree-buffer-goto-line" function (:arguments ("line")) nil [11148 11510])
            ("tree-buffer-debug-mode" variable nil nil [11526 11761])
            ("tree-buffer-debug-error" function (:arguments ("args")) nil [11763 12117])
            ("tree-node" type
               (:members ("name" "type" "data" "children" "parent" "shrink-name" "expandable" "expanded" "displayed-name" "indentstr")
                :type "struct")
                nil [12133 12369])
            ("tree-node-new" function (:arguments ("name" "type" "data" "not-expandable" "parent" "shrink-name")) nil [12371 14610])
            ("tree-node-indentlength" function (:arguments ("node")) nil [14612 14732])
            ("tree-node-linelength" function (:arguments ("node")) nil [14734 15034])
            ("tree-node-toggle-expanded" function (:arguments ("node")) nil [15036 15187])
            ("tree-node-indent-level" function (:arguments ("node")) nil [15189 15464])
            ("tree-node-new-root" function nil nil [15466 15705])
            ("tree-node-update" function (:arguments ("node" "name" "type" "data" "expandable" "shrink-name")) nil [15707 16402])
            ("tree-node-add-children" function (:arguments ("node" "children" "at-beginning")) nil [16404 17357])
            ("tree-node-sort-children" function (:arguments ("node" "sortfn")) nil [17359 17671])
            ("tree-node-remove-child" function (:arguments ("node" "child")) nil [17673 17892])
            ("tree-node-find-child-by-data/name" function (:arguments ("node" "child-data" "child-name")) nil [17894 18572])
            ("tree-node-remove-child-by-data/name" function (:arguments ("node" "child-data" "child-name")) nil [18574 19542])
            ("tree-node-find-child-by-name" function (:arguments ("node" "child-name")) nil [19544 19803])
            ("tree-node-search-subtree-by-data/name" function (:arguments ("start-node" "data" "name")) nil [19805 20606])
            ("tree-node-map-subtree" function (:arguments ("start-node" "map-fcn")) nil [20670 21600])
            ("tree-buffer-root" variable nil nil [22168 22300])
            ("tree-buffer-displayed-nodes" variable nil nil [22302 22483])
            ("tree-buffer-initialize-displayed-nodes" function nil nil [22485 22637])
            ("tree-buffer-number-of-displayed-nodes" function nil nil [22639 22779])
            ("tree-buffer-nth-displayed-node" function (:arguments ("n")) nil [22781 22990])
            ("tree-buffer-find-displayed-node-by-data/name" function (:arguments ("node-data" "node-name" "start-node")) nil [22992 24783])
            ("tree-buffer-search-displayed-node-list" function (:arguments ("search-fcn")) nil [24785 25110])
            ("tree-buffer-displayed-node-nr" function (:arguments ("node")) nil [25112 25394])
            ("tree-buffer-displayed-node-linenr" function (:arguments ("node")) nil [25396 25575])
            ("tree-buffer-add-to-displayed-nodes" function (:arguments ("node")) nil [25577 25801])
            ("tree-buffer-displayed-nodes-remove-nth" function (:arguments ("n")) nil [25803 25994])
            ("tree-buffer-displayed-nodes-remove-node" function (:arguments ("node")) nil [25996 26210])
            ("tree-buffer-displayed-nodes-replace-nth" function (:arguments ("n" "new-node")) nil [26212 26437])
            ("tree-buffer-displayed-nodes-replace-node" function (:arguments ("node" "new-node")) nil [26439 26758])
            ("tree-buffer-set-displayed-nodes" function (:arguments ("displayed-nodes")) nil [26760 27029])
            ("tree-buffer-displayed-nodes-copy" function nil nil [27031 27267])
            ("tree-buffer-map-displayed-nodes" function (:arguments ("function")) nil [27269 27600])
            ("tree-buffer-frame" variable nil nil [27642 27762])
            ("tree-buffer-key-map" variable nil nil [27764 27891])
            ("tree-buffer-highlighted-node" variable nil nil [27893 28274])
            ("tree-buffer-highlighted-node-matches-data/name-p" function (:arguments ("data" "name")) nil [28276 28934])
            ("tree-buffer-highlight-overlay" variable nil nil [28937 29103])
            ("tree-buffer-general-overlay" variable nil nil [29105 29272])
            ("tree-buffer-spec" variable nil nil [29274 29355])
            ("tree-buffer-hscroll-number" variable nil nil [29357 29500])
            ("tree-buffer-sticky-parent-node-function" variable nil nil [29502 29811])
            ("tree-buffer-spec" type
               (:members ("tree-indent" "menu-creator" "menu-titles" "modeline-menu-creator" "sticky-parent-p" "sticky-indent-string" "sticky-parent-fn" "type-facer" "expand-symbol-before-p" "mouse-action-trigger" "is-click-valid-fn" "node-selected-fn" "node-expanded-fn" "node-collapsed-fn" "node-mouse-over-fn" "mouse-highlight-fn" "node-data-equal-fn" "after-update-hook" "maybe-empty-node-types" "leaf-node-types" "general-face" "incr-search-additional-pattern" "incr-search-p" "reduce-tree-for-incr-search-fn" "hor-scroll-step" "default-images-dir" "additional-images-dir" "image-file-prefix" "style" "ascii-guide-face")
                :type "struct")
                nil [29844 31142])
            ("tree-buffer-spec-new" function (:arguments ("tree-indent" "menu-creator" "menu-titles" "modeline-menu-creator" "sticky-parent-p" "sticky-indent-string" "sticky-parent-fn" "type-facer" "expand-symbol-before-p" "mouse-action-trigger" "is-click-valid-fn" "node-selected-fn" "node-expanded-fn" "node-collapsed-fn" "node-mouse-over-fn" "mouse-highlight-fn" "node-data-equal-fn" "after-update-hook" "maybe-empty-node-types" "leaf-node-types" "general-face" "incr-search-additional-pattern" "incr-search-p" "reduce-tree-for-incr-search-fn" "hor-scroll-step" "default-images-dir" "additional-images-dir" "image-file-prefix" "style" "ascii-guide-face")) nil [31144 36286])
            ("tree-buffer-incr-searchpattern-expand-prefix" variable
               (:constant-flag t
                :default-value "\\(\\[[^][]+\\] ?\\)?\\[?")
                nil [36329 36488])
            ("tree-buffer-incr-searchpattern" variable nil nil [36490 36646])
            ("tree-buffer-last-incr-searchpattern" variable nil nil [36648 36875])
            ("tree-buffer-incr-searchpattern-indent-prefix" variable nil nil [37138 37538])
            ("tree-buffer-data-store" variable nil nil [37615 37812])
            ("tree-buffer-set-data-store" function (:arguments ("data")) nil [37814 37937])
            ("tree-buffer-get-data-store" function nil nil [37939 38062])
            ("tree-buffer-local-image-cache" variable nil nil [38139 38293])
            ("tree-buffer-images-can-be-used" variable nil nil [38295 38376])
            ("tree-buffer-images-can-be-used-init-p" variable nil nil [38377 38465])
            ("tree-buffer-images-can-be-used" function nil nil [38467 38952])
            ("tree-buffer-image-properties-emacs" variable (:default-value (quote (:ascent center :mask (heuristic t)))) nil [38954 39073])
            ("tree-buffer-image-properties-xemacs" variable nil nil [39075 39158])
            ("tree-buffer-enable-xemacs-image-bug-hack" variable (:default-value tree-buffer-running-xemacs) nil [39160 39407])
            ("tree-buffer-image-formats" variable
               (:constant-flag t
                :default-value (quote ((xpm ".xpm") (png ".png") (gif ".gif") (jpeg ".jpg" ".jpeg") (xbm ".xbm"))))
                nil [39409 39528])
            ("tree-buffer-expand-symbol-length" variable
               (:constant-flag t
                :default-value 3)
                nil [39530 39575])
            ("tree-buffer-indent-with-images" variable
               (:constant-flag t
                :default-value 3)
                nil [39576 39619])
            ("tree-buffer-indent-w/o-images-before-min" variable
               (:constant-flag t
                :default-value 3)
                nil [39620 39673])
            ("tree-buffer-indent-w/o-images-after-min" variable
               (:constant-flag t
                :default-value 2)
                nil [39674 39726])
            ("tree-buffer-tree-image-names" variable
               (:constant-flag t
                :default-value (quote (("open" (after . "[-]") (before . "[-]")) ("close" (after . "[+]") (before . "[+]")) ("empty" (after . "[x]") (before . "[x]")) ("leaf" (after . "*") (before . "*")) ("guide" (after . "|") (before . " |")) ("no-guide" (after . " ") (before . "  ")) ("end-guide" (after . "`") (before . " `")) ("handle" (after . "-") (before . "-")) ("no-handle" (after . " ") (before . " ")))))
                nil [39728 40571])
            ("if" code nil nil [40573 41433])
            ("tree-buffer-real-style" function (:arguments ("style")) nil [41435 42091])
            ("tree-buffer-ascii-symbol-4-image-name" function (:arguments ("name")) nil [42093 43384])
            ("tree-buffer-add-image-icon-maybe" function (:arguments ("start" "len" "str" "image-icon")) nil [43387 45232])
            ("tree-buffer-image-cache-get" function (:arguments ("tree-image-name")) nil [45234 45366])
            ("tree-buffer-image-cache-put" function (:arguments ("tree-image-name" "image")) nil [45368 45557])
            ("tree-buffer-find-image" function (:arguments ("tree-image-name")) nil [45559 48431])
            ("tree-buffers" variable nil nil [48509 48534])
            ("tree-buffer-syntax-table" variable nil nil [48536 48613])
            ("if" code nil nil [48615 49204])
            ("tree-buffer-get-node-name-start-column" function (:arguments ("node")) nil [49279 50294])
            ("tree-buffer-get-node-name-start-point" function (:arguments ("node")) nil [50302 50800])
            ("tree-buffer-get-node-name-end-point" function (:arguments ("node")) nil [50802 51135])
            ("tree-buffer-point-at-expand-symbol-p" function (:arguments ("node" "p")) nil [51137 52202])
            ("tree-buffer-point-at-node-name-p" function (:arguments ("node" "p")) nil [52204 52570])
            ("tree-buffer-get-node-at-point" function (:arguments ("p")) nil [52572 52808])
            ("tree-buffer-select" function (:arguments ("mouse-button" "additional-key-list")) nil [52810 56840])
            ("tree-buffer-node-data-equal-p" function (:arguments ("node-data-1" "node-data-2")) nil [56843 57306])
            ("tree-buffer-get-node-facer" function (:arguments ("node")) nil [57308 57518])
            ("tree-buffer-pos-hor-visible-p" function (:arguments ("pos" "window")) nil [57520 57836])
            ("tree-buffer-get-event-column" function (:arguments ("e" "include-fringe-scrollbar")) nil [57838 58364])
            ("tree-buffer-hscroll" function (:arguments ("amount")) nil [58366 58500])
            ("tree-buffer-mouse-hscroll" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [58698 59338])
            ("tree-buffer-count-subnodes-to-display" function (:arguments ("node")) nil [59340 60212])
            ("tree-buffer-recenter" function (:arguments ("node" "window")) nil [60214 65931])
            ("tree-buffer-remove-highlight" function nil nil [65933 66168])
            ("tree-buffer-highlight-node-by-data/name" function (:arguments ("node-data" "node-name" "start-node" "dont-make-visible")) nil [66170 68419])
            ("tree-buffer-help-echo-fn" function (:arguments ("win" "obj" "pos")) nil [68421 68994])
            ("tree-buffer-merge-face-into-text" function (:arguments ("face" "start" "end" "text")) nil [68996 71464])
            ("tree-buffer-insert-text" function (:arguments ("text" "facer" "help-echo" "mouse-highlight")) nil [71466 72291])
            ("tree-buffer-node-display-name" function (:arguments ("node")) nil [72294 73715])
            ("tree-buffer-insert-node-display" function (:arguments ("node" "no-newline")) nil [73719 76279])
            ("tree-buffer-gen-guide-strings" function nil nil [76281 78552])
            ("tree-buffer-add-node" function (:arguments ("node" "indent-str-first-segs" "indent-str-last-seg" "last-children")) nil [78554 82986])
            ("tree-buffer-update-node" function (:arguments ("node" "name" "shrink-name" "type" "data" "expandable" "redisplay")) nil [82988 86276])
            ("tree-buffer-clear-tree" function nil nil [86278 86484])
            ("tree-buffer-remove-node" function (:arguments ("node" "redisplay" "empty-parent-types")) nil [86486 88498])
            ("tree-buffer-build-tree-buffer-display" function nil nil [88500 88916])
            ("tree-buffer-display-in-general-face" function nil nil [88918 89245])
            ("tree-buffer-empty-p" function nil nil [89408 89520])
            ("tree-buffer-run-after-update-hook" function nil nil [89522 89723])
            ("tree-buffer-update" function (:arguments ("node" "content")) nil [89725 91504])
            ("tree-buffer-scroll-window" function (:arguments ("point" "window-start")) nil [91507 91753])
            ("tree-buffer-expand-node" function (:arguments ("node" "level" "expand-pred-fn" "collapse-pred-fn")) nil [91755 94631])
            ("tree-buffer-expand-node-internal" function (:arguments ("node" "current-level" "level" "expand-pred-fn" "collapse-pred-fn")) nil [94633 96066])
            ("tree-buffer-set-root" function (:arguments ("root")) nil [96068 96363])
            ("tree-buffer-get-root" function nil nil [96365 96464])
            ("tree-buffer-gen-searchpattern-indent-prefix" function (:arguments ("count")) nil [96466 97064])
            ("tree-buffer-find-common-substring" function (:arguments ("lis" "subs" "only-prefix")) nil [97145 99029])
            ("tree-buffer-incremental-node-search" function (:user-visible-flag t) nil [99031 103223])
            ("tree-buffer-create-menu-emacs" function (:arguments ("menu-def" "menu-name")) nil [103225 104226])
            ("tree-buffer-create-menu-xemacs" function (:arguments ("menu-def" "node-commands-p")) nil [104229 105417])
            ("tree-buffer-create-menu" function (:arguments ("menu-items" "node-commands-p")) nil [105419 107262])
            ("tree-buffer-create-menus" function (:arguments ("menus" "node-commands-p")) nil [107265 107883])
            ("tree-buffer-show-node-menu-keyboard" function
               (:user-visible-flag t
                :arguments ("use-tmm"))
                nil [108141 109707])
            ("tree-buffer-popup-menu" function (:arguments ("event" "menu" "menu-title" "node")) nil [109709 111025])
            ("tree-buffer-show-node-menu" function (:arguments ("event")) nil [111027 112272])
            ("tree-buffer-show-modeline-menu" function (:arguments ("event")) nil [112274 112845])
            ("tree-buffer-defpopup-command" function (:arguments ("name" "docstring" "body")) nil [112847 115510])
            ("put" code nil nil [115512 115571])
            ("tree-buffer-follow-mouse" function (:arguments ("event")) nil [115638 116618])
            ("tree-buffer-activate-follow-mouse" function nil nil [116620 117226])
            ("tree-buffer-deactivate-follow-mouse" function nil nil [117228 117523])
            ("tree-buffer-tab-pressed" function (:user-visible-flag t) nil [117542 118479])
            ("tree-buffer-arrow-pressed" function (:user-visible-flag t) nil [118481 120211])
            ("tree-buffer-sticky-default-indent-string" function nil nil [120300 122263])
            ("tree-buffer-stickynode-header-line-format" variable
               (:constant-flag t
                :default-value (cond (tree-buffer-running-xemacs nil) ((>= emacs-major-version 21) (quote (:eval (list (tree-buffer-spec->sticky-indent-string tree-buffer-spec) (tree-buffer-stickynode-fetch-stickyline))))) (t nil)))
                nil [122266 122850])
            ("tree-buffer-goto-sticky-node" function nil nil [122852 123837])
            ("tree-buffer-stickynode-fetch-stickyline" function nil nil [123840 124906])
            ("tree-buffer-create-mouse-key" function (:arguments ("button" "trigger" "modifier" "key-qualifier")) nil [124934 126607])
            ("tree-buffer-create" function (:arguments ("name" "frame" "mouse-action-trigger" "is-click-valid-fn" "node-selected-fn" "node-expanded-fn" "node-collapsed-fn" "node-mouse-over-fn" "mouse-highlight-fn" "node-data-equal-fn" "maybe-empty-node-types" "leaf-node-types" "menu-creator" "menu-titles" "modeline-menu-creator" "sticky-parent-p" "sticky-indent-string" "sticky-parent-fn" "trunc-lines" "read-only" "tree-indent" "incr-search-p" "incr-search-additional-pattern" "reduce-tree-for-incr-search-fn" "arrow-navigation" "hor-scroll-step" "default-images-dir" "additional-images-dir" "image-file-prefix" "tree-style" "ascii-guide-face" "type-facer" "expand-symbol-before-p" "highlight-node-face" "general-face" "after-create-hook" "after-update-hook")) nil [126609 159981])
            ("tree-buffer-destroy" function (:arguments ("tree-buffer-name")) nil [159983 160412])
            ("tree-buffer-font-lock-keywords" variable
               (:constant-flag t
                :default-value (eval-when-compile (let* ((vf (quote ("tree-buffer-defpopup-command"))) (kf (if vf (regexp-opt vf t) "")) (kf-depth (if kf (regexp-opt-depth kf) nil)) (full (concat "(\\(" kf "\\)" "\\>[ 	]*\\(\\sw+\\)?"))) (\` (((\, full) (1 font-lock-keyword-face) ((\, (+ 1 kf-depth 1)) font-lock-function-name-face nil t)))))))
                nil [160433 161136])
            ("when" code nil nil [161138 161282])
            ("silentcomp-provide" code nil nil [161285 161318]))          
    :file "tree-buffer.el"
    :pointmax 161349
    :fsize 161348
    :lastmodtime '(20457 7014)
    :unmatched-syntax '((close-paren 1643 . 1644) (symbol 1581 . 1598) (open-paren 1580 . 1581) (close-paren 1577 . 1578) (symbol 1536 . 1553) (open-paren 1535 . 1536))
    )
   (semanticdb-table "ecb-file-browser.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("ecb-util" include nil nil [1273 1292])
            ("tree-buffer" include nil nil [1293 1315])
            ("ecb-mode-line" include nil nil [1316 1340])
            ("ecb-navigate" include nil nil [1341 1364])
            ("ecb-face" include nil nil [1365 1384])
            ("ecb-speedbar" include nil nil [1385 1408])
            ("ecb-layout" include nil nil [1409 1430])
            ("ecb-common-browser" include nil nil [1431 1460])
            ("assoc" include nil nil [1479 1495])
            ("cl" include nil nil [1547 1560])
            ("silentcomp" include nil nil [1584 1605])
            ("silentcomp-defun" code nil nil [1608 1655])
            ("silentcomp-defun" code nil nil [1656 1691])
            ("silentcomp-defun" code nil nil [1738 1780])
            ("silentcomp-defun" code nil nil [1781 1812])
            ("silentcomp-defun" code nil nil [1813 1850])
            ("silentcomp-defun" code nil nil [1851 1878])
            ("silentcomp-defvar" code nil nil [1879 1914])
            ("ecb-directories" customgroup (:user-visible-flag t) nil [2045 2173])
            ("ecb-sources" customgroup (:user-visible-flag t) nil [2175 2296])
            ("ecb-history" customgroup (:user-visible-flag t) nil [2298 2418])
            ("ecb-version-control" customgroup (:user-visible-flag t) nil [2420 2542])
            ("ecb-source-path" variable (:user-visible-flag t) nil [2544 3774])
            ("ecb-add-path-for-not-matching-files" variable
               (:user-visible-flag t
                :default-value (quote (t)))
                nil [3776 5250])
            ("ecb-source-path-functions" variable nil nil [5253 5547])
            ("ecb-display-default-dir-after-start" variable
               (:user-visible-flag t
                :default-value t)
                nil [5550 6476])
            ("ecb-show-sources-in-directories-buffer" variable
               (:user-visible-flag t
                :default-value (quote ("left7" "left13" "left14" "left15")))
                nil [6479 7343])
            ("ecb-directories-show-node-info" variable
               (:user-visible-flag t
                :default-value (quote (if-too-long . path)))
                nil [7346 8860])
            ("ecb-directories-update-speedbar" variable
               (:user-visible-flag t
                :default-value (quote auto))
                nil [8862 11117])
            ("ecb-show-sources-in-directories-buffer-p" function nil nil [11120 11501])
            ("ecb-cache-directory-contents" variable
               (:user-visible-flag t
                :default-value (quote (("^/\\([^:/]*@\\)?\\([^@:/]*\\):.*" . 0) (".*" . 50))))
                nil [11503 13887])
            ("ecb-cache-directory-contents-not" variable (:user-visible-flag t) nil [13890 15065])
            ("ecb-ping-program" variable (:default-value "ping") nil [15067 15352])
            ("ecb-ping-options" variable (:default-value (append (cond ((memq system-type (list (quote linux) (quote gnu/linux) (quote irix))) (list "-c" "2")) ((eq system-type (quote windows-nt)) (list "-n" "2"))) (list "HOST"))) nil [15354 16580])
            ("ecb-host-accessible-check-valid-time" variable nil nil [16582 17785])
            ("ecb-prescan-directories-for-emptyness" variable
               (:user-visible-flag t
                :default-value (quote unless-remote))
                nil [17787 19786])
            ("ecb-prescan-directories-exclude-regexps" variable (:user-visible-flag t) nil [19788 20170])
            ("ecb-directory-should-prescanned-p" function (:arguments ("dir")) nil [20172 20699])
            ("ecb-grep-function" variable
               (:user-visible-flag t
                :default-value (cond ((fboundp (quote lgrep)) (quote lgrep)) ((fboundp (quote igrep)) (quote igrep)) (t (quote grep))))
                nil [20701 22120])
            ("ecb-grep-recursive-function" variable
               (:user-visible-flag t
                :default-value (cond ((fboundp (quote rgrep)) (quote rgrep)) ((fboundp (quote igrep-find)) (quote igrep-find)) (t (quote grep-find))))
                nil [22122 22776])
            ("ecb-after-directory-change-hook" variable (:user-visible-flag t) nil [22778 23894])
            ("ecb-sources-perform-read-only-check" variable
               (:user-visible-flag t
                :default-value (quote unless-remote))
                nil [23896 24982])
            ("ecb-read-only-check-exclude-regexps" variable (:user-visible-flag t) nil [24984 25407])
            ("ecb-sources-read-only-check-p" function (:arguments ("dir")) nil [25409 25936])
            ("ecb-directories-buffer-name" variable
               (:user-visible-flag t
                :default-value " *ECB Directories*")
                nil [25938 26454])
            ("ecb-excluded-directories-regexps" variable
               (:user-visible-flag t
                :default-value (quote ("^\\(CVS\\|\\.[^xX]*\\)$")))
                nil [26457 26745])
            ("ecb-check-dir-exclude" function (:arguments ("dir")) nil [26747 26848])
            ("ecb-auto-expand-directory-tree" variable
               (:user-visible-flag t
                :default-value (quote best))
                nil [26850 27413])
            ("ecb-sources-buffer-name" variable
               (:user-visible-flag t
                :default-value " *ECB Sources*")
                nil [27416 27912])
            ("ecb-sources-show-node-info" variable
               (:user-visible-flag t
                :default-value (quote (if-too-long . name)))
                nil [27914 29182])
            ("ecb-sources-exclude-cvsignore" variable (:user-visible-flag t) nil [29184 29850])
            ("ecb-source-file-regexps" variable
               (:user-visible-flag t
                :default-value (quote ((".*" ("\\(^\\(\\.\\|#\\)\\|\\(~$\\|\\.\\(elc\\|obj\\|o\\|class\\|lib\\|dll\\|a\\|so\\|cache\\)$\\)\\)") ("^\\.\\(emacs\\|gnus\\)$")))))
                nil [29852 33126])
            ("ecb-show-source-file-extension" variable
               (:user-visible-flag t
                :default-value t)
                nil [33129 33258])
            ("ecb-sources-sort-method" variable
               (:user-visible-flag t
                :default-value (quote name))
                nil [33260 33857])
            ("ecb-sources-sort-ignore-case" variable
               (:user-visible-flag t
                :default-value t)
                nil [33859 34045])
            ("ecb-history-buffer-name" variable
               (:user-visible-flag t
                :default-value " *ECB History*")
                nil [34047 34543])
            ("ecb-history-exclude-file-regexps" variable
               (:user-visible-flag t
                :default-value (quote ("TAGS$" "semantic\\.cache$")))
                nil [34545 34913])
            ("ecb-check-filename-for-history-exclude" function (:arguments ("filename")) nil [34915 35043])
            ("ecb-history-show-node-info" variable
               (:user-visible-flag t
                :default-value (quote (always . name-path)))
                nil [35045 36258])
            ("ecb-history-make-buckets" variable
               (:user-visible-flag t
                :default-value (quote directory))
                nil [36260 37878])
            ("ecb-history-stick-indirect-buffers-to-basebuffer" variable
               (:user-visible-flag t
                :default-value t)
                nil [37880 38828])
            ("ecb-history-sort-method" variable
               (:user-visible-flag t
                :default-value (quote name))
                nil [38830 39909])
            ("ecb-history-sort-ignore-case" variable
               (:user-visible-flag t
                :default-value t)
                nil [39911 40409])
            ("ecb-kill-buffer-clears-history" variable (:user-visible-flag t) nil [40411 41099])
            ("ecb-directories-menu-user-extension" variable
               (:user-visible-flag t
                :default-value (quote (("Version Control" (ecb-dir-popup-cvs-status "CVS Status") (ecb-dir-popup-cvs-examine "CVS Examine") (ecb-dir-popup-cvs-update "CVS Update")))))
                nil [41101 43447])
            ("ecb-directories-menu-user-extension-function" variable
               (:user-visible-flag t
                :default-value (quote ignore))
                nil [43449 44206])
            ("ecb-sources-menu-user-extension" variable
               (:user-visible-flag t
                :default-value (quote (("Version control" (ecb-file-popup-ediff-revision "Ediff against revision") ("---") (ecb-file-popup-vc-next-action "Check In/Out") (ecb-file-popup-vc-log "Revision history") (ecb-file-popup-vc-annotate "Annotate") (ecb-file-popup-vc-diff "Diff against last version") ("---") (ecb-file-popup-vc-refresh-file "Recompute state for file") (ecb-file-popup-vc-refresh-dir "Recompute state for whole dir")))))
                nil [44208 45387])
            ("ecb-sources-menu-user-extension-function" variable
               (:user-visible-flag t
                :default-value (quote ignore))
                nil [45389 46114])
            ("ecb-history-menu-user-extension" variable
               (:user-visible-flag t
                :default-value (quote (("Version control" (ecb-file-popup-ediff-revision "Ediff against revision") ("---") (ecb-file-popup-vc-next-action "Check In/Out") (ecb-file-popup-vc-log "Revision history") (ecb-file-popup-vc-annotate "Annotate") (ecb-file-popup-vc-diff "Diff against last version") ("---") (ecb-file-popup-vc-refresh-file "Recompute state for file") (ecb-file-popup-vc-refresh-all-files "Recompute state for whole history")))))
                nil [46116 47581])
            ("ecb-history-menu-user-extension-function" variable
               (:user-visible-flag t
                :default-value (quote ignore))
                nil [47583 48308])
            ("ecb-directories-menu-sorter" variable (:user-visible-flag t) nil [48310 49262])
            ("ecb-sources-menu-sorter" variable (:user-visible-flag t) nil [49265 49986])
            ("ecb-history-menu-sorter" variable (:user-visible-flag t) nil [49989 50710])
            ("ecb-directories-buffer-after-create-hook" variable (:user-visible-flag t) nil [50713 51250])
            ("ecb-sources-buffer-after-create-hook" variable (:user-visible-flag t) nil [51253 51684])
            ("ecb-history-buffer-after-create-hook" variable (:user-visible-flag t) nil [51687 52118])
            ("ecb-vc-needed-vc-package-available-p" variable (:default-value (if (locate-library "vc-svn") t nil)) nil [52120 52360])
            ("ecb-vc-enable-support" variable
               (:user-visible-flag t
                :default-value (and ecb-vc-needed-vc-package-available-p (quote unless-remote)))
                nil [52362 53836])
            ("ecb-vc-directory-exclude-regexps" variable (:user-visible-flag t) nil [53838 54228])
            ("ecb-vc-directory-should-be-checked-p" function (:arguments ("dir")) nil [54230 54757])
            ("ecb-vc-state-mapping" variable
               (:user-visible-flag t
                :default-value (quote ((up-to-date . up-to-date) (edited . edited) (locally-modified . edited) (needs-patch . needs-patch) (needs-checkout . needs-patch) (needs-merge . needs-merge) (unlocked-changes . unlocked-changes) (added . added) (locally-added . added) (ignored . ignored) (unknown . unknown))))
                nil [54759 59580])
            ("ecb-vc-supported-backends" variable
               (:user-visible-flag t
                :default-value (quote ((ecb-vc-dir-managed-by-CVS . ecb-vc-state) (ecb-vc-dir-managed-by-RCS . ecb-vc-state) (ecb-vc-dir-managed-by-SCCS . ecb-vc-state) (ecb-vc-dir-managed-by-SVN . ecb-vc-state) (ecb-vc-dir-managed-by-GIT . ecb-vc-state) (ecb-vc-dir-managed-by-MTN . ecb-vc-state))))
                nil [60313 65037])
            ("ecb-directories-nodetype-directory" variable
               (:constant-flag t
                :default-value 100)
                nil [65230 65279])
            ("ecb-directories-nodetype-sourcefile" variable
               (:constant-flag t
                :default-value 200)
                nil [65280 65330])
            ("ecb-directories-nodetype-sourcepath" variable
               (:constant-flag t
                :default-value 300)
                nil [65331 65381])
            ("ecb-sources-nodetype-sourcefile" variable
               (:constant-flag t
                :default-value 400)
                nil [65382 65428])
            ("ecb-history-nodetype-bucket" variable
               (:constant-flag t
                :default-value 500)
                nil [65429 65471])
            ("ecb-history-nodetype-filebuffer" variable
               (:constant-flag t
                :default-value 600)
                nil [65472 65518])
            ("ecb-history-nodetype-indirect-filebuffer" variable
               (:constant-flag t
                :default-value 700)
                nil [65519 65574])
            ("ecb-files-and-subdirs-cache-add" function (:arguments ("dir" "cached-value")) nil [65623 65846])
            ("ecb-files-and-subdirs-cache-get" function (:arguments ("dir")) nil [65848 66037])
            ("ecb-files-and-subdirs-cache-remove" function (:arguments ("dir")) nil [66039 66192])
            ("ecb-files-and-subdirs-cache-clear" function nil nil [66194 66356])
            ("ecb-files-and-subdirs-cache-dump" function
               (:user-visible-flag t
                :arguments ("no-nil-value"))
                nil [66358 66776])
            ("ecb-directory-empty-cache-add" function (:arguments ("dir" "cached-value")) nil [66820 67041])
            ("ecb-directory-empty-cache-get" function (:arguments ("dir")) nil [67043 67211])
            ("ecb-directory-empty-cache-remove" function (:arguments ("dir")) nil [67213 67370])
            ("ecb-directory-empty-cache-remove-all" function (:arguments ("dir")) nil [67372 68311])
            ("ecb-directory-empty-cache-clear" function nil nil [68313 68461])
            ("ecb-directory-empty-cache-dump" function
               (:user-visible-flag t
                :arguments ("no-nil-value"))
                nil [68463 68816])
            ("ecb-sources-cache-remove" function (:arguments ("dir")) nil [68855 69008])
            ("ecb-sources-cache-add-full" function (:arguments ("dir" "cache-elem-full")) nil [69010 69598])
            ("ecb-sources-cache-add-filtered" function (:arguments ("dir" "cache-elem-filtered")) nil [69600 70224])
            ("ecb-sources-cache-get-full" function (:arguments ("dir")) nil [70226 70546])
            ("ecb-sources-cache-get-filtered" function (:arguments ("dir")) nil [70548 70891])
            ("ecb-sources-cache-clear" function nil nil [70893 71025])
            ("ecb-sources-cache-dump" function
               (:user-visible-flag t
                :arguments ("no-nil-value"))
                nil [71027 71331])
            ("ecb-vc-cache-add-file" function (:arguments ("file" "state" "checked-buffer-names")) nil [71364 71655])
            ("ecb-vc-cache-add-dir" function (:arguments ("dir" "backend")) nil [71657 71774])
            ("ecb-vc-cache-get" function (:arguments ("file")) nil [71776 71865])
            ("ecb-vc-cache-remove" function (:arguments ("file")) nil [71867 71996])
            ("ecb-vc-cache-remove-files-of-dir" function (:arguments ("dir")) nil [71998 73108])
            ("ecb-vc-cache-clear" function nil nil [73111 73228])
            ("ecb-vc-cache-dump" function
               (:user-visible-flag t
                :arguments ("no-nil-value"))
                nil [73230 73519])
            ("ecb-remote-path-cache-add" function (:arguments ("path" "remote-path")) nil [73561 73788])
            ("ecb-remote-path-cache-get" function (:arguments ("path")) nil [73790 73962])
            ("ecb-remote-path-cache-dump" function
               (:user-visible-flag t
                :arguments ("no-nil-value"))
                nil [73964 74280])
            ("ecb-host-accessible-cache-add" function (:arguments ("host" "accessible-p")) nil [74326 74595])
            ("ecb-host-accessible-cache-get" function (:arguments ("host" "valid-time")) nil [74597 75135])
            ("ecb-host-accessible-cache-dump" function
               (:user-visible-flag t
                :arguments ("no-nil-value"))
                nil [75137 75465])
            ("ecb-file-browser-initialize-caches" function nil nil [75538 75694])
            ("ecb-file-browser-initialize" function (:arguments ("no-caches")) nil [75696 76036])
            ("ecb-goto-window-directories" function (:user-visible-flag t) nil [76040 76405])
            ("ecb-goto-window-sources" function (:user-visible-flag t) nil [76407 76766])
            ("ecb-goto-window-history" function (:user-visible-flag t) nil [76768 76918])
            ("ecb-maximize-window-directories" function (:user-visible-flag t) nil [76920 77380])
            ("ecb-maximize-window-sources" function (:user-visible-flag t) nil [77382 77829])
            ("ecb-maximize-window-history" function (:user-visible-flag t) nil [77831 78172])
            ("defecb-window-dedicator" code nil nil [78174 79261])
            ("defecb-window-dedicator" code nil nil [79263 80312])
            ("defecb-window-dedicator" code nil nil [80314 80507])
            ("defecb-autocontrol/sync-function" code nil nil [80509 86192])
            ("ecb-expand-directory-tree" function (:arguments ("path" "node")) nil [86197 87383])
            ("ecb-check-directory-for-caching" function (:arguments ("dir" "number-of-contents")) nil [87386 88295])
            ("ecb-check-directory-for-source-regexps" function (:arguments ("dir")) nil [88298 88563])
            ("ecb-files-from-cvsignore" function (:arguments ("dir")) nil [88566 89117])
            ("ecb-check-directory-for-cvsignore-exclude" function (:arguments ("dir")) nil [89120 89314])
            ("ecb-get-sources-sort-function" function (:arguments ("sort-method" "ignore-case")) nil [89316 90093])
            ("ecb-get-files-and-subdirs" function (:arguments ("dir")) nil [90096 92273])
            ("ecb-update-sources-buffer" function (:arguments ("dir-before-update")) nil [92276 95152])
            ("ecb-sources-filter-by-ext" function (:arguments ("ext-str")) nil [95154 95496])
            ("tree-buffer-defpopup-command" code nil nil [95498 95802])
            ("ecb-sources-filter-by-regexp" function (:arguments ("regexp" "filter-display")) nil [95804 96326])
            ("tree-buffer-defpopup-command" code nil nil [96330 96471])
            ("tree-buffer-defpopup-command" code nil nil [96475 96627])
            ("ecb-sources-filter" function (:user-visible-flag t) nil [96632 97769])
            ("ecb-sources-filter-modeline-prefix" function (:arguments ("buffer-name" "sel-dir" "sel-source")) nil [97771 98242])
            ("ecb-apply-filter-to-sources-buffer" function (:arguments ("filter-regexp" "filter-display")) nil [98244 101635])
            ("ecb-matching-source-paths" function (:arguments ("path-to-match" "sorted")) nil [101637 102878])
            ("ecb-get-best-matching-source-path" function (:arguments ("path")) nil [102880 103022])
            ("ecb-set-selected-directory" function (:arguments ("path" "force")) nil [103024 108338])
            ("ecb-get-source-name" function (:arguments ("filename")) nil [108341 108559])
            ("ecb-select-source" function (:arguments ("force")) nil [108561 109369])
            ("ecb-history-filter" variable nil nil [109372 109739])
            ("ecb-reset-history-filter" function nil nil [109741 110021])
            ("ecb-history-filter-reset-p" function nil nil [110023 110094])
            ("ecb-reset-history-filter" code nil nil [110096 110122])
            ("ecb-indirect-buffers-of-buffer" function (:arguments ("buffer-or-name")) nil [110124 110735])
            ("ecb-history-kill-buffer-clear" function (:arguments ("curr-buf")) nil [111051 112591])
            ("ecb-add-all-buffers-to-history" function (:user-visible-flag t) nil [112593 113232])
            ("defalias" code nil nil [113234 113295])
            ("ecb-history-content-all-dead-buffers-alist" function nil nil [113297 113996])
            ("ecb-add-buffers-to-history-new" function (:arguments ("no-dead-buffers" "ignore-buffername-list")) nil [113998 131349])
            ("ecb-history-filter-modeline-prefix" function (:arguments ("buffer-name" "sel-dir" "sel-source")) nil [131439 131796])
            ("ecb-set-selected-source" function (:arguments ("source" "other-edit-window" "no-edit-buffer-selection")) nil [131799 133592])
            ("ecb-update-directory-node" function (:arguments ("node")) nil [133595 134796])
            ("defecb-tree-buffer-callback" code nil nil [134798 135024])
            ("ecb-get-source-paths-from-functions" function nil nil [135026 135426])
            ("ecb-update-directories-buffer" function (:user-visible-flag t) nil [135429 137311])
            ("ecb-host-accessible-valid-time" function (:arguments ("host")) nil [137454 137794])
            ("ecb-host-accessible-p" function (:arguments ("host")) nil [137914 138656])
            ("silentcomp-defun" code nil nil [138713 138749])
            ("silentcomp-defun" code nil nil [138750 138781])
            ("silentcomp-defun" code nil nil [138782 138819])
            ("silentcomp-defun" code nil nil [138820 138859])
            ("silentcomp-defun" code nil nil [138860 138904])
            ("silentcomp-defun" code nil nil [138905 138944])
            ("silentcomp-defun" code nil nil [138945 138987])
            ("ecb-remote-path" function (:arguments ("path")) nil [138988 141311])
            ("ecb-check-emptyness-of-dir" function (:arguments ("dir")) nil [141464 142740])
            ("defecb-stealthy" code nil nil [142743 145497])
            ("ecb-stealthy-read-only-check--internal" function (:arguments ("state")) nil [145520 148168])
            ("defecb-stealthy" code nil nil [148170 148649])
            ("defecb-stealthy" code nil nil [149187 149561])
            ("defecb-advice-set" code nil nil [149591 149684])
            ("ecb-vc-state-icon-alist" variable
               (:constant-flag t
                :default-value (quote ((up-to-date "vc-up-to-date" "(u)") (edited "vc-edited" "(e)") (added "vc-added" "(a)") (needs-patch "vc-needs-patch" "(p)") (needs-merge "vc-needs-merge" "(m)") (ignored "vc-ignored" "(x)") (unknown "vc-unknown" "(?)") (nil "vc-unknown" "(?)"))))
                nil [150534 151481])
            ("ecb-vc-get-image-name-for-vc-state" function (:arguments ("state")) nil [151483 151674])
            ("ecb-vc-get-ascii-icon-for-vc-state" function (:arguments ("state")) nil [151678 151863])
            ("ecb-vc-incr-searchpattern-node-prefix" variable
               (:constant-flag t
                :default-value (quote ("\\(\\(([uempx?])\\)? \\)?" . 2)))
                nil [151866 152227])
            ("ecb-vc-check-state" function (:arguments ("file" "tree-buffer-name" "vc-state-fcn")) nil [152230 156324])
            ("ecb-vc-update-sources-cache" function (:arguments ("dir")) nil [156326 157972])
            ("ecb-vc-dir-managed-by-CVS" function (:arguments ("directory")) nil [159318 159569])
            ("ecb-vc-dir-managed-by-RCS" function (:arguments ("directory")) nil [159571 159822])
            ("ecb-vc-dir-managed-by-SVN" function (:arguments ("directory")) nil [159824 160323])
            ("ecb-vc-dir-managed-by-SCCS" function (:arguments ("directory")) nil [160325 160764])
            ("ecb-vc-dir-managed-by-GIT" function (:arguments ("directory")) nil [160790 161367])
            ("ecb-vc-dir-managed-by-MTN" function (:arguments ("directory")) nil [161885 162327])
            ("silentcomp-defun" code nil nil [162618 162664])
            ("ecb-vc-dir-managed-by-CC" function (:arguments ("directory")) nil [162665 162888])
            ("silentcomp-defun" code nil nil [162890 162938])
            ("ecb-vc-check-CC-state" function (:arguments ("file")) nil [162939 163534])
            ("defecb-advice" code nil nil [163536 163982])
            ("ecb-vc-state" function (:arguments ("file")) nil [164048 164614])
            ("defalias" code nil nil [164616 164670])
            ("ecb-vc-get-state-fcn-for-dir" function (:arguments ("directory")) nil [164672 165890])
            ("defalias" code nil nil [165892 165954])
            ("ecb-vc-generate-node-name" function (:arguments ("name" "state")) nil [165956 167260])
            ("ecb-get-sourcename-of-nodename" function (:arguments ("nodename")) nil [167328 168141])
            ("ecb-stealthy-vc-check--dir/history" function (:arguments ("state")) nil [168143 171434])
            ("ecb-stealthy-vc-check--sources" function (:arguments ("state")) nil [171436 175470])
            ("defecb-stealthy" code nil nil [175472 175859])
            ("defecb-stealthy" code nil nil [175862 176254])
            ("defecb-stealthy" code nil nil [176256 176757])
            ("ecb-vc-reset-vc-stealthy-checks" function nil nil [176759 178101])
            ("ecb-checkedin-file" variable nil nil [179176 179549])
            ("defecb-advice" code nil nil [179551 179803])
            ("ecb-vc-checkin-hook" function nil nil [179805 180132])
            ("ecb-vc-after-revert-hook" function nil nil [180134 180469])
            ("ecb-vc-enable-internals" function (:arguments ("arg")) nil [180471 181080])
            ("ecb-stealth-tasks-after-directories-update" function nil nil [181262 181664])
            ("ecb-stealth-tasks-after-sources-update" function nil nil [181666 181985])
            ("ecb-stealth-tasks-after-history-update" function nil nil [181987 182231])
            ("ecb-tree-node-add-files" function (:arguments ("node" "path" "files" "type" "include-extension" "old-children" "not-expandable")) nil [182275 183885])
            ("ecb-new-child" function (:arguments ("old-children" "name" "type" "data" "not-expandable" "shrink-name")) nil [183887 184600])
            ("ecb-add-source-path" function
               (:user-visible-flag t
                :arguments ("dir" "alias" "no-prompt-for-future-session"))
                nil [184602 185707])
            ("tree-buffer-defpopup-command" code nil nil [185709 185851])
            ("tree-buffer-defpopup-command" code nil nil [185854 185993])
            ("ecb-delete-s" function (:arguments ("child" "children" "sources")) nil [185996 186186])
            ("tree-buffer-defpopup-command" code nil nil [186189 186810])
            ("ecb-remove-dir-from-caches" function (:arguments ("dir")) nil [186813 187032])
            ("ecb-directory-update-speedbar" function (:arguments ("dir")) nil [187034 187844])
            ("defecb-tree-buffer-callback" code nil nil [187846 190781])
            ("ecb-source-item-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode")) nil [190783 191712])
            ("defecb-tree-buffer-callback" code nil nil [191714 192027])
            ("defecb-tree-buffer-callback" code nil nil [192029 192607])
            ("ecb-expand-directory-nodes" function
               (:user-visible-flag t
                :arguments ("level"))
                nil [192609 193162])
            ("ecb-get-file-info-text" function (:arguments ("file")) nil [193165 193650])
            ("ecb-mouse-over-directory-node" function (:arguments ("node" "window" "no-message" "click-force")) nil [193653 195134])
            ("ecb-mouse-over-source-node" function (:arguments ("node" "window" "no-message" "click-force")) nil [195137 196055])
            ("ecb-mouse-over-history-node" function (:arguments ("node" "window" "no-message" "click-force")) nil [196058 197138])
            ("tree-buffer-defpopup-command" code nil nil [197168 198158])
            ("ecb-grep-directory-internal" function (:arguments ("node" "find")) nil [198161 199037])
            ("tree-buffer-defpopup-command" code nil nil [199040 199175])
            ("tree-buffer-defpopup-command" code nil nil [199178 199305])
            ("ecb-create-directory" function (:arguments ("parent-node")) nil [199308 199545])
            ("tree-buffer-defpopup-command" code nil nil [199548 199871])
            ("ecb-dired-directory-internal" function (:arguments ("node" "other")) nil [199874 200368])
            ("tree-buffer-defpopup-command" code nil nil [200371 200493])
            ("tree-buffer-defpopup-command" code nil nil [200496 200658])
            ("ecb-dir-run-cvs-op" function (:arguments ("node" "op" "op-arg-list")) nil [200661 200781])
            ("tree-buffer-defpopup-command" code nil nil [200784 200947])
            ("tree-buffer-defpopup-command" code nil nil [200950 201112])
            ("tree-buffer-defpopup-command" code nil nil [201115 201274])
            ("ecb-common-directories-menu" variable nil nil [201277 201317])
            ("setq" code nil nil [201320 201848])
            ("ecb-directories-menu" variable nil nil [201851 201995])
            ("setq" code nil nil [201996 202218])
            ("ecb-directories-menu-title-creator" variable (:default-value (function (lambda (node) (let ((node-type (tree-node->type node)) (node-name (tree-node->name node))) (cond ((= node-type ecb-directories-nodetype-directory) (format "%s  (Directory)" node-name)) ((= node-type ecb-directories-nodetype-sourcefile) (format "%s  (File)" node-name)) ((= node-type ecb-directories-nodetype-sourcepath) (format "%s  (Source-path)" node-name))))))) nil [202221 202975])
            ("tree-buffer-defpopup-command" code nil nil [202977 203216])
            ("tree-buffer-defpopup-command" code nil nil [203217 203364])
            ("tree-buffer-defpopup-command" code nil nil [203365 203512])
            ("tree-buffer-defpopup-command" code nil nil [203513 203660])
            ("tree-buffer-defpopup-command" code nil nil [203661 203808])
            ("tree-buffer-defpopup-command" code nil nil [203809 203956])
            ("tree-buffer-defpopup-command" code nil nil [203957 204104])
            ("tree-buffer-defpopup-command" code nil nil [204105 204252])
            ("ecb-dir/source/hist-menu-editwin-entries" function nil nil [204254 204957])
            ("ecb-directories-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [204960 206450])
            ("ecb-source-path-menu" variable nil nil [206475 206610])
            ("setq" code nil nil [206611 206827])
            ("tree-buffer-defpopup-command" code nil nil [206830 207668])
            ("tree-buffer-defpopup-command" code nil nil [207671 207868])
            ("tree-buffer-defpopup-command" code nil nil [207871 208042])
            ("tree-buffer-defpopup-command" code nil nil [208045 208220])
            ("tree-buffer-defpopup-command" code nil nil [208223 208384])
            ("tree-buffer-defpopup-command" code nil nil [208386 208571])
            ("tree-buffer-defpopup-command" code nil nil [208573 208811])
            ("tree-buffer-defpopup-command" code nil nil [208813 209152])
            ("ecb-sources-menu" variable nil nil [209154 209225])
            ("setq" code nil nil [209227 209921])
            ("ecb-sources-menu-title-creator" variable (:default-value (function (lambda (node) (ecb-file-name-nondirectory (tree-node->data node))))) nil [209924 210141])
            ("ecb-sources-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [210143 210960])
            ("tree-buffer-defpopup-command" code nil nil [210981 211467])
            ("ecb-history-filter-by-ext" function (:arguments ("ext-str")) nil [211469 212292])
            ("tree-buffer-defpopup-command" code nil nil [212294 212710])
            ("ecb-history-filter-by-regexp" function (:arguments ("regexp" "filter-display")) nil [212712 213573])
            ("tree-buffer-defpopup-command" code nil nil [213575 213720])
            ("tree-buffer-defpopup-command" code nil nil [213724 213901])
            ("tree-buffer-defpopup-command" code nil nil [213905 214391])
            ("tree-buffer-defpopup-command" code nil nil [214393 214647])
            ("tree-buffer-defpopup-command" code nil nil [214649 214895])
            ("tree-buffer-defpopup-command" code nil nil [214897 215156])
            ("tree-buffer-defpopup-command" code nil nil [215158 215437])
            ("tree-buffer-defpopup-command" code nil nil [215439 215709])
            ("ecb-history-filter" function (:user-visible-flag t) nil [215711 216594])
            ("ecb-history-common-menu" variable nil nil [216596 216674])
            ("setq" code nil nil [216675 217221])
            ("ecb-history-menu" variable nil nil [217232 217303])
            ("setq" code nil nil [217304 218000])
            ("ecb-history-menu-title-creator" variable (:default-value (function (lambda (node) (tree-node->name node)))) nil [218002 218190])
            ("ecb-history-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [218192 219546])
            ("defecb-tree-buffer-creator" code nil nil [219576 222995])
            ("defecb-tree-buffer-creator" code nil nil [222997 226070])
            ("defecb-tree-buffer-creator" code nil nil [226072 228728])
            ("silentcomp-provide" code nil nil [228730 228768]))          
    :file "ecb-file-browser.el"
    :pointmax 228804
    :fsize 228803
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 1605 . 1606) (symbol 1564 . 1581) (open-paren 1563 . 1564) (close-paren 1560 . 1561) (symbol 1498 . 1515) (open-paren 1497 . 1498))
    )
   (semanticdb-table "ecb-method-browser.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("tree-buffer" include nil nil [1283 1305])
            ("ecb-util" include nil nil [1306 1325])
            ("ecb-layout" include nil nil [1326 1347])
            ("ecb-mode-line" include nil nil [1348 1372])
            ("ecb-navigate" include nil nil [1373 1396])
            ("ecb-face" include nil nil [1397 1416])
            ("ecb-speedbar" include nil nil [1417 1440])
            ("ecb-common-browser" include nil nil [1441 1470])
            ("ecb-cedet-wrapper" include nil nil [1472 1500])
            ("semantic-load" include nil nil [1556 1580])
            ("assoc" include nil nil [1599 1615])
            ("cl" include nil nil [1667 1680])
            ("silentcomp" include nil nil [1704 1725])
            ("silentcomp-defun" code nil nil [1728 1760])
            ("silentcomp-defun" code nil nil [1761 1793])
            ("silentcomp-defun" code nil nil [1794 1826])
            ("silentcomp-defvar" code nil nil [1827 1860])
            ("silentcomp-defvar" code nil nil [1861 1902])
            ("silentcomp-defvar" code nil nil [1903 1941])
            ("silentcomp-defvar" code nil nil [1943 1991])
            ("silentcomp-defun" code nil nil [1993 2047])
            ("silentcomp-defun" code nil nil [2048 2095])
            ("ecb-selected-tag" variable nil nil [2097 2167])
            ("make-variable-buffer-local" code nil nil [2168 2214])
            ("ecb-methods-root-node" variable nil nil [2216 2289])
            ("ecb-methods-nodetype-tag" variable (:constant-flag t) nil [2291 2328])
            ("ecb-methods-nodetype-bucket" variable
               (:constant-flag t
                :default-value 1)
                nil [2329 2369])
            ("ecb-methods-nodetype-externtag" variable
               (:constant-flag t
                :default-value 2)
                nil [2370 2413])
            ("ecb-method-browser-initialize-caches" function nil nil [2415 2547])
            ("ecb-method-browser-initialize" function (:arguments ("no-caches")) nil [2549 2977])
            ("ecb-methods" customgroup (:user-visible-flag t) nil [3107 3227])
            ("ecb-non-semantic" customgroup (:user-visible-flag t) nil [3230 3352])
            ("ecb-methods-buffer-name" variable
               (:user-visible-flag t
                :default-value " *ECB Methods*")
                nil [3355 3851])
            ("ecb-auto-expand-tag-tree" variable
               (:user-visible-flag t
                :default-value (quote expand-spec))
                nil [3854 4835])
            ("ecb-auto-expand-tag-tree-collapse-other" variable (:user-visible-flag t) nil [4838 5787])
            ("ecb-expand-methods-switch-off-auto-expand" variable
               (:user-visible-flag t
                :default-value t)
                nil [5789 6539])
            ("ecb-auto-update-methods-after-save" variable
               (:user-visible-flag t
                :default-value t)
                nil [6541 6701])
            ("ecb-font-lock-tags" variable
               (:user-visible-flag t
                :default-value t)
                nil [6704 7115])
            ("ecb-font-lock-tags" function nil nil [7117 7282])
            ("ecb-tag-jump-sets-mark" variable
               (:user-visible-flag t
                :default-value t)
                nil [7284 7466])
            ("ecb-tag->text-functions" variable
               (:constant-flag t
                :default-value (mapcar (lambda (fkt-elem) (cons (intern (concat "ecb-" (mapconcat (quote identity) (cdr (split-string (symbol-name fkt-elem) "-")) "-"))) (intern (concat "ecb--" (symbol-name fkt-elem))))) ecb--semantic-format-function-list))
                nil [7468 7995])
            ("ecb-tag-display-function" variable
               (:user-visible-flag t
                :default-value (quote ((default . ecb-format-tag-uml-prototype))))
                nil [7997 11914])
            ("ecb-get-tag-display-function" function nil nil [11916 12255])
            ("ecb-type-tag-display" variable (:user-visible-flag t) nil [12260 17185])
            ("ecb-get-face-for-type-tag" function (:arguments ("type-specifier")) nil [17187 17625])
            ("ecb-get-remove-specifier-flag-for-type-tag" function (:arguments ("type-specifier")) nil [17628 18100])
            ("ecb-type-tag-expansion" variable
               (:user-visible-flag t
                :default-value (quote ((default "class" "interface" "group" "namespace") (c-mode "struct"))))
                nil [18102 21039])
            ("ecb-type-tag-expansion" function (:arguments ("type-specifier")) nil [21043 21610])
            ("ecb-get-type-specifier" function (:arguments ("tag")) nil [21612 21733])
            ("dolist" code nil nil [21738 26994])
            ("ecb-find-external-tag-functions" variable
               (:user-visible-flag t
                :default-value (list (cons (quote default) (list (if (fboundp (quote semantic-calculate-scope)) (quote ecb-search-tag-by-semantic-analyzer) (quote ecb-search-tag-by-semanticdb)))) (cons (quote jde-mode) (list (quote ecb-jde-show-class-source)))))
                nil [26996 31710])
            ("ecb-display-image-icons-for-semantic-tags" variable
               (:user-visible-flag t
                :default-value t)
                nil [31712 31993])
            ("ecb-use-images-for-semantic-tags" function nil nil [31995 32167])
            ("ecb-post-process-semantic-taglist" variable
               (:user-visible-flag t
                :default-value (quote ((c++-mode ecb-group-function-tags-with-parents) (emacs-lisp-mode ecb-group-function-tags-with-parents) (c-mode ecb-filter-c-prototype-tags))))
                nil [32169 33612])
            ("ecb-default-tag-filter" variable (:user-visible-flag t) nil [33614 35595])
            ("ecb-show-only-positioned-tags" variable (:user-visible-flag t) nil [35600 36287])
            ("ecb-force-reparse-when-semantic-idle-scheduler-off" variable (:user-visible-flag t) nil [36289 38281])
            ("ecb-show-tags" variable
               (:user-visible-flag t
                :default-value (quote ((default (include collapsed nil) (parent collapsed nil) (type flattened nil) (variable collapsed access) (function flattened access) (label hidden nil) (t collapsed nil)) (c++-mode (include collapsed nil) (parent collapsed nil) (type flattened nil) (variable collapsed access) (function flattened access) (function collapsed access) (label hidden nil) (t collapsed nil)) (c-mode (include collapsed nil) (parent collapsed nil) (type flattened nil) (variable collapsed access) (function flattened access) (function collapsed access) (label hidden nil) (t collapsed nil)) (bovine-grammar-mode (keyword collapsed name) (token collapsed name) (nonterminal flattened name) (rule flattened name) (t collapsed nil)) (wisent-grammar-mode (keyword collapsed name) (token collapsed name) (nonterminal flattened name) (rule flattened name) (t collapsed nil)) (texinfo-mode (section flattened nil) (def collapsed name) (t collapsed nil)))))
                nil [38283 43362])
            ("ecb-get-show-tags-list" function nil nil [43364 43712])
            ("ecb-methods-separate-prototypes" variable
               (:user-visible-flag t
                :default-value t)
                nil [43714 44636])
            ("ecb-methods-filter-replace-existing" variable
               (:user-visible-flag t
                :default-value (quote never))
                nil [44638 45579])
            ("ecb-methods-nodes-expand-spec" variable
               (:user-visible-flag t
                :default-value (quote (type variable function section nonterminal keyword token)))
                nil [45581 46902])
            ("ecb-methods-nodes-collapse-spec" variable
               (:user-visible-flag t
                :default-value (quote all))
                nil [46905 47356])
            ("ecb-methods-show-node-info" variable
               (:user-visible-flag t
                :default-value (quote (if-too-long . name+type)))
                nil [47358 48523])
            ("ecb-exclude-parents-regexps" variable (:user-visible-flag t) nil [48526 49031])
            ("ecb-check-parent-for-exclude" function (:arguments ("parent-name")) nil [49033 49152])
            ("ecb-highlight-tag-with-point" variable
               (:user-visible-flag t
                :default-value (quote highlight-scroll))
                nil [49154 50012])
            ("ecb-highlight-tag-with-point-delay" variable
               (:user-visible-flag t
                :default-value 0.25)
                nil [50015 51186])
            ("ecb-method-overlay" variable (:default-value (ecb-make-overlay 1 1)) nil [51189 51297])
            ("ecb-overlay-put" code nil nil [51298 51360])
            ("ecb-tag-visit-post-actions" variable
               (:user-visible-flag t
                :default-value (quote ((default ecb-tag-visit-smart-tag-start ecb-tag-visit-highlight-tag-header) (java-mode ecb-tag-visit-goto-doc-start) (jde-mode ecb-tag-visit-goto-doc-start))))
                nil [51363 54226])
            ("ecb-tag-visit-function-member-p" function (:arguments ("fnc")) nil [54229 54415])
            ("ecb-methods-menu-user-extension" variable (:user-visible-flag t) nil [54417 55017])
            ("ecb-methods-menu-user-extension-function" variable
               (:user-visible-flag t
                :default-value (quote ignore))
                nil [55020 55838])
            ("ecb-methods-menu-sorter" variable (:user-visible-flag t) nil [55840 56561])
            ("ecb-methods-buffer-after-create-hook" variable (:user-visible-flag t) nil [58700 59131])
            ("ecb-process-non-semantic-files" variable
               (:user-visible-flag t
                :default-value (if (locate-library "speedbar") t))
                nil [59134 59469])
            ("ecb-non-semantic-parsing-function" variable (:user-visible-flag t) nil [59472 61132])
            ("ecb-non-semantic-methods-initial-expand" variable (:user-visible-flag t) nil [61135 61573])
            ("ecb-auto-save-before-etags-methods-rebuild" variable
               (:user-visible-flag t
                :default-value t)
                nil [61576 62580])
            ("ecb-non-semantic-exclude-modes" variable
               (:user-visible-flag t
                :default-value (quote (sh-mode fundamental-mode text-mode)))
                nil [62583 63463])
            ("ecb-rebuild-non-semantic-methods-before-hook" variable (:user-visible-flag t) nil [63466 64171])
            ("ecb-enter-debugger" function (:arguments ("error-args")) nil [64399 64633])
            ("ecb-semantic-assert-valid-tag" function (:arguments ("tag" "no-reparse")) nil [64866 68049])
            ("ecb-semantic-tag-buffer" function (:arguments ("tag")) nil [69542 69828])
            ("ecb-semantic-tag-start" function (:arguments ("tag")) nil [69830 70114])
            ("ecb-semantic-tag-end" function (:arguments ("tag")) nil [70117 70397])
            ("ecb-semantic-current-nonterminal" function nil nil [70659 71043])
            ("ecb-goto-window-methods" function (:user-visible-flag t) nil [71046 71405])
            ("ecb-maximize-window-methods" function (:user-visible-flag t) nil [71407 71854])
            ("defecb-window-dedicator" code nil nil [71856 72904])
            ("ecb-create-node" function (:arguments ("parent-node" "display" "name" "data" "type")) nil [72907 73241])
            ("ecb-get-tag-type-display" function (:arguments ("tag-type")) nil [73244 73528])
            ("ecb-get-tag-parent-names" function (:arguments ("parents")) nil [73531 74109])
            ("ecb-get-tag-parents" function (:arguments ("tag")) nil [74111 74414])
            ("ecb-get-tag-name" function (:arguments ("tag" "parent-tag")) nil [74461 74847])
            ("ecb-find-add-tag-bucket" function (:arguments ("node" "type" "display" "sort-method" "buckets" "parent-tag" "no-bucketize")) nil [74850 75590])
            ("ecb-forbid-tag-display" function (:arguments ("tag")) nil [75592 75683])
            ("ecb-allow-tag-display" function (:arguments ("tag")) nil [75687 75779])
            ("ecb-tag-forbidden-display-p" function (:arguments ("tag")) nil [75781 75875])
            ("ecb-show-at-least-one-tag-p" function (:arguments ("taglist")) nil [75877 76149])
            ("ecb-apply-user-filter-to-tags" function (:arguments ("taglist")) nil [76267 78437])
            ("ecb-tag-generate-node-name" function (:arguments ("text-name" "first-chars" "icon-name")) nil [78440 78852])
            ("ecb-add-tag-bucket" function (:arguments ("node" "bucket" "display" "sort-method" "parent-tag" "no-bucketize")) nil [78855 81149])
            ("ecb-tag-image-name-alias-alist" variable
               (:constant-flag t
                :default-value (quote ((abstract (static (struct (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (class (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (interface (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (enum (nil . "enum-unknown") (unknown . "enum-unknown") (private . "enum-private") (protected . "enum-protected") (public . "enum-public")) (constructor (nil . "abstract-constructor-unknown") (unknown . "abstract-constructor-unknown") (private . "abstract-constructor-private") (protected . "abstract-constructor-protected") (public . "abstract-constructor-public")) (function (nil . "abstract-function-unknown-static") (unknown . "abstract-function-unknown-static") (private . "abstract-function-private-static") (protected . "abstract-function-protected-static") (public . "abstract-function-public-static")) (variable (nil . "abstract-variable-unknown-static") (unknown . "abstract-variable-unknown-static") (private . "abstract-variable-private-static") (protected . "abstract-variable-protected-static") (public . "abstract-variable-public-static"))) (not-static (struct (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (class (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (interface (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (enum (nil . "enum-unknown") (unknown . "enum-unknown") (private . "enum-private") (protected . "enum-protected") (public . "enum-public")) (constructor (nil . "abstract-constructor-unknown") (unknown . "abstract-constructor-unknown") (private . "abstract-constructor-private") (protected . "abstract-constructor-protected") (public . "abstract-constructor-public")) (function (nil . "abstract-function-unknown") (unknown . "abstract-function-unknown") (private . "abstract-function-private") (protected . "abstract-function-protected") (public . "abstract-function-public")) (variable (nil . "abstract-variable-unknown") (unknown . "abstract-variable-unknown") (private . "abstract-variable-private") (protected . "abstract-variable-protected") (public . "abstract-variable-public")))) (not-abstract (static (struct (nil . "class-unknown") (unknown . "class-unknown") (private . "class-private") (protected . "class-protected") (public . "class-public")) (class (nil . "class-unknown") (unknown . "class-unknown") (private . "class-private") (protected . "class-protected") (public . "class-public")) (interface (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (enum (nil . "enum-unknown") (unknown . "enum-unknown") (private . "enum-private") (protected . "enum-protected") (public . "enum-public")) (constructor (nil . "constructor-unknown") (unknown . "constructor-unknown") (private . "constructor-private") (protected . "constructor-protected") (public . "constructor-public")) (function (nil . "function-unknown-static") (unknown . "function-unknown-static") (private . "function-private-static") (protected . "function-protected-static") (public . "function-public-static")) (variable (nil . "variable-unknown-static") (unknown . "variable-unknown-static") (private . "variable-private-static") (protected . "variable-protected-static") (public . "variable-public-static"))) (not-static (struct (nil . "class-unknown") (unknown . "class-unknown") (private . "class-private") (protected . "class-protected") (public . "class-public")) (class (nil . "class-unknown") (unknown . "class-unknown") (private . "class-private") (protected . "class-protected") (public . "class-public")) (interface (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (enum (nil . "enum-unknown") (unknown . "enum-unknown") (private . "enum-private") (protected . "enum-protected") (public . "enum-public")) (constructor (nil . "constructor-unknown") (unknown . "constructor-unknown") (private . "constructor-private") (protected . "constructor-protected") (public . "constructor-public")) (function (nil . "function-unknown") (unknown . "function-unknown") (private . "function-private") (protected . "function-protected") (public . "function-public")) (variable (nil . "variable-unknown") (unknown . "variable-unknown") (private . "variable-private") (protected . "variable-protected") (public . "variable-public")))))))
                nil [81153 93030])
            ("ecb-get-icon-for-tag" function (:arguments ("abstract-p" "static-p" "type" "protection")) nil [93033 93351])
            ("ecb-displayed-tag-name" function (:arguments ("tag" "parent-tag")) nil [93700 95304])
            ("ecb-children-tags" function (:arguments ("parent-tag")) nil [95306 96059])
            ("ecb-update-tag-node" function (:arguments ("tag" "node" "parent-tag" "no-bucketize")) nil [96086 96969])
            ("ecb-post-process-taglist" function (:arguments ("taglist")) nil [97032 97597])
            ("ecb-apply-tag-table-filters" function (:arguments ("taglist")) nil [97599 98020])
            ("ecb-methods-filter-perform-current-type" function (:arguments ("filter" "taglist")) nil [98023 100003])
            ("ecb-group-function-tags-with-parents" function (:arguments ("taglist")) nil [100005 100483])
            ("ecb-filter-c-prototype-tags" function (:arguments ("taglist")) nil [100485 101762])
            ("ecb-methods-user-filter-alist" variable nil nil [101826 102286])
            ("ecb-methods-filter-by-prot" function (:arguments ("inverse" "source-buffer" "prot")) nil [102289 102851])
            ("ecb-methods-filter-by-tag-class" function (:arguments ("inverse" "source-buffer" "tag-class")) nil [102853 104194])
            ("ecb-methods-filter-by-regexp" function (:arguments ("inverse" "source-buffer" "regexp")) nil [104336 104951])
            ("tree-buffer-defpopup-command" code nil nil [104953 105151])
            ("tree-buffer-defpopup-command" code nil nil [105153 105365])
            ("ecb-methods-filter-by-function" function (:arguments ("inverse" "source-buffer" "fcn-name")) nil [105367 106017])
            ("tree-buffer-defpopup-command" code nil nil [106019 106230])
            ("tree-buffer-defpopup-command" code nil nil [106232 106457])
            ("tree-buffer-defpopup-command" code nil nil [106459 106702])
            ("tree-buffer-defpopup-command" code nil nil [106704 106933])
            ("ecb-get-type-node-of-node" function (:arguments ("node")) nil [106936 107549])
            ("ecb-get-type-name-hierarchy-of-current-node" function nil nil [107552 108715])
            ("ecb-get-type-tag-of-tag" function (:arguments ("tag" "table" "always-parent-type")) nil [108718 111602])
            ("ecb-get-type-name-hierarchy-of-current-tag" function (:arguments ("tag")) nil [111605 112616])
            ("ecb-methods-filter-by-current-type" function (:arguments ("inverse" "source-buffer" "tag")) nil [112618 114767])
            ("tree-buffer-defpopup-command" code nil nil [114795 115098])
            ("ecb-get-source-buffer-for-tag-filter" function nil nil [115101 115643])
            ("ecb-methods-filter-inverse" function (:user-visible-flag t) nil [115647 115853])
            ("ecb-methods-filter-protection" function
               (:user-visible-flag t
                :arguments ("inverse"))
                nil [115855 116160])
            ("ecb-methods-filter-tagclass" function
               (:user-visible-flag t
                :arguments ("inverse"))
                nil [116162 116463])
            ("ecb-methods-filter-current-type" function (:user-visible-flag t) nil [116465 116689])
            ("ecb-methods-filter-regexp" function
               (:user-visible-flag t
                :arguments ("inverse"))
                nil [116691 116986])
            ("ecb-methods-filter-function" function
               (:user-visible-flag t
                :arguments ("inverse"))
                nil [116988 117289])
            ("ecb-methods-filter-nofilter" function (:user-visible-flag t) nil [117291 117485])
            ("ecb-methods-filter-delete-last" function (:user-visible-flag t) nil [117487 117698])
            ("ecb-methods-filter" function
               (:user-visible-flag t
                :arguments ("inverse"))
                nil [117700 121117])
            ("ecb-methods-filter-internal" function (:arguments ("inverse" "filter-type")) nil [121119 123076])
            ("ecb-methods-filter-apply" function (:arguments ("filtertype" "filter" "inverse" "filter-type-display" "filter-display" "source-buffer" "remove-last")) nil [123078 126700])
            ("ecb-methods-filter-modeline-prefix" function (:arguments ("buffer-name" "sel-dir" "sel-source")) nil [126713 128178])
            ("ecb-default-tag-filter-for-current-source" function nil nil [128180 128740])
            ("ecb-apply-default-tag-filter" function nil nil [128742 130708])
            ("ecb-find-file-hook" function nil nil [130710 130924])
            ("ecb-add-tags" function (:arguments ("node" "tags" "parent-tag" "no-bucketize")) nil [130965 131620])
            ("ecb-access-order" function (:arguments ("access")) nil [131623 131867])
            ("ecb-sort-tags" function (:arguments ("sort-method" "tags")) nil [131870 132365])
            ("ecb-add-tag-buckets" function (:arguments ("node" "parent-tag" "buckets" "no-bucketize")) nil [132368 135197])
            ("ecb-update-after-partial-reparse" function (:arguments ("updated-tags")) nil [135200 137525])
            ("ecb-semantic-active-for-file" function (:arguments ("filename")) nil [137528 137824])
            ("ecb-update-methods-after-saving" function nil nil [137827 138660])
            ("ecb-fetch-semantic-tags" function (:arguments ("full")) nil [138662 139535])
            ("ecb-method-buffer-needs-rebuild" variable (:default-value t) nil [139538 139727])
            ("ecb-method-buffer-rebuild-allowed-for-invisible-buffers" variable nil nil [139729 139944])
            ("ecb-update-methods-buffer--internal" function (:arguments ("scroll-to-top" "rebuild-non-semantic" "full-semantic" "invisible-sourcebuffer-allowed")) nil [139947 145524])
            ("ecb-tag-tree-cache" variable nil nil [145527 145810])
            ("setq" code nil nil [145811 145840])
            ("ecb-clear-tag-tree-cache" function (:arguments ("source-name")) nil [145842 146167])
            ("ecb-current-post-processed-tag-table" variable nil nil [146169 146431])
            ("make-variable-buffer-local" code nil nil [146432 146498])
            ("ecb-get-current-tag-table" function nil nil [146500 146837])
            ("ecb-set-current-tag-table" function (:arguments ("table")) nil [146839 147015])
            ("ecb-methods-get-data-store" function (:arguments ("key")) nil [147018 147250])
            ("ecb-rebuild-methods-buffer-with-tagcache" function (:arguments ("updated-cache" "no-update-semantic" "force-nil-cache" "non-semantic-rebuild")) nil [147255 160059])
            ("ecb-save-without-auto-update-methods" function nil nil [160061 160177])
            ("ecb-rebuild-methods-buffer-for-non-semantic" function nil nil [160180 162021])
            ("ecb-rebuild-methods-buffer-for-semantic" function (:arguments ("clear-cache")) nil [162024 162672])
            ("ecb-rebuild-methods-buffer" function
               (:user-visible-flag t
                :arguments ("clear-cache"))
                nil [162675 164974])
            ("ecb-rebuild-methods-buffer-fully" function (:arguments ("clear-cache")) nil [164976 165810])
            ("ecb-auto-expand-tag-tree-old" variable (:default-value (quote expand-spec)) nil [165812 165862])
            ("ecb-toggle-auto-expand-tag-tree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165864 167200])
            ("ecb-get-real-curr-tag" function nil nil [167425 168460])
            ("ecb-try-highlight-tag" function (:arguments ("highlight-tag" "curr-tag" "table")) nil [168463 174516])
            ("ecb-tag-sync-do-nothing" variable nil nil [174518 174625])
            ("defecb-autocontrol/sync-function" code nil nil [174772 179687])
            ("ecb-string-make-singular" function (:arguments ("string")) nil [179690 179843])
            ("ecb-methods-node-get-semantic-type" function (:arguments ("node")) nil [179846 180153])
            ("ecb-expand-methods-nodes" function
               (:user-visible-flag t
                :arguments ("force-all"))
                nil [180156 182785])
            ("ecb-expand-methods-node-internal" function (:arguments ("node" "level" "force-all" "resync-tag" "update-tree-buffer")) nil [182787 185690])
            ("ecb-normalize-expand-spec" function (:arguments ("spec")) nil [185694 185978])
            ("ecb-semantic-tag-external-class-default" function (:arguments ("tag")) nil [186114 186643])
            ("silentcomp-defvar" code nil nil [186684 186738])
            ("ecb-semanticdb-find-result-nth-with-file" function (:arguments ("result" "n")) nil [186740 187446])
            ("ecb-semanticdb-get-type-definition-list" function (:arguments ("external-tag")) nil [187448 189993])
            ("ecb-search-tag-by-semanticdb" function (:arguments ("external-tag")) nil [189995 191242])
            ("ecb-search-tag-by-semantic-analyzer" function (:arguments ("tag")) nil [191244 191946])
            ("ecb-next-tag-parent-node" function (:arguments ("node")) nil [191948 192301])
            ("defecb-tree-buffer-callback" code nil nil [192403 199521])
            ("ecb-tag-visit-smart-tag-start" function (:arguments ("tag")) nil [199524 200741])
            ("ecb-start-of-tag-doc" function (:arguments ("tag")) nil [200744 201297])
            ("ecb-tag-visit-display-doc-start" function (:arguments ("tag")) nil [201300 202472])
            ("defalias" code nil nil [202504 202577])
            ("ecb-unhighlight-hook-called" variable nil nil [202579 202772])
            ("ecb-unhighlight-tag-header" function nil nil [202775 203175])
            ("ecb-tag-visit-highlight-tag-header" function (:arguments ("tag")) nil [203178 203664])
            ("ecb-display-tag" function (:arguments ("source" "tag" "window" "no-tag-visit-post-actions" "additional-post-action-list")) nil [203667 207127])
            ("ecb-mouse-over-method-node" function (:arguments ("node" "window" "no-message" "click-force")) nil [207130 208273])
            ("ecb-call-tag-visit-function" function (:arguments ("tag" "fcn")) nil [208320 208989])
            ("ecb-tag-visit-narrow-tag" function (:arguments ("tag")) nil [208991 209483])
            ("ecb-tag-visit-recenter" function (:arguments ("tag")) nil [209486 209966])
            ("ecb-tag-visit-recenter-top" function (:arguments ("tag")) nil [209968 210427])
            ("tree-buffer-defpopup-command" code nil nil [210429 210723])
            ("tree-buffer-defpopup-command" code nil nil [210726 210873])
            ("if" code nil nil [210876 211127])
            ("ecb-methods-menu-activate-hs" function nil nil [211129 211582])
            ("tree-buffer-defpopup-command" code nil nil [211585 212273])
            ("tree-buffer-defpopup-command" code nil nil [212276 212829])
            ("tree-buffer-defpopup-command" code nil nil [212832 213010])
            ("tree-buffer-defpopup-command" code nil nil [213012 213210])
            ("tree-buffer-defpopup-command" code nil nil [213212 213383])
            ("tree-buffer-defpopup-command" code nil nil [213385 213594])
            ("tree-buffer-defpopup-command" code nil nil [213596 213767])
            ("tree-buffer-defpopup-command" code nil nil [213769 213978])
            ("tree-buffer-defpopup-command" code nil nil [213980 214151])
            ("tree-buffer-defpopup-command" code nil nil [214153 214362])
            ("tree-buffer-defpopup-command" code nil nil [214364 214561])
            ("tree-buffer-defpopup-command" code nil nil [214563 214791])
            ("ecb-common-methods-menu" variable nil nil [214794 214872])
            ("setq" code nil nil [214875 215771])
            ("ecb-methods-tag-menu" variable nil nil [215774 215807])
            ("setq" code nil nil [215808 216241])
            ("ecb-methods-menu-title-creator" variable (:default-value (function (lambda (node) (let ((data (tree-node->data node))) (if (and data (/= ecb-methods-nodetype-bucket (tree-node->type node))) (typecase data (ecb--semantic-tag (ecb--semantic-tag-name data)) (string data) (otherwise (tree-node->name node))) (tree-node->name node)))))) nil [216244 216811])
            ("dotimes" code nil nil [216813 217068])
            ("ecb-methods-menu-editwin-entries" function nil nil [217070 217760])
            ("ecb-methods-menu-tagfilter-entries" function nil nil [217763 224474])
            ("ecb-methods-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [224480 226209])
            ("ecb-methods-incr-searchpattern-node-prefix" variable
               (:constant-flag t
                :default-value (quote ("\\([-+#(]\\|[^-+#(][^ 
]+ \\)?" . 1)))
                nil [226211 226684])
            ("ecb-compare-methods-buffer-node-data" function (:arguments ("l" "r")) nil [227214 227568])
            ("ecb-methods-node-mouse-highlighted-p" function (:arguments ("node")) nil [227570 227977])
            ("defecb-tree-buffer-creator" code nil nil [227979 231641])
            ("ecb-dump-semantic-toplevel" function (:user-visible-flag t) nil [231644 232122])
            ("ecb-dump-semantic-tags-internal" function (:arguments ("table" "parent" "source-buffer" "indent")) nil [232124 233062])
            ("defecb-advice-set" code nil nil [233064 233171])
            ("defecb-advice" code nil nil [233173 233934])
            ("defecb-advice" code nil nil [233936 236477])
            ("ecb-disable-advices" code nil nil [236479 236531])
            ("silentcomp-provide" code nil nil [236533 236573]))          
    :file "ecb-method-browser.el"
    :pointmax 236611
    :fsize 236610
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 1725 . 1726) (symbol 1684 . 1701) (open-paren 1683 . 1684) (close-paren 1680 . 1681) (symbol 1618 . 1635) (open-paren 1617 . 1618))
    )
   (semanticdb-table "ecb-jde.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1574 1595])
            ("silentcomp-defun" code nil nil [1598 1638])
            ("silentcomp-defvar" code nil nil [1639 1701])
            ("silentcomp-defun" code nil nil [1702 1745])
            ("silentcomp-defun" code nil nil [1746 1797])
            ("silentcomp-defun" code nil nil [1798 1843])
            ("silentcomp-defun" code nil nil [1844 1892])
            ("silentcomp-defun" code nil nil [1893 1940])
            ("silentcomp-defun" code nil nil [1941 1980])
            ("silentcomp-defvar" code nil nil [1981 2015])
            ("ecb-util" include nil nil [2017 2036])
            ("ecb-layout" include nil nil [2037 2058])
            ("ecb-file-browser" include nil nil [2059 2086])
            ("ecb-method-browser" include nil nil [2087 2116])
            ("ecb-jde-integration" customgroup (:user-visible-flag t) nil [2119 2253])
            ("ecb-jde-set-directories-buffer-to-jde-sourcepath" variable (:user-visible-flag t) nil [2256 2534])
            ("ecb-jde-display-class-at-point" function (:user-visible-flag t) nil [2536 5266])
            ("ecb-jde-show-class-source" function (:arguments ("external-tag")) nil [5269 5695])
            ("ecb-jde-gen-class-buffer" function (:arguments ("dir" "filename")) nil [5697 6012])
            ("ecb-jde-get-source-path" function nil nil [6015 6095])
            ("ecb-jde-update-ecb-source-paths" function nil nil [6097 6513])
            ("when" code nil nil [6516 6942])
            ("silentcomp-provide" code nil nil [6944 6973]))          
    :file "ecb-jde.el"
    :pointmax 7000
    :fsize 6999
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 1595 . 1596) (symbol 1554 . 1571) (open-paren 1553 . 1554))
    )
   (semanticdb-table "ecb-layout.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [5773 5794])
            ("ecb-util" include nil nil [5797 5816])
            ("ecb-common-browser" include nil nil [5817 5846])
            ("ecb-speedbar" include nil nil [5847 5870])
            ("ecb-compilation" include nil nil [5871 5897])
            ("ecb-create-layout" include nil nil [5898 5926])
            ("silentcomp-defvar" code nil nil [5938 5978])
            ("silentcomp-defun" code nil nil [5979 6021])
            ("silentcomp-defvar" code nil nil [6022 6069])
            ("silentcomp-defvar" code nil nil [6070 6111])
            ("silentcomp-defvar" code nil nil [6112 6153])
            ("silentcomp-defun" code nil nil [6154 6205])
            ("silentcomp-defvar" code nil nil [6206 6238])
            ("silentcomp-defun" code nil nil [6239 6271])
            ("silentcomp-defun" code nil nil [6314 6354])
            ("silentcomp-defun" code nil nil [6355 6393])
            ("silentcomp-defun" code nil nil [6394 6435])
            ("silentcomp-defun" code nil nil [6436 6471])
            ("silentcomp-defun" code nil nil [6472 6505])
            ("silentcomp-defun" code nil nil [6506 6542])
            ("silentcomp-defun" code nil nil [6543 6580])
            ("silentcomp-defun" code nil nil [6581 6613])
            ("silentcomp-defun" code nil nil [6614 6654])
            ("silentcomp-defun" code nil nil [6655 6691])
            ("silentcomp-defun" code nil nil [6692 6729])
            ("silentcomp-defun" code nil nil [6730 6768])
            ("silentcomp-defun" code nil nil [6769 6801])
            ("silentcomp-defun" code nil nil [6802 6846])
            ("silentcomp-defun" code nil nil [6847 6884])
            ("silentcomp-defvar" code nil nil [6885 6930])
            ("silentcomp-defvar" code nil nil [6941 6976])
            ("silentcomp-defvar" code nil nil [7003 7040])
            ("silentcomp-defvar" code nil nil [7083 7126])
            ("silentcomp-defun" code nil nil [7127 7169])
            ("silentcomp-defun" code nil nil [7170 7212])
            ("silentcomp-defvar" code nil nil [7225 7263])
            ("cl" include nil nil [7315 7328])
            ("ecb-layouts-reload-needed" variable (:default-value t) nil [7331 7367])
            ("ecb-load-layouts" function nil nil [7368 7624])
            ("ecb-layout" customgroup (:user-visible-flag t) nil [7626 7744])
            ("ecb-compilation" customgroup (:user-visible-flag t) nil [7746 7858])
            ("ecb-layout-option-set-function" variable
               (:constant-flag t
                :default-value (function (lambda (symbol value) (set symbol value) (when (and (boundp (quote ecb-minor-mode)) ecb-minor-mode (frame-live-p ecb-frame)) (let ((curr-frame (selected-frame))) (unwind-protect (progn (select-frame ecb-frame) (ecb-redraw-layout-full)) (select-frame curr-frame)))))))
                nil [7861 8538])
            ("ecb-select-edit-window-on-redraw" variable (:user-visible-flag t) nil [8561 8705])
            ("ecb-new-ecb-frame" variable (:user-visible-flag t) nil [8707 8858])
            ("ecb-activate-before-new-frame-created-hook" variable (:user-visible-flag t) nil [8860 9103])
            ("ecb-last-selected-layout" variable nil nil [9105 9227])
            ("ecb-layout-name" variable
               (:user-visible-flag t
                :default-value "left8")
                nil [9229 10875])
            ("ecb-enable-temp-buffer-shrink-to-fit" function (:arguments ("arg")) nil [10877 12471])
            ("ecb-compile-window-height" variable (:user-visible-flag t) nil [12473 15987])
            ("ecb-compile-window-width" variable
               (:user-visible-flag t
                :default-value (quote frame))
                nil [15991 19089])
            ("ecb-change-layout-preserves-compwin-state" variable
               (:user-visible-flag t
                :default-value t)
                nil [19091 19417])
            ("ecb-compile-window-temporally-enlarge" variable
               (:user-visible-flag t
                :default-value (quote after-display))
                nil [19419 20885])
            ("ecb-maximize-ecb-window-after-selection" variable (:user-visible-flag t) nil [20887 21338])
            ("ecb-maximize-next-after-maximized-select" variable (:user-visible-flag t) nil [21340 23616])
            ("ecb-compile-window-prevent-shrink-below-height" variable
               (:user-visible-flag t
                :default-value t)
                nil [23984 24550])
            ("ecb-enlarged-compilation-window-max-height" variable
               (:user-visible-flag t
                :default-value (quote best))
                nil [24553 25779])
            ("ecb-scroll-other-window-scrolls-compile-window" variable (:user-visible-flag t) nil [25781 26077])
            ("ecb-ignore-special-display" variable
               (:user-visible-flag t
                :default-value (quote compile-window))
                nil [26079 26931])
            ("ecb-ignore-special-display" function nil nil [26933 27123])
            ("ecb-ignore-pop-up-frames" variable
               (:user-visible-flag t
                :default-value (quote compile-window))
                nil [27125 27780])
            ("ecb-ignore-pop-up-frames" function nil nil [27782 27966])
            ("ecb-ignore-display-buffer-function" variable
               (:user-visible-flag t
                :default-value (quote always))
                nil [27968 29097])
            ("ecb-ignore-display-buffer-function" function nil nil [29099 29313])
            ("ecb-split-edit-window-after-start" variable
               (:user-visible-flag t
                :default-value (quote before-deactivation))
                nil [29315 32060])
            ("ecb-windows-width" variable
               (:user-visible-flag t
                :default-value 0.33)
                nil [32062 32361])
            ("ecb-windows-height" variable
               (:user-visible-flag t
                :default-value 0.33)
                nil [32363 32651])
            ("ecb-fix-window-size" variable (:user-visible-flag t) nil [32654 35337])
            ("ecb-get-window-fix-type" function (:arguments ("layout-name")) nil [35339 35754])
            ("ecb-set-window-size-fixed" function (:arguments ("fix")) nil [35756 36355])
            ("ecb-do-with-unfixed-ecb-buffers" function (:arguments ("body")) nil [36358 36884])
            ("ecb-do-with-fixed-ecb-buffers" function (:arguments ("body")) nil [36886 37406])
            ("ecb-other-window-behavior" variable
               (:user-visible-flag t
                :default-value (quote smart))
                nil [37410 41383])
            ("ecb-advice-window-functions-signal-error" variable (:user-visible-flag t) nil [41386 42149])
            ("ecb-layout-always-operate-in-edit-window" variable
               (:user-visible-flag t
                :default-value (quote (switch-to-buffer)))
                nil [42151 43888])
            ("ecb-canonical-ecb-windows-list" function (:arguments ("winlist")) nil [43890 44955])
            ("ecb-canonical-edit-windows-list" function (:arguments ("winlist")) nil [44957 45983])
            ("ecb-layout-window-sizes" variable (:user-visible-flag t) nil [45985 48020])
            ("ecb-redraw-layout-quickly" variable nil nil [48022 48232])
            ("ecb-major-modes-show-or-hide" variable
               (:user-visible-flag t
                :default-value (cons nil nil))
                nil [48234 48992])
            ("ecb-toggle-layout-sequence" variable
               (:user-visible-flag t
                :default-value (quote ("left9" "left14")))
                nil [48994 50881])
            ("ecb-hide-ecb-windows-before-hook" variable (:user-visible-flag t) nil [50883 51491])
            ("ecb-hide-ecb-windows-after-hook" variable (:user-visible-flag t) nil [51493 52006])
            ("ecb-show-ecb-windows-before-hook" variable (:user-visible-flag t) nil [52008 52852])
            ("ecb-show-ecb-windows-after-hook" variable (:user-visible-flag t) nil [52854 53706])
            ("ecb-redraw-layout-after-hook" variable
               (:user-visible-flag t
                :default-value (quote (ecb-eshell-recenter)))
                nil [53708 53972])
            ("ecb-redraw-layout-before-hook" variable (:user-visible-flag t) nil [53974 54115])
            ("ecb-layout-debug-mode" variable (:user-visible-flag t) nil [54117 54909])
            ("ecb-frame" variable nil nil [54979 55181])
            ("ecb-edit-window" variable nil nil [55183 55333])
            ("ecb-last-edit-window-with-point" variable nil nil [55335 55459])
            ("ecb-last-source-buffer" variable nil nil [55461 55556])
            ("ecb-last-compile-buffer-in-compile-window" variable nil nil [55558 55682])
            ("ecb-compile-window" variable nil nil [55684 55756])
            ("ecb-compile-window-height-lines" variable nil nil [56214 56553])
            ("ecb-compile-window-was-selected-before-command" variable nil nil [56555 56700])
            ("ecb-layout-default-window-sizes" variable nil nil [56702 56887])
            ("ecb-windows-hidden" variable nil nil [56889 57025])
            ("ecb-special-ecb-buffers-of-current-layout" variable nil nil [57027 57136])
            ("ecb-ecb-buffer-name-selected-before-command" variable nil nil [57138 57343])
            ("ecb-layout-prevent-handle-ecb-window-selection" variable nil nil [57345 57478])
            ("ecb-last-major-mode" variable nil nil [57481 57513])
            ("defecb-autocontrol/sync-function" code nil nil [57515 60217])
            ("ecb-initialize-layout" function nil nil [60219 60976])
            ("ecb-layout-debug-error" function (:arguments ("args")) nil [60978 61296])
            ("ecb-compile-window-live-p" function (:arguments ("display-msg")) nil [61299 61784])
            ("ecb-get-compile-window-buffer" function nil nil [61786 62014])
            ("ecb-edit-window-live-p" function nil nil [62155 62238])
            ("ecb-window-live-p" function (:arguments ("buffer-name")) nil [62240 62422])
            ("defecb-advice-set" code nil nil [62504 62628])
            ("defecb-advice" code nil nil [62630 63328])
            ("compile" include nil nil [63330 63348])
            ("defecb-advice" code nil nil [64073 66880])
            ("defecb-advice" code nil nil [67044 67916])
            ("ecb-toggle-scroll-other-window-scrolls-compile" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [69442 70234])
            ("ecb-edit-window-splitted" function (:arguments ("edit-windows-list")) nil [70246 71217])
            ("ecb-temp-buffer-shrink-to-fit" variable nil nil [71219 71431])
            ("when-ecb-running-xemacs" code nil nil [71433 76310])
            ("when-ecb-running-emacs" code nil nil [76344 85217])
            ("ecb-display-buffer-xemacs" function
               (:user-visible-flag t
                :arguments ("buffer" "not-this-window-p" "override-frame" "shrink-to-fit"))
                nil [85889 103985])
            ("ecb-temp-buffer-show-function-emacs" function (:arguments ("buf")) nil [103987 106035])
            ("ecb-temp-buffer-show-function-old" variable nil nil [106037 106083])
            ("ecb-enable-own-temp-buffer-show-function" function (:arguments ("arg")) nil [106085 106705])
            ("ecb-with-original-basic-functions" function (:arguments ("body")) nil [106780 107231])
            ("defecb-advice-set" code nil nil [107233 107405])
            ("ecb-with-original-permanent-layout-functions" function (:arguments ("body")) nil [107407 107923])
            ("ecb-where-is-point" function (:arguments ("win-list")) nil [107925 110491])
            ("ecb-point-in-ecb-window-number" function (:arguments ("ecb-windows-list")) nil [110751 111510])
            ("ecb-point-in-edit-window-number" function (:arguments ("edit-windows-list")) nil [111513 112280])
            ("ecb-when-point-in-edit-window-ecb-windows-visible" function (:arguments ("body")) nil [112282 112562])
            ("ecb-get-edit-window-by-number" function (:arguments ("edit-win-nr" "edit-win-list")) nil [112565 112984])
            ("ecb-get-window-by-number" function (:arguments ("win-nr" "win-list")) nil [112986 113340])
            ("ecb-get-ecb-window-by-number" function (:arguments ("ecb-win-nr" "ecb-win-list")) nil [113342 113748])
            ("ecb-point-in-compile-window" function nil nil [113750 113979])
            ("ecb-point-in-ecb-tree-buffer" function nil nil [113981 114523])
            ("ecb-point-in-dedicated-special-buffer" function nil nil [114773 115291])
            ("ecb-buffer-is-dedicated-special-buffer-p" function (:arguments ("buffer-or-name")) nil [115303 115618])
            ("ecb-goto-ecb-window" function (:arguments ("ecb-buffer-name")) nil [115621 116901])
            ("ecb-goto-window-edit-last" function (:user-visible-flag t) nil [116903 117263])
            ("ecb-goto-window-edit1" function (:user-visible-flag t) nil [117265 117486])
            ("ecb-goto-window-edit2" function (:user-visible-flag t) nil [117488 117723])
            ("ecb-goto-window-edit-by-smart-selection" function
               (:user-visible-flag t
                :arguments ("use-immediate-completion"))
                nil [117725 119131])
            ("ecb-goto-window-ecb-by-smart-selection" function
               (:user-visible-flag t
                :arguments ("use-immediate-completion"))
                nil [119133 120589])
            ("ecb-goto-window-by-smart-selection--internal" function (:arguments ("win-list" "use-immediate-completion")) nil [120591 123996])
            ("ecb-goto-window-compilation" function (:user-visible-flag t) nil [123998 124293])
            ("ecb-select-ecb-frame" function (:user-visible-flag t) nil [124296 124572])
            ("ecb-select-edit-window" function (:arguments ("edit-window-number")) nil [124574 126024])
            ("defecb-autocontrol/sync-function" code nil nil [126292 127810])
            ("ecb-layout-prevent-handle-compile-window-selection" variable nil nil [127819 127882])
            ("ecb-last-edit-area-creators" variable nil nil [127883 127923])
            ("defecb-autocontrol/sync-function" code nil nil [127924 132259])
            ("ecb-check-for-special-buffer" function (:arguments ("buffer-or-name")) nil [132978 134460])
            ("ecb-check-for-same-window-buffer" function (:arguments ("buffer-or-name")) nil [134466 135597])
            ("if" code nil nil [135599 136240])
            ("ecb-layout-temporary-dedicated-windows" variable nil nil [136249 136539])
            ("when-ecb-running-emacs" code nil nil [136679 137919])
            ("defecb-advice" code nil nil [138543 151772])
            ("ecb-get-other-window-minibuf-active" function (:arguments ("win-list" "edit-win-list" "ecb-win-list" "comp-win" "minibuf-win" "point-loc" "nth-window")) nil [167580 168974])
            ("ecb-get-other-window-smart" function (:arguments ("win-list" "edit-win-list" "ecb-win-list" "comp-win" "minibuf-win" "point-loc" "nth-window")) nil [168980 171311])
            ("ecb-get-other-window" function (:arguments ("nth-window")) nil [171313 175097])
            ("defecb-advice" code nil nil [175262 175814])
            ("defecb-advice" code nil nil [175817 178373])
            ("ecb-edit-area-creators" variable nil nil [178375 178410])
            ("ecb-edit-area-creators-init" function nil nil [178412 178489])
            ("ecb-edit-area-creators-add" function (:arguments ("creator")) nil [178491 178617])
            ("ecb-restore-edit-area" function nil nil [178619 178834])
            ("ecb-edit-area-creators-number-of-edit-windows" function nil nil [178836 179358])
            ("defecb-advice" code nil nil [179391 181056])
            ("defecb-advice" code nil nil [181058 185027])
            ("defecb-advice" code nil nil [185029 186450])
            ("defecb-advice" code nil nil [186452 190364])
            ("defecb-advice" code nil nil [190381 191281])
            ("defecb-advice" code nil nil [191283 192035])
            ("defecb-advice" code nil nil [192037 193568])
            ("defecb-advice" code nil nil [193577 195311])
            ("defecb-advice" code nil nil [195313 197088])
            ("defecb-advice" code nil nil [197393 200341])
            ("defecb-advice" code nil nil [200343 201662])
            ("defecb-advice" code nil nil [201664 203056])
            ("defecb-advice" code nil nil [203058 204201])
            ("ecb-split-hor" function (:arguments ("amount" "dont-switch-window" "use-frame")) nil [204276 204847])
            ("ecb-split-hor-abs" function (:arguments ("amount" "dont-switch-window")) nil [204849 205017])
            ("ecb-split-ver" function (:arguments ("amount" "dont-switch-window" "use-frame")) nil [205019 205593])
            ("ecb-split-ver-abs" function (:arguments ("amount" "dont-switch-window")) nil [205595 205761])
            ("ecb-buffer-setfunction-registration" variable nil nil [205988 206893])
            ("ecb-dedicated-special-buffers" function nil nil [206895 207640])
            ("ecb-get-current-visible-ecb-buffers" function nil nil [207642 208044])
            ("ecb-buffer-is-visible-ecb-buffer-p" function (:arguments ("buffer-or-name")) nil [208046 208367])
            ("ecb-buffer-is-ecb-buffer-of-current-layout-p" function (:arguments ("buffer-or-name")) nil [208369 208813])
            ("ecb-buffer-is-the-only-visible-ecb-buffer-p" function (:arguments ("buffer-or-name")) nil [208815 209176])
            ("ecb-set-minor-mode-text" function nil nil [209178 209436])
            ("ecb-toggle-ecb-windows" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209753 211645])
            ("ecb-hide-ecb-windows" function (:user-visible-flag t) nil [211647 211771])
            ("ecb-show-ecb-windows" function (:user-visible-flag t) nil [211773 211883])
            ("ecb-current-maximized-ecb-buffer-name" variable nil nil [211886 212189])
            ("ecb-redraw-layout-preserving-compwin-state" function (:user-visible-flag t) nil [212191 212476])
            ("ecb-toggle-maximize-ecb-window-with-mouse" function (:user-visible-flag t) nil [212478 212641])
            ("ecb-toggle-maximize-ecb-window" function (:arguments ("ecb-buffer-name")) nil [212643 213362])
            ("ecb-undo-maximize-ecb-buffer" function (:arguments ("preserve-selected-window")) nil [213364 214218])
            ("ecb-maximized-tree-buffer-name" function nil nil [214220 214378])
            ("ecb-buffer-is-maximized-p" function (:arguments ("ecb-buffer-name")) nil [214380 214933])
            ("ecb-maximize-ecb-buffer" function (:arguments ("ecb-buffer-name" "preserve-selected-window")) nil [214935 216654])
            ("ecb-cycle-ecb-buffer-state" variable nil nil [216656 216978])
            ("ecb-cycle-maximized-ecb-buffers" function (:user-visible-flag t) nil [216980 218150])
            ("ecb-window-configuration-data" function nil nil [218153 220279])
            ("ecb-with-dedicated-window" function (:arguments ("body")) nil [220357 220784])
            ("defecb-window-dedicator" function (:arguments ("creator" "buffer-name" "docstring" "body")) nil [220786 221825])
            ("put" code nil nil [221827 221881])
            ("defecb-window-dedicator" code nil nil [221883 222062])
            ("defecb-window-dedicator" code nil nil [222064 222689])
            ("ecb-delete-window-ecb-windows-left" function (:arguments ("window" "edit-win-list")) nil [223166 223985])
            ("defalias" code nil nil [223987 224077])
            ("ecb-delete-window-ecb-windows-right" function (:arguments ("window" "edit-win-list")) nil [224116 224207])
            ("ecb-delete-window-ecb-windows-top" function (:arguments ("window" "edit-win-list")) nil [224239 224731])
            ("ecb-layout-types" variable
               (:constant-flag t
                :default-value (quote (left right top left-right)))
                nil [224734 224790])
            ("ecb-layout-type-p" function (:arguments ("type" "err")) nil [224792 224994])
            ("ecb-available-layouts" variable nil nil [224996 225287])
            ("ecb-available-layouts-of-type" function (:arguments ("type")) nil [225331 225847])
            ("ecb-available-layouts-member-p" function (:arguments ("layout-name")) nil [225849 226055])
            ("ecb-available-layouts-add" function (:arguments ("name" "type")) nil [226057 226452])
            ("ecb-available-layouts-remove" function (:arguments ("name")) nil [226454 226817])
            ("ecb-get-layout-type" function (:arguments ("name")) nil [226819 227002])
            ("ecb-layout-left-p" function (:arguments ("name")) nil [227004 227158])
            ("ecb-layout-leftright-p" function (:arguments ("name")) nil [227160 227331])
            ("ecb-layout-right-p" function (:arguments ("name")) nil [227333 227490])
            ("ecb-layout-top-p" function (:arguments ("name")) nil [227492 227643])
            ("ecb-layout-define" function (:arguments ("name" "type" "doc" "create-code")) nil [227684 233946])
            ("put" code nil nil [234117 234165])
            ("ecb-layout-undefine" function (:arguments ("name")) nil [234167 234544])
            ("ecb-choose-layout-name" function (:arguments ("layout-list" "require-match")) nil [234547 235116])
            ("ecb-layout-switch" function (:arguments ("name")) nil [235118 235439])
            ("ecb-change-layout" function
               (:user-visible-flag t
                :arguments ("preselect-type"))
                nil [235444 236389])
            ("ecb-show-layout-help" function (:user-visible-flag t) nil [236391 236892])
            ("ecb-window-config-cache-size" variable (:default-value 200) nil [236987 237028])
            ("ecb-window-config-cache" variable nil nil [237029 237259])
            ("ecb-window-config-cache-add" function (:arguments ("ecb-window-config")) nil [237261 237628])
            ("ecb-window-config-cache-get" function (:arguments ("emacs-window-config")) nil [237630 238116])
            ("ecb-window-config-cache-get-latest" function nil nil [238118 238359])
            ("ecb-window-config-cache-init" function nil nil [238361 238640])
            ("ecb-window-config-cache-clear" function nil nil [238642 238740])
            ("ecb-window-configuration-invalidp" function (:arguments ("window-config")) nil [238778 239203])
            ("defecb-advice" code nil nil [239206 240898])
            ("defecb-advice" code nil nil [240901 242530])
            ("when-ecb-running-xemacs" code nil nil [242532 243439])
            ("ecb-current-window-configuration" function nil nil [243442 243619])
            ("ecb-set-window-configuration" function (:arguments ("ecb-window-config")) nil [243621 243894])
            ("ecb-save-window-excursion" function (:arguments ("body")) nil [243896 244280])
            ("ecb-redraw-layout" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [245496 248387])
            ("defecb-autocontrol/sync-function" code nil nil [248390 252022])
            ("ecb-draw-compile-window" function (:arguments ("height")) nil [252050 253269])
            ("ecb-redraw-layout-full" function (:arguments ("no-buffer-sync" "ecb-windows-creator" "window-configuration-data" "no-ecb-windows" "emergency")) nil [253383 267168])
            ("ecb-redraw-layout-quickly" function nil nil [267175 267558])
            ("ecb-toggle-layout-state" variable nil nil [267561 267656])
            ("ecb-toggle-layout" function
               (:user-visible-flag t
                :arguments ("last-one"))
                nil [267657 268865])
            ("ecb-store-window-sizes" function
               (:user-visible-flag t
                :arguments ("fix"))
                nil [268867 270749])
            ("ecb-restore-window-sizes" function (:user-visible-flag t) nil [270752 271055])
            ("ecb-restore-default-window-sizes" function (:user-visible-flag t) nil [271057 271405])
            ("ecb-get-window-size" function (:arguments ("window" "fix" "ref-size")) nil [271546 272571])
            ("ecb-get-ecb-window-sizes" function (:arguments ("fix" "ecb-win-list")) nil [272574 273603])
            ("ecb-set-window-size" function (:arguments ("window" "size" "ref-size")) nil [273730 275503])
            ("ecb-set-ecb-window-sizes" function (:arguments ("window-sizes")) nil [275505 276883])
            ("ecb-get-edit-area-size" function (:arguments ("win-list")) nil [277165 278357])
            ("ecb-compile-window-specified-height-config" variable nil nil [280085 280378])
            ("ecb-use-window-config-for-compwin-shrink" variable nil nil [280554 280607])
            ("ecb-store-compile-window-specified-height-config" function nil nil [280609 281249])
            ("ecb-reset-compile-window-specified-height-config" function nil nil [281428 282059])
            ("defalias" code nil nil [282091 282177])
            ("ecb-toggle-compile-window-height" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [282179 289041])
            ("ecb-set-compile-window-height" function nil nil [289685 290588])
            ("ecb-compile-window-state" function nil nil [290591 290984])
            ("ecb-toggle-compile-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290986 293473])
            ("silentcomp-provide" code nil nil [293476 293508]))          
    :file "ecb-layout.el"
    :pointmax 293696
    :fsize 293695
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 7328 . 7329) (symbol 7266 . 7283) (open-paren 7265 . 7266) (close-paren 5794 . 5795) (symbol 5753 . 5770) (open-paren 5752 . 5753))
    )
   (semanticdb-table "ecb-create-layout.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1431 1452])
            ("cl" include nil nil [1505 1518])
            ("ecb-mode-line" include nil nil [1521 1545])
            ("ecb-util" include nil nil [1546 1565])
            ("ecb-compilation" include nil nil [1566 1592])
            ("silentcomp-defvar" code nil nil [1610 1650])
            ("silentcomp-defvar" code nil nil [1651 1683])
            ("silentcomp-defvar" code nil nil [1704 1744])
            ("silentcomp-defvar" code nil nil [1745 1787])
            ("silentcomp-defvar" code nil nil [1788 1834])
            ("silentcomp-defvar" code nil nil [1872 1911])
            ("ecb-create-layout" customgroup (:user-visible-flag t) nil [1913 2040])
            ("ecb-create-layout-file" variable
               (:user-visible-flag t
                :default-value "~/.ecb-user-layouts.el")
                nil [2042 2218])
            ("ecb-create-layout-frame-width" variable
               (:user-visible-flag t
                :default-value 110)
                nil [2220 2357])
            ("ecb-create-layout-frame-height" variable
               (:user-visible-flag t
                :default-value 42)
                nil [2359 2497])
            ("ecb-create-layout-buf-prefix" variable
               (:constant-flag t
                :default-value " *ECB-LC-")
                nil [2530 2581])
            ("ecb-create-layout-frame-name" variable
               (:constant-flag t
                :default-value "Creation of a new ECB-layout")
                nil [2582 2652])
            ("ecb-create-layout-all-buf-types" variable
               (:constant-flag t
                :default-value (quote ("directories" "history" "methods" "sources" "speedbar" "analyse")))
                nil [2653 2765])
            ("ecb-create-layout-help-text-left-right" variable
               (:constant-flag t
                :default-value "
 ECB layout creation mode
 ========================

 This is the help-screen of this mode. The window
 displaying this help text is called the edit-window
 which is neither selectable nor delete-able nor
 split-able in this mode.

 <left/right/up/down-arrow>: Moving around in current
 window C-n, C-p: Go to next/previous window (beside
 the edit-window)

 C-s: Split current window. You will be asked:
      - If \"vertical\" or \"horizontal\" split
      - How to split: \"at-point\", \"half\" or
        \"other\" (i.e. you can specify any fraction
        between 0.1 and 0.9)
      - Which type the current window should be
        (see description of C-t below).
 C-u: Unsplit, ie. delete current window
 C-t: Give the current window a built-in type
      (\"directories\", \"sources\", \"methods\",
      \"history\" etc.) or any arbitrary user-defined
      type (\"other\"). See the Online-manual!

 C-c: Cancel layout creation. This does not save the
      layout. Deletes this frame.
 C-q: Save current defined layout and quit the layout
      creation. You will be asked for a layout-name.
      With TAB-completion you can get the names already
      in use. You have to choose a new name!
      Deletes this frame.

 There are NO other commands or keys available. ALL
 other keys are disabled in this mode!
")
                nil [2767 4146])
            ("ecb-create-layout-help-text-top" variable
               (:constant-flag t
                :default-value " ECB layout creation mode
 ========================

 This is the help-screen of this mode. The window displaying this help text is called
 the edit-window which is neither selectable nor delete-able nor split-able in this mode.

 <left/right/up/down-arrow>: Moving around in current window
 C-n, C-p: Go to next/previous window (beside the edit-window)

 C-s: Split current window. You will be asked:
      - If \"vertical\" or \"horizontal\" split
      - How to split: \"at-point\", \"half\" or \"other\" (i.e. you can specify any
        fraction between 0.1 and 0.9)
      - Which type the current window should be (see description of C-t below).
 C-u: Unsplit, ie. delete current window
 C-t: Give the current window a built-in type (\"directories\", \"sources\", \"methods\",
      \"history\" etc.) or any arbitrary user-defined type (\"other\").

 C-c: Cancel layout creation. This does not save the layout. Deletes this frame.
 C-q: Save current defined layout and quit the layout creation. You will be asked for a
      layout-name. With TAB-completion you can get the names already in use.
      You have to choose a new name! Deletes this frame.

 There are NO other commands or keys available. ALL other keys are disabled in this mode!
")
                nil [4148 5446])
            ("ecb-create-layout-file-header" variable
               (:constant-flag t
                :default-value "

;; Copyright (C) 2001 - 2005 Jesper Nordenberg
;; Copyright (C) 2001 - 2005 Free Software Foundation, Inc.
;; Copyright (C) 2001 - 2005 Klaus Berndl <klaus.berndl@sdm.de>

;; Author: Klaus Berndl <klaus.berndl@sdm.de>
;; Maintainer: Klaus Berndl <klaus.berndl@sdm.de>
;; Keywords: java, class, browser

;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the Free
;; Software Foundation; either version 2, or (at your option) any later
;; version.

;; This program is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;; FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
;; more details.

;; You should have received a copy of the GNU General Public License along
;; with GNU Emacs; see the file COPYING. If not, write to the Free Software
;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

;;; Commentary:

;; This file contains all user-defined ECB-layouts created by the command
;; `ecb-create-new-layout'.

;; !!! DO NOT EDIT THIS FILE MANUALLY - IT IS GENERATED BY ECB !!!

")
                nil [5448 6703])
            ("ecb-create-layout-frame" variable nil nil [6706 6742])
            ("ecb-create-layout-edit-window" variable nil nil [6743 6785])
            ("ecb-create-layout-old-global-map" variable nil nil [6787 6832])
            ("ecb-create-layout-old-minor-mode-map-alist" variable nil nil [6833 6888])
            ("ecb-create-layout-old-hscroll" variable nil nil [6889 6931])
            ("ecb-create-layout-old-debug-on-error" variable nil nil [6932 6981])
            ("ecb-create-layout-old-frame" variable nil nil [6982 7022])
            ("ecb-create-layout-old-vertical-div-map" variable nil nil [7023 7074])
            ("ecb-create-layout-old-modeline-map" variable nil nil [7075 7122])
            ("ecb-create-layout-old-after-frame-h" variable nil nil [7123 7171])
            ("ecb-create-layout-old-before-frame-h" variable nil nil [7172 7221])
            ("ecb-create-layout-generated-lisp" variable nil nil [7223 7268])
            ("ecb-create-layout-gen-counter" variable nil nil [7269 7309])
            ("ecb-create-layout-buf-types" variable nil nil [7311 7351])
            ("ecb-create-layout-type" variable (:default-value (quote left)) nil [7398 7435])
            ("ecb-create-layout-initilize" function nil nil [7437 8180])
            ("ecb-create-layout-frame-deleted" variable nil nil [8182 8226])
            ("delete-frame" function (:arguments ("before" "ecb-create-layout")) nil [8228 8654])
            ("delete-frame" function (:arguments ("after" "ecb-create-layout")) nil [8656 9004])
            ("ecb-create-layout-frame-ok" function nil nil [9009 9249])
            ("ecb-create-layout-cancel" function
               (:user-visible-flag t
                :arguments ("ignore"))
                nil [9251 9569])
            ("ecb-create-layout-clear-all" function (:arguments ("delete-frame")) nil [9571 11593])
            ("ecb-create-layout-save-and-quit" function
               (:user-visible-flag t
                :arguments ("ignore"))
                nil [11595 12334])
            ("ecb-create-layout-ready-for-save-p" function nil nil [12337 12722])
            ("ecb-create-layout-insert-line" function (:arguments ("line")) nil [12725 12876])
            ("ecb-create-layout-insert-file-header" function nil nil [12878 13093])
            ("ecb-create-layout-save-layout" function nil nil [13095 14974])
            ("ecb-create-layout-gen-lisp" function (:arguments ("lisp-statement")) nil [14976 15132])
            ("ecb-create-layout-split-ver" function (:arguments ("fraction")) nil [15134 15454])
            ("ecb-create-layout-split-hor" function (:arguments ("fraction")) nil [15456 15790])
            ("ecb-create-layout-add-to-buf-types" function (:arguments ("type")) nil [15792 16079])
            ("ecb-create-layout-remove-from-buf-type" function (:arguments ("type")) nil [16081 16269])
            ("ecb-create-layout-buffer-type" function nil nil [16271 16369])
            ("ecb-create-layout-buffer-factor" function nil nil [16371 16473])
            ("ecb-create-layout-set-buffer-type" function (:arguments ("type")) nil [16475 16661])
            ("ecb-create-layout-set-buffer-factor" function (:arguments ("factor")) nil [16663 16857])
            ("ecb-create-layout-gen-lisp-for-buffer-type" function (:arguments ("type")) nil [16860 17112])
            ("ecb-create-layout-set-buffer-to-type" function
               (:user-visible-flag t
                :arguments ("type"))
                nil [17117 18248])
            ("ecb-create-layout-select-edit-window" function nil nil [18250 18746])
            ("ecb-create-layout-split" function (:user-visible-flag t) nil [18748 20399])
            ("ecb-create-layout-forward-char" function (:user-visible-flag t) nil [20401 20841])
            ("ecb-create-layout-next-window" function (:user-visible-flag t) nil [20843 21472])
            ("ecb-create-layout-previous-window" function (:user-visible-flag t) nil [21474 22206])
            ("ecb-create-layout-delete-window" function (:user-visible-flag t) nil [22208 23808])
            ("ecb-create-layout-mode-map" variable nil nil [23810 23887])
            ("if" code nil nil [23889 26090])
            ("ecb-create-layout-new-buffer" function (:arguments ("do-not-fill")) nil [26093 26634])
            ("ecb-create-layout-mode" function nil nil [26638 27014])
            ("ecb-create-layout-init-layout" function (:arguments ("new")) nil [27016 28551])
            ("ecb-create-layout-make-frame" function nil nil [28554 30188])
            ("ecb-create-new-layout" function (:user-visible-flag t) nil [30363 32036])
            ("ecb-delete-new-layout" function (:user-visible-flag t) nil [32039 33929])
            ("ecb-create-layout-debug" function (:user-visible-flag t) nil [33931 34164])
            ("ad-disable-advice" code nil nil [34431 34490])
            ("ad-disable-advice" code nil nil [34491 34551])
            ("ad-activate" code nil nil [34552 34579])
            ("silentcomp-provide" code nil nil [34582 34621]))          
    :file "ecb-create-layout.el"
    :pointmax 34648
    :fsize 34647
    :lastmodtime '(20457 7011)
    :unmatched-syntax '((close-paren 1518 . 1519) (symbol 1456 . 1473) (open-paren 1455 . 1456) (close-paren 1452 . 1453) (symbol 1411 . 1428) (open-paren 1410 . 1411))
    )
   (semanticdb-table "ecb-mode-line.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1472 1493])
            ("ecb-util" include nil nil [1496 1515])
            ("ecb-face" include nil nil [1516 1535])
            ("silentcomp-defun" code nil nil [1547 1581])
            ("silentcomp-defun" code nil nil [1582 1612])
            ("silentcomp-defun" code nil nil [1613 1647])
            ("silentcomp-defun" code nil nil [1648 1686])
            ("silentcomp-defun" code nil nil [1696 1737])
            ("silentcomp-defun" code nil nil [1738 1767])
            ("ecb-mode-line" customgroup (:user-visible-flag t) nil [1769 1892])
            ("ecb-mode-line-prefixes" variable
               (:user-visible-flag t
                :default-value (quote ((ecb-directories-buffer-name) (ecb-sources-buffer-name . ecb-sources-filter-modeline-prefix) (ecb-methods-buffer-name . ecb-methods-filter-modeline-prefix) (ecb-history-buffer-name . ecb-history-filter-modeline-prefix))))
                nil [1955 4786])
            ("ecb-mode-line-display-window-number" variable
               (:user-visible-flag t
                :default-value t)
                nil [4792 5846])
            ("ecb-mode-line-data" variable
               (:user-visible-flag t
                :default-value (quote ((ecb-directories-buffer-name . sel-dir) (ecb-sources-buffer-name . sel-dir) (ecb-methods-buffer-name . sel-source) (ecb-analyse-buffer-name . sel-source) (ecb-history-buffer-name . "History"))))
                nil [5909 8914])
            ("ecb-mode-line-format" function nil nil [8917 13593])
            ("ecb-mode-line-make-modeline-str" function (:arguments ("str" "face")) nil [13596 14342])
            ("ecb-mode-line-set" function (:arguments ("buffer-name" "frame" "prefix" "text" "no-win-nr")) nil [14361 16589])
            ("ecb-mode-line-update-buffer" function (:arguments ("buffer-name" "new-mode-line-format")) nil [16592 16993])
            ("silentcomp-provide" code nil nil [16995 17030]))          
    :file "ecb-mode-line.el"
    :pointmax 17063
    :fsize 17062
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 1493 . 1494) (symbol 1452 . 1469) (open-paren 1451 . 1452))
    )
   (semanticdb-table "ecb-help.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1506 1527])
            ("ecb-layout" include nil nil [1530 1551])
            ("ecb-util" include nil nil [1552 1571])
            ("silentcomp-defvar" code nil nil [1598 1641])
            ("silentcomp-defun" code nil nil [1642 1671])
            ("silentcomp-defvar" code nil nil [1684 1730])
            ("silentcomp-defvar" code nil nil [1738 1769])
            ("silentcomp-defun" code nil nil [1791 1822])
            ("silentcomp-defun" code nil nil [1823 1851])
            ("silentcomp-defun" code nil nil [1852 1897])
            ("ecb-help-info-start-file" variable
               (:constant-flag t
                :default-value "ecb.info")
                nil [1899 1945])
            ("ecb-help-html-start-file" variable
               (:constant-flag t
                :default-value "ecb.html")
                nil [1946 1992])
            ("ecb-help-info-subdir" variable
               (:constant-flag t
                :default-value "./info-help/")
                nil [1993 2039])
            ("ecb-help-html-subdir" variable
               (:constant-flag t
                :default-value "./html-help/")
                nil [2040 2086])
            ("ecb-help" customgroup (:user-visible-flag t) nil [2088 2162])
            ("ecb-show-help-format" variable
               (:user-visible-flag t
                :default-value (quote info))
                nil [2164 2745])
            ("ecb-help-info-path" variable
               (:user-visible-flag t
                :default-value (concat (if ecb-running-xemacs (if (file-exists-p (concat ecb-ecb-dir ecb-help-info-subdir ecb-help-info-start-file)) ecb-help-info-subdir "../../info/") ecb-help-info-subdir) ecb-help-info-start-file))
                nil [2748 4002])
            ("ecb-help-html-path" variable
               (:user-visible-flag t
                :default-value (if (not ecb-running-xemacs) (concat ecb-help-html-subdir ecb-help-html-start-file) (cond ((file-exists-p (concat ecb-ecb-dir ecb-help-html-subdir ecb-help-html-start-file)) (concat ecb-help-html-subdir ecb-help-html-start-file)) ((file-exists-p (concat ecb-ecb-dir "../../html/" ecb-help-html-start-file)) (concat "../../html/" ecb-help-html-start-file)) ((file-exists-p (concat ecb-ecb-dir "../../html/ecb/index.html")) "../../html/ecb/index.html") (t (concat "../../etc/ecb/html/" ecb-help-html-start-file)))))
                nil [4004 5491])
            ("ecb-info" function (:arguments ("info-file" "no-file-not-exist-err")) nil [5494 5953])
            ("ecb-browse-html-file" function (:arguments ("html-file" "no-file-not-exist-err")) nil [5955 6858])
            ("ecb-show-help" function
               (:user-visible-flag t
                :arguments ("format"))
                nil [6875 9119])
            ("ecb-problem-report-mail-address" variable (:default-value "ecb-list@lists.sourceforge.net") nil [9176 9250])
            ("ecb-problem-report-message" variable
               (:constant-flag t
                :default-value "Please enter the details of your bug report here")
                nil [9252 9342])
            ("ecb-submit-problem-report" function (:user-visible-flag t) nil [9344 11712])
            ("ecb-problem-report-post-hook" function nil nil [11714 15834])
            ("ecb-problem-report-list-all-variables" function nil nil [15837 21214])
            ("silentcomp-provide" code nil nil [21217 21247]))          
    :file "ecb-help.el"
    :pointmax 21274
    :fsize 21273
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 1527 . 1528) (symbol 1486 . 1503) (open-paren 1485 . 1486))
    )
   (semanticdb-table "ecb-navigate.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1424 1445])
            ("eieio" include nil nil [1448 1464])
            ("ecb-util" include nil nil [1465 1484])
            ("ecb-dlist-node" type
               (:members 
                  ( ("previous" variable (:default-value "nil") nil nil)
                    ("next" variable (:default-value "nil") nil nil)
                    ("data" variable (:default-value "nil") nil nil))                  
                :type "class")
                nil [1603 1835])
            ("ecb-dlist-node-new" function (:arguments ("data")) nil [1837 1907])
            ("ecb-get-data" function
               (:parent "ecb-dlist-node"
                :arguments ("node"))
                nil [1909 1976])
            ("ecb-get-next" function
               (:parent "ecb-dlist-node"
                :arguments ("node"))
                nil [1978 2045])
            ("ecb-get-previous" function
               (:parent "ecb-dlist-node"
                :arguments ("node"))
                nil [2047 2122])
            ("ecb-set-data" function
               (:parent "ecb-dlist-node"
                :arguments ("node" "data"))
                nil [2124 2201])
            ("ecb-set-next" function
               (:parent "ecb-dlist-node"
                :arguments ("node" "next"))
                nil [2203 2460])
            ("ecb-set-previous" function
               (:parent "ecb-dlist-node"
                :arguments ("node" "previous"))
                nil [2462 2751])
            ("ecb-nav-history-item" type
               (:members 
                  ( ("pos" variable (:default-value "0") nil nil)
                    ("window-start" variable (:default-value "0") nil nil))                  
                :type "class")
                nil [2869 3045])
            ("ecb-nav-set-pos" function
               (:parent "ecb-nav-history-item"
                :arguments ("item" "pos"))
                nil [3049 3132])
            ("ecb-nav-set-window-start" function
               (:parent "ecb-nav-history-item"
                :arguments ("item" "point"))
                nil [3134 3239])
            ("ecb-nav-get-pos" function
               (:parent "ecb-nav-history-item"
                :arguments ("item"))
                nil [3241 3316])
            ("ecb-nav-get-window-start" function
               (:parent "ecb-nav-history-item"
                :arguments ("item"))
                nil [3318 3411])
            ("ecb-nav-to-string" function
               (:parent "ecb-nav-history-item"
                :arguments ("item"))
                nil [3413 3577])
            ("ecb-nav-save" function
               (:parent "ecb-nav-history-item"
                :arguments ("item"))
                nil [3667 3725])
            ("ecb-nav-is-valid" function
               (:parent "ecb-nav-history-item"
                :arguments ("item"))
                nil [3727 3789])
            ("ecb-nav-tag-history-item" type
               (:superclasses "ecb-nav-history-item"
                :members 
                  ( ("tag-buffer" variable (:default-value "nil") nil nil)
                    ("tag-start" variable (:default-value "nil") nil nil)
                    ("tag-end" variable (:default-value "nil") nil nil)
                    ("tag-name" variable (:default-value "nil") nil nil)
                    ("narrow" variable (:default-value "nil") nil nil))                  
                :type "class")
                nil [4325 4744])
            ("ecb-nav-tag-history-item-new" function (:arguments ("tag-name" "tag-buffer" "tag-start" "tag-end" "narrow")) nil [4746 5172])
            ("ecb-nav-get-tag-buffer" function
               (:parent "ecb-nav-tag-history-item"
                :arguments ("item"))
                nil [5174 5267])
            ("ecb-nav-get-tag-start" function
               (:parent "ecb-nav-tag-history-item"
                :arguments ("item"))
                nil [5269 5360])
            ("ecb-nav-get-tag-end" function
               (:parent "ecb-nav-tag-history-item"
                :arguments ("item"))
                nil [5362 5449])
            ("ecb-nav-get-tag-name" function
               (:parent "ecb-nav-tag-history-item"
                :arguments ("item"))
                nil [5451 5540])
            ("ecb-nav-get-narrow" function
               (:parent "ecb-nav-tag-history-item"
                :arguments ("item"))
                nil [5542 5627])
            ("ecb-nav-goto" function
               (:parent "ecb-nav-tag-history-item"
                :arguments ("item"))
                nil [5629 6265])
            ("ecb-nav-save" function
               (:parent "ecb-nav-tag-history-item"
                :arguments ("item"))
                nil [6267 6889])
            ("ecb-nav-to-string" function
               (:parent "ecb-nav-tag-history-item"
                :arguments ("item"))
                nil [6891 7016])
            ("ecb-nav-is-valid" function
               (:parent "ecb-nav-tag-history-item"
                :arguments ("item"))
                nil [7018 7382])
            ("ecb-nav-file-history-item" type
               (:superclasses "ecb-nav-history-item"
                :members 
                  ( ("file" variable nil nil nil)
                    ("indirect-buffer-name" variable nil nil nil))                  
                :type "class")
                nil [7501 7828])
            ("ecb-nav-file-history-item-new" function nil nil [7830 8399])
            ("ecb-nav-get-file" function
               (:parent "ecb-nav-file-history-item"
                :arguments ("item"))
                nil [8401 8483])
            ("ecb-nav-set-file" function
               (:parent "ecb-nav-file-history-item"
                :arguments ("item" "file"))
                nil [8485 8577])
            ("ecb-nav-get-indirect-buffer-name" function
               (:parent "ecb-nav-file-history-item"
                :arguments ("item"))
                nil [8579 8693])
            ("ecb-nav-set-indirect-buffer-name" function
               (:parent "ecb-nav-file-history-item"
                :arguments ("item" "indirect-buffer-name"))
                nil [8695 8851])
            ("ecb-nav-save" function
               (:parent "ecb-nav-file-history-item"
                :arguments ("item"))
                nil [8853 9245])
            ("ecb-nav-goto" function
               (:parent "ecb-nav-file-history-item"
                :arguments ("item"))
                nil [9247 9682])
            ("ecb-nav-to-string" function
               (:parent "ecb-nav-file-history-item"
                :arguments ("item"))
                nil [9686 9872])
            ("ecb-nav-is-valid" function
               (:parent "ecb-nav-file-history-item"
                :arguments ("item"))
                nil [9874 10257])
            ("ecb-nav-first-node" variable nil nil [10374 10405])
            ("setq" code nil nil [10406 10488])
            ("ecb-nav-current-node" variable nil nil [10490 10523])
            ("setq" code nil nil [10524 10570])
            ("ecb-nav-initialize" function nil nil [10573 10744])
            ("ecb-nav-jump-to-tag" function (:arguments ("file" "tag" "narrow")) nil [10749 10907])
            ("ecb-nav-jump-to-file" function (:arguments ("file")) nil [10909 11042])
            ("ecb-nav-add-item" function (:arguments ("item")) nil [11044 11260])
            ("ecb-nav-remove-current-node" function nil nil [11262 11345])
            ("ecb-nav-remove-node" function (:arguments ("node")) nil [11347 11991])
            ("ecb-nav-remove-invalid-nodes" function nil nil [11993 12273])
            ("ecb-nav-save-current" function nil nil [12275 12407])
            ("ecb-nav-goto-next" function (:user-visible-flag t) nil [12409 12563])
            ("ecb-nav-goto-previous" function (:user-visible-flag t) nil [12565 12724])
            ("ecb-nav-dump-history" function nil nil [12726 12860])
            ("ecb-nav-dump-history--internal" function (:arguments ("node")) nil [12862 13036])
            ("ecb-nav-goto--internal" function (:arguments ("node")) nil [13038 13462])
            ("silentcomp-provide" code nil nil [13465 13499]))          
    :file "ecb-navigate.el"
    :pointmax 13531
    :fsize 13530
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 1445 . 1446) (symbol 1404 . 1421) (open-paren 1403 . 1404))
    )
   (semanticdb-table "ecb-eshell.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [2942 2963])
            ("ecb-util" include nil nil [2966 2985])
            ("ecb-compilation" include nil nil [2986 3012])
            ("ecb-common-browser" include nil nil [3013 3042])
            ("silentcomp-defvar" code nil nil [3044 3082])
            ("silentcomp-defun" code nil nil [3083 3108])
            ("silentcomp-defun" code nil nil [3109 3137])
            ("silentcomp-defun" code nil nil [3138 3174])
            ("silentcomp-defun" code nil nil [3175 3204])
            ("ecb-eshell" customgroup (:user-visible-flag t) nil [3206 3321])
            ("ecb-eshell-enlarge-when-eshell" variable
               (:user-visible-flag t
                :default-value t)
                nil [3323 3526])
            ("ecb-eshell-fit-window-to-command-output" variable
               (:user-visible-flag t
                :default-value t)
                nil [3528 3849])
            ("ecb-eshell-auto-activate" variable (:user-visible-flag t) nil [3851 4100])
            ("ecb-eshell-buffer-sync" variable
               (:user-visible-flag t
                :default-value (quote basic))
                nil [4247 5285])
            ("ecb-eshell-buffer-sync-delay" variable
               (:user-visible-flag t
                :default-value (quote basic))
                nil [5292 6361])
            ("ecb-eshell-pre-command-point" variable nil nil [6367 6472])
            ("ecb-eshell-buffer-list" variable nil nil [6474 6660])
            ("defecb-advice-set" code nil nil [6663 6795])
            ("defecb-advice" code nil nil [6797 10238])
            ("ecb-eshell-activate-integration" function nil nil [10246 10497])
            ("ecb-eshell-deactivate-integration" function nil nil [10499 10944])
            ("defecb-autocontrol/sync-function" code nil nil [10946 13214])
            ("ecb-eshell-save-buffer-history" function (:arguments ("body")) nil [13216 13810])
            ("ecb-eshell-recenter" function
               (:user-visible-flag t
                :arguments ("display-errors"))
                nil [13812 14446])
            ("ecb-eshell-precommand-hook" function nil nil [14448 14585])
            ("ecb-eshell-fit-window-to-output" function nil nil [14588 16862])
            ("ecb-eshell-auto-activate-hook" function nil nil [16865 17046])
            ("ecb-eshell-window-size-change" function (:arguments ("frame")) nil [17048 17271])
            ("add-hook" code nil nil [17273 17333])
            ("silentcomp-provide" code nil nil [17335 17367]))          
    :file "ecb-eshell.el"
    :pointmax 17397
    :fsize 17396
    :lastmodtime '(20457 7011)
    :unmatched-syntax '((close-paren 2963 . 2964) (symbol 2922 . 2939) (open-paren 2921 . 2922))
    )
   (semanticdb-table "ecb-compilation.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1601 1622])
            ("silentcomp-defun" code nil nil [1625 1661])
            ("ecb-util" include nil nil [1663 1682])
            ("ecb-compilation-buffer-names" variable
               (:user-visible-flag t
                :default-value (\` (("*Calculator*") ("*vc*") ("*vc-diff*") (\, (if ecb-running-xemacs (quote ("\\*Apropos.*\\*" . t)) (quote ("*Apropos*")))) ("*Occur*") ("*shell*") ("\\*[cC]ompilation.*\\*" . t) ("\\*i?grep.*\\*" . t) ("*JDEE Compile Server*") (\, (if ecb-running-xemacs (quote ("\\*Help.*\\*" . t)) (quote ("*Help*")))) ("*Completions*") ("*Backtrace*") ("*Compile-log*") ("*bsh*") ((\, (if ecb-running-xemacs " *Message-Log*" "*Messages*"))))))
                nil [1684 3776])
            ("ecb-compilation-buffer-names-internal" variable nil nil [3778 4030])
            ("ecb-compilation-buffer-names" function nil nil [4032 4353])
            ("ecb-compilation-registered-buffer-p" function (:arguments ("name")) nil [4355 4795])
            ("ecb-compilation-major-modes" variable
               (:user-visible-flag t
                :default-value (quote (compilation-mode)))
                nil [4797 5282])
            ("ecb-compilation-major-modes-internal" variable nil nil [5284 5479])
            ("ecb-compilation-major-modes" function nil nil [5481 5789])
            ("ecb-compilation-predicates" variable
               (:user-visible-flag t
                :default-value (quote (comint-check-proc)))
                nil [5792 6603])
            ("ecb-compilation-predicates-internal" variable nil nil [6605 6788])
            ("ecb-compilation-predicates" function nil nil [6790 7120])
            ("ecb-compilation-get-buffers" function nil nil [7124 7804])
            ("ecb-compilation-buffer-p" function (:arguments ("buffer-or-name")) nil [7807 10137])
            ("ecb-compilation-update-menu-p" variable nil nil [10724 10766])
            ("ecb-compilation-buffer-list-cache" variable nil nil [10767 10813])
            ("ecb-compilation-update-idle-time" variable (:default-value 0.25) nil [10814 10860])
            ("ecb-compilation-buffer-list-init" function nil nil [10862 11087])
            ("defecb-autocontrol/sync-function" code nil nil [11089 11839])
            ("ecb-compilation-update-menu" function nil nil [11842 13464])
            ("silentcomp-provide" code nil nil [13474 13511]))          
    :file "ecb-compilation.el"
    :pointmax 13546
    :fsize 13545
    :lastmodtime '(20457 7011)
    :unmatched-syntax '((close-paren 1622 . 1623) (symbol 1581 . 1598) (open-paren 1580 . 1581))
    )
   (semanticdb-table "ecb-cycle.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [2189 2210])
            ("ecb-compilation" include nil nil [2213 2239])
            ("ecb-layout" include nil nil [2240 2261])
            ("ecb-cycle" customgroup (:user-visible-flag t) nil [2263 2374])
            ("ecb-cycle-through-compilation-buffers" function
               (:user-visible-flag t
                :arguments ("choose-buffer"))
                nil [2377 4828])
            ("ecb-cycle-set-compilation-buffer" function (:arguments ("index" "compilation-buffers")) nil [4833 5044])
            ("silentcomp-provide" code nil nil [5047 5078]))          
    :file "ecb-cycle.el"
    :pointmax 5107
    :fsize 5106
    :lastmodtime '(20457 7011)
    :unmatched-syntax '((close-paren 2210 . 2211) (symbol 2169 . 2186) (open-paren 2168 . 2169))
    )
   (semanticdb-table "ecb-face.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1504 1525])
            ("silentcomp-defun" code nil nil [1528 1562])
            ("silentcomp-defun" code nil nil [1563 1596])
            ("silentcomp-defun" code nil nil [1597 1625])
            ("silentcomp-defun" code nil nil [1626 1664])
            ("ecb-face-options" customgroup (:user-visible-flag t) nil [1666 1768])
            ("ecb-faces" customgroup (:user-visible-flag t) nil [1770 1888])
            ("ecb-face-default" function (:arguments ("height" "bold-p" "italic-p" "inherit" "fg-light-col" "fg-dark-col" "bg-light-col" "bg-dark-col" "fg-rest" "bg-rest" "reverse-video-p")) nil [1890 4965])
            ("ecb-default-general-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default 1.0)
                :type "face")
                nil [4967 5844])
            ("ecb-tree-guide-line-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face) "grey" "gray")
                :type "face")
                nil [5846 6126])
            ("ecb-tree-guide-line-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-tree-guide-line-face))
                nil [6128 6268])
            ("ecb-directories-general-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face))
                :type "face")
                nil [6270 6574])
            ("ecb-directories-general-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-default-general-face))
                nil [6576 7261])
            ("ecb-sources-general-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face))
                :type "face")
                nil [7263 7555])
            ("ecb-sources-general-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-default-general-face))
                nil [7557 8238])
            ("ecb-methods-general-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face))
                :type "face")
                nil [8240 8532])
            ("ecb-methods-general-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-default-general-face))
                nil [8534 9201])
            ("ecb-history-general-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face))
                :type "face")
                nil [9203 9495])
            ("ecb-history-general-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-default-general-face))
                nil [9497 10164])
            ("ecb-history-bucket-node-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-bucket-node-face))
                :type "face")
                nil [10276 10862])
            ("ecb-history-bucket-node-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-history-bucket-node-face))
                nil [10864 11471])
            ("ecb-history-indirect-buffer-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil t (quote ecb-history-general-face))
                :type "face")
                nil [11473 12084])
            ("ecb-history-indirect-buffer-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-history-indirect-buffer-face))
                nil [12087 12489])
            ("ecb-history-dead-buffer-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-history-general-face) "gray60" "gray60" nil nil nil "gray60")
                :type "face")
                nil [12491 13346])
            ("ecb-history-dead-buffer-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-history-dead-buffer-face))
                nil [13349 13741])
            ("ecb-default-highlight-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil nil "yellow" nil "cornflower blue" "magenta" nil nil t)
                :type "face")
                nil [13744 14842])
            ("ecb-directory-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-default-highlight-face) "yellow" nil "cornflower blue" "magenta" nil nil t)
                :type "face")
                nil [14844 15260])
            ("ecb-directory-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-default-highlight-face))
                nil [15262 15888])
            ("ecb-source-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-default-highlight-face) "yellow" nil "cornflower blue" "magenta" nil nil t)
                :type "face")
                nil [15890 16294])
            ("ecb-source-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-default-highlight-face))
                nil [16296 16906])
            ("ecb-method-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-default-highlight-face) "yellow" nil "cornflower blue" "magenta" nil nil t)
                :type "face")
                nil [16908 17309])
            ("ecb-method-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-default-highlight-face))
                nil [17311 17917])
            ("ecb-method-non-semantic-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-methods-general-face) "brown" "brown")
                :type "face")
                nil [17919 18229])
            ("ecb-method-non-semantic-face" variable
               (:user-visible-flag t
                :default-value (quote speedbar-tag-face))
                nil [18231 18723])
            ("ecb-history-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-default-highlight-face) "yellow" nil "cornflower blue" "magenta" nil nil t)
                :type "face")
                nil [18725 19133])
            ("ecb-history-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-default-highlight-face))
                nil [19135 19745])
            ("ecb-analyse-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-default-highlight-face) "yellow" nil "cornflower blue" "magenta" nil nil t)
                :type "face")
                nil [19747 20155])
            ("ecb-analyse-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-default-highlight-face))
                nil [20157 20767])
            ("ecb-analyse-general-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face))
                :type "face")
                nil [20769 21061])
            ("ecb-analyse-general-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-default-general-face))
                nil [21063 21730])
            ("ecb-analyse-bucket-element-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-analyse-general-face) "brown")
                :type "face")
                nil [21732 22402])
            ("ecb-analyse-bucket-element-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-analyse-bucket-element-face))
                nil [22404 23023])
            ("ecb-analyse-bucket-node-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil t nil (quote ecb-bucket-node-face))
                :type "face")
                nil [23025 23610])
            ("ecb-analyse-bucket-node-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-analyse-bucket-node-face))
                nil [23612 24192])
            ("ecb-tag-header-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil nil nil nil "SeaGreen1" "SeaGreen1" nil nil t)
                :type "face")
                nil [24194 24601])
            ("ecb-tag-header-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-tag-header-face))
                nil [24605 24900])
            ("ecb-source-in-directories-buffer-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-directories-general-face) "medium blue" "LightBlue1" nil nil nil "gray")
                :type "face")
                nil [24902 25470])
            ("ecb-source-in-directories-buffer-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-source-in-directories-buffer-face))
                nil [25473 25682])
            ("ecb-source-read-only-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil t (quote ecb-default-general-face))
                :type "face")
                nil [25684 25900])
            ("ecb-source-read-only-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-source-read-only-face))
                nil [25903 26089])
            ("ecb-directory-not-accessible-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil (quote ecb-directories-general-face) "gray60" "gray60" nil nil nil "gray60")
                :type "face")
                nil [26091 26640])
            ("ecb-directory-not-accessible-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-directory-not-accessible-face))
                nil [26643 26851])
            ("ecb-type-tag-class-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil t)
                :type "face")
                nil [26853 26989])
            ("ecb-type-tag-interface-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil t)
                :type "face")
                nil [26991 27131])
            ("ecb-type-tag-struct-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil t)
                :type "face")
                nil [27133 27270])
            ("ecb-type-tag-typedef-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil t)
                :type "face")
                nil [27272 27410])
            ("ecb-type-tag-union-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil t)
                :type "face")
                nil [27412 27548])
            ("ecb-type-tag-enum-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil t)
                :type "face")
                nil [27550 27685])
            ("ecb-type-tag-group-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil t nil nil (if ecb-running-xemacs "dimgray" "dim gray") (if ecb-running-xemacs "dimgray" "dim gray"))
                :type "face")
                nil [27687 28239])
            ("ecb-bucket-node-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil t nil (quote ecb-default-general-face))
                :type "face")
                nil [28241 28834])
            ("when" code nil nil [29407 29591])
            ("ecb-mode-line-win-nr-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil t)
                :type "face")
                nil [29592 29772])
            ("ecb-mode-line-win-nr-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-mode-line-win-nr-face))
                nil [29774 30086])
            ("when" code nil nil [30088 30291])
            ("ecb-mode-line-prefix-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default nil nil nil nil "forestgreen" "forestgreen")
                :type "face")
                nil [30345 30649])
            ("ecb-mode-line-prefix-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-mode-line-prefix-face))
                nil [30651 30943])
            ("when" code nil nil [30945 31079])
            ("ecb-mode-line-data-face" variable
               (:user-visible-flag t
                :default-value (ecb-face-default)
                :type "face")
                nil [31080 31226])
            ("ecb-mode-line-data-face" variable
               (:user-visible-flag t
                :default-value (quote ecb-mode-line-data-face))
                nil [31228 31510])
            ("silentcomp-provide" code nil nil [31512 31542]))          
    :file "ecb-face.el"
    :pointmax 31570
    :fsize 31569
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 1525 . 1526) (symbol 1484 . 1501) (open-paren 1483 . 1484))
    )
   (semanticdb-table "ecb-tod.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1398 1419])
            ("ecb-util" include nil nil [1422 1441])
            ("silentcomp-defvar" code nil nil [1443 1477])
            ("ecb-tip-of-the-day" variable
               (:user-visible-flag t
                :default-value t)
                nil [1479 1597])
            ("ecb-tip-of-the-day-file" variable
               (:user-visible-flag t
                :default-value "~/.ecb-tip-of-day.el")
                nil [1599 1742])
            ("ecb-tod-tip-list" variable
               (:constant-flag t
                :default-value (quote ("You can expand the ECB-methods-buffer with `ecb-expand-methods-nodes' [C-c . x]." "You can toggle between different layouts with `ecb-toggle-layout' [C-c . t]." "You can go back to the most recent layout with [C-u] `ecb-toggle-layout' [C-u C-c . t]." "You can toggle displaying the ECB-windows with `ecb-toggle-ecb-windows' [C-c . w]." "You can show and hide the ECB-windows on a major-mode-basis with `ecb-major-modes-show-or-hide'." "You can maximize a certain ECB-window either via its popup-menu or with [C-x 1] in that window." "You can use speedbar instead of the native tree-buffers with option `ecb-use-speedbar-instead-native-tree-buffer'." "You can speedup access for big directories with option `ecb-cache-directory-contents'." "You can display the online help also in HTML-format with option `ecb-show-help-format'." "You can interactively create your own layouts with the command `ecb-create-new-layout'." "You can start the eshell in the compile-window simply with `eshell' or [C-c . e]." "Use the incremental search in the methods-buffer for fast node-selecting; see `ecb-tree-incremental-search'." "You can cycle through all currently opened \"compile-buffers\" with `ecb-cycle-through-compilation-buffers'." "You can change the window-sizes by dragging the mouse and storing the new sizes with `ecb-store-window-sizes'." "You can get a quick overlook of all built-in layouts with `ecb-show-layout-help'." "Browse your sources as with a web-browser with `ecb-nav-goto-next' [C-c . n], `ecb-nav-goto-previous' [C-c . p]." "Customize the look&feel of the tree-buffers with `ecb-tree-expand-symbol-before' and `ecb-tree-indent'." "Customize the contents of the methods-buffer with `ecb-tag-display-function', `ecb-type-tag-display', `ecb-show-tags'." "Customize the main mouse-buttons of the tree-buffers with `ecb-primary-secondary-mouse-buttons'." "Customize with `ecb-tree-do-not-leave-window-after-select' for which tree-buffers a selection doesn't leave the window." "Grep a directory (recursive) by using the popup-menu (the right mouse-button) in the directories buffer." "Customize the sorting of the sources with the option `ecb-sources-sort-method'." "Narrow the source-buffer to the selected tag in the methods-buffer with `ecb-tag-visit-post-actions'." "Enable autom. enlarging of the compile-window by select with the option `ecb-compile-window-temporally-enlarge'." "Customize with `ecb-compile-window-temporally-enlarge' the situations the compile-window is allowed to enlarge." "Customize the meaning of `other-window' [C-x o] with the option `ecb-other-window-behavior'." "Customize height and width of the ECB-windows with `ecb-windows-height' and `ecb-windows-width'." "Define with `ecb-compilation-buffer-names' and `ecb-compilation-major-modes' which buffers are \"compile-buffers\"." "Customize all faces used by ECB with the customize-groups `ecb-face-options' and `ecb-faces'." "Auto-activate eshell with the option `ecb-eshell-auto-activate'." "Get best use of big screen-displays with leftright-layouts like \"leftright1\" or \"leftright2\"." "Use the POWER-click in the methods-buffer to narrow the clicked node in the edit-window." "Use the POWER-click in the sources- and history-buffer to get only an overlook of the source-contents." "Exclude not important sources from being displayed in the sources-buffer with `ecb-source-file-regexps'." "Use left- and right-arrow for smart expanding/collapsing tree-buffer-nodes; see `ecb-tree-navigation-by-arrow'." "Add personal key-bindings to the tree-buffers with `ecb-common-tree-buffer-after-create-hook'." "Add personal key-bindings to the directories-buffer with `ecb-directories-buffer-after-create-hook'." "Add personal key-bindings to the sources-buffer with `ecb-sources-buffer-after-create-hook'." "Add personal key-bindings to the methods-buffer with `ecb-methods-buffer-after-create-hook'." "Add personal key-bindings to the history-buffer with `ecb-history-buffer-after-create-hook'." "Pop up a menu with the right mouse-button and do senseful things in the tree-buffers." "Extend the builtin popup-menus to your needs - see `ecb-directories-menu-user-extension'." "Call `ecb-show-help' [C-c . o] with a prefix-argument [C-u] and choose the help-format." "You can change the prefix [C-c .] of all ECB-key-bindings quick and easy with `ecb-key-map'." "Send a problem-report to the ECB-mailing-list quick and easy with `ecb-submit-problem-report'." "Switch on/off auto. expanding of the ECB-methods-buffer with `ecb-auto-expand-directory-tree'." "You can quickly toggle auto. expanding of the ECB-methods-buffer with `ecb-toggle-auto-expand-tag-tree'." "Highlight current semantic-tag of the edit-buffer in the ECB-methods-buffer with `ecb-highlight-tag-with-point'." "Apply a filter to the sources-buffer either via `ecb-sources-filter' or via the popup-menu." "Apply a filter to the history-buffer either via `ecb-history-filter' or via the popup-menu." "Apply tag-filters (can be layered) to the methods-buffer either via `ecb-methods-filter' or via the popup-menu." "Use `scroll-all-mode' to scroll both edit-windows of ECB simultaneously - and no other windows are scrolled!" "You can toggle having a compile window with `ecb-toggle-compile-window' if `ecb-compile-window-height' is not nil." "Start ECB automatically after Emacs is started. Use option `ecb-auto-activate'" "Maximize a tree-buffer via modeline - ECB supports the standard-mechanism of (X)Emacs for deleting other windows." "Easy horizontal scrolling the tree-buffers with the mouse with [M-mouse-1] and [M-mouse-3]; see `ecb-tree-easy-hor-scroll'." "Expand and collapse very precisely the current node in a tree-buffer with commands in the popup-menu." "Let ECB display the version-control-state of your files in the tree-buffers. See `ecb-vc-enable-support'." "Work with remote paths (e.g. TRAMP-, ANGE-FTP-, or EFS-paths) as with local paths in `ecb-source-path'." "Exclude certain files from being displayed in the history-buffer. See `ecb-history-exclude-file-regexps'." "Get the most important options of ECB at a glance by viewing the customization group \"ecb-most-important\".")))
                nil [1744 8228])
            ("ecb-show-tip-of-the-day" function (:user-visible-flag t) nil [8233 8803])
            ("ecb-tod-move-cursor" function (:arguments ("cursor")) nil [8805 9125])
            ("silentcomp-provide" code nil nil [9127 9156]))          
    :file "ecb-tod.el"
    :pointmax 9181
    :fsize 9180
    :lastmodtime '(20457 7013)
    :unmatched-syntax '((close-paren 1419 . 1420) (symbol 1378 . 1395) (open-paren 1377 . 1378))
    )
   (semanticdb-table "ecb-speedbar.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [2375 2396])
            ("speedbar" include nil nil [2399 2418])
            ("ecb-util" include nil nil [2419 2438])
            ("ecb-cedet-wrapper" include nil nil [2439 2467])
            ("ecb-common-browser" include nil nil [2468 2497])
            ("cl" include nil nil [2549 2562])
            ("silentcomp-defvar" code nil nil [2575 2613])
            ("silentcomp-defvar" code nil nil [2614 2652])
            ("silentcomp-defun" code nil nil [2663 2694])
            ("silentcomp-defvar" code nil nil [2695 2735])
            ("ecb-speedbar" customgroup (:user-visible-flag t) nil [2737 2853])
            ("ecb-speedbar-before-activate-hook" variable (:user-visible-flag t) nil [2855 3215])
            ("ecb-speedbar-buffer-sync" variable
               (:user-visible-flag t
                :default-value (quote basic))
                nil [3217 4098])
            ("ecb-speedbar-buffer-sync-delay" variable
               (:user-visible-flag t
                :default-value (quote basic))
                nil [4105 5180])
            ("ecb-speedbar-buffer-sync-hook" variable nil nil [5184 6436])
            ("defecb-advice-set" code nil nil [6439 6559])
            ("ecb-speedbar-buffer-name" variable
               (:constant-flag t
                :default-value " SPEEDBAR")
                nil [6561 6645])
            ("ecb-speedbar-buffer-selected" function nil nil [6647 6751])
            ("defecb-advice" code nil nil [6753 7933])
            ("defecb-advice" code nil nil [7936 8228])
            ("defecb-advice" code nil nil [8231 8740])
            ("defecb-advice" code nil nil [8952 9694])
            ("defecb-advice" code nil nil [9993 10309])
            ("ecb-speedbar-dframe-select-attached-window" function nil nil [10311 10728])
            ("ecb-speedbar-select-speedbar-window" function nil nil [10730 10935])
            ("ecb-speedbar-set-buffer" function nil nil [10937 11230])
            ("ecb-speedbar-verbosity-level-old" variable nil nil [11233 11278])
            ("ecb-speedbar-select-frame-method-old" variable nil nil [11279 11328])
            ("ecb-speedbar-update-flag-old" variable (:default-value -1) nil [11329 11369])
            ("ecb-speedbar-activate" function nil nil [11371 14698])
            ("ecb-speedbar-deactivate" function nil nil [14701 15715])
            ("ecb-speedbar-active-p" function nil nil [15718 15947])
            ("ecb-speedbar-update-contents" function nil nil [15949 16056])
            ("defecb-autocontrol/sync-function" code nil nil [16059 16997])
            ("ecb-goto-window-speedbar" function (:user-visible-flag t) nil [16999 17233])
            ("ecb-maximize-window-speedbar" function (:user-visible-flag t) nil [17235 17581])
            ("ecb-speedbar-sb-tag-p" function (:arguments ("tag")) nil [17754 17922])
            ("tree-buffer" include nil nil [17924 17946])
            ("ecb-face" include nil nil [17947 17966])
            ("ecb-create-non-semantic-tree" function (:arguments ("node" "tag-list")) nil [17967 21416])
            ("ecb-get-tags-for-non-semantic-files" function nil nil [21418 23196])
            ("silentcomp-provide" code nil nil [23199 23233]))          
    :file "ecb-speedbar.el"
    :pointmax 23265
    :fsize 23264
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 2562 . 2563) (symbol 2500 . 2517) (open-paren 2499 . 2500) (close-paren 2396 . 2397) (symbol 2355 . 2372) (open-paren 2354 . 2355))
    )
   (semanticdb-table "ecb-autogen.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("autoload" include nil nil [1597 1616])
            ("ecb-util" include nil nil [1618 1637])
            ("silentcomp" include nil nil [1660 1681])
            ("when" code nil nil [1685 1983])
            ("ecb-autogen-header" variable
               (:constant-flag t
                :default-value "Auto-generated ecb autoloads")
                nil [1986 2097])
            ("ecb-autogen-file" variable
               (:constant-flag t
                :default-value "ecb-autoloads.el")
                nil [2099 2192])
            ("ecb-autoload-feature" variable
               (:constant-flag t
                :default-value "ecb-autoloads")
                nil [2194 2275])
            ("ecb-autogen-subdirs" variable nil nil [2277 2352])
            ("ecb-autogen-update-header" function nil nil [2354 3191])
            ("ecb-batch-update-autoloads" function nil nil [3333 3964])
            ("ecb-update-autoloads" function (:user-visible-flag t) nil [3967 5902])
            ("silentcomp-provide" code nil nil [5904 5937]))          
    :file "ecb-autogen.el"
    :pointmax 5968
    :fsize 5967
    :lastmodtime '(20457 7011)
    :unmatched-syntax '((close-paren 1681 . 1682) (symbol 1640 . 1657) (open-paren 1639 . 1640))
    )
   (semanticdb-table "ecb-winman-support.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [4066 4087])
            ("ecb-util" include nil nil [4090 4109])
            ("ecb-common-browser" include nil nil [4110 4139])
            ("silentcomp-defvar" code nil nil [4141 4190])
            ("ecb-winman-support" customgroup (:user-visible-flag t) nil [4193 4362])
            ("ecb-winman-escreen-number" variable
               (:user-visible-flag t
                :default-value 1)
                nil [4364 4684])
            ("ecb-winman-winring-name" variable
               (:user-visible-flag t
                :default-value "ECB")
                nil [4686 5052])
            ("defecb-advice-set" code nil nil [5134 5319])
            ("ecb-winman-escreen-enable-support" function (:user-visible-flag t) nil [5322 6152])
            ("ecb-winman-escreen-disable-support" function (:user-visible-flag t) nil [6155 6448])
            ("ecb-winman-escreen-goto-escreen-hook" function nil nil [6455 6826])
            ("defecb-advice" code nil nil [6828 7375])
            ("defecb-advice-set" code nil nil [7456 7642])
            ("ecb-winman-winring-enable-support" function (:user-visible-flag t) nil [7644 8368])
            ("ecb-winman-winring-disable-support" function (:user-visible-flag t) nil [8370 8535])
            ("ecb-winman-winring-ecb-frame" variable nil nil [8538 8648])
            ("defecb-advice" code nil nil [8650 9532])
            ("defecb-advice" code nil nil [9534 9832])
            ("defecb-advice" code nil nil [9834 10221])
            ("defecb-advice" code nil nil [10226 10758])
            ("defecb-advice" code nil nil [10763 11135])
            ("defecb-advice-set" code nil nil [11218 11413])
            ("defecb-advice" code nil nil [11415 11670])
            ("defecb-advice" code nil nil [11672 11925])
            ("defecb-advice" code nil nil [11927 12180])
            ("when-ecb-running-xemacs" code nil nil [12182 12994])
            ("ecb-disable-advices" code nil nil [13036 13097])
            ("ecb-disable-advices" code nil nil [13098 13159])
            ("ecb-disable-advices" code nil nil [13160 13226])
            ("silentcomp-provide" code nil nil [13228 13268]))          
    :file "ecb-winman-support.el"
    :pointmax 13306
    :fsize 13305
    :lastmodtime '(20457 7013)
    :unmatched-syntax '((close-paren 4087 . 4088) (symbol 4046 . 4063) (open-paren 4045 . 4046))
    )
   (semanticdb-table "ecb-compatibility.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1594 1615])
            ("ecb-util" include nil nil [1619 1638])
            ("ecb-common-browser" include nil nil [1639 1668])
            ("ecb-layout" include nil nil [1669 1690])
            ("defecb-advice-set" code nil nil [2030 2134])
            ("defecb-advice" code nil nil [2213 2890])
            ("defecb-advice" code nil nil [2972 3646])
            ("defecb-advice" code nil nil [3648 4528])
            ("defecb-advice" code nil nil [4530 4824])
            ("defecb-advice" code nil nil [4826 5116])
            ("defecb-advice" code nil nil [5118 5414])
            ("when-ecb-running-emacs" code nil nil [5830 7172])
            ("defecb-advice" code nil nil [7252 7979])
            ("defecb-advice" code nil nil [7981 8418])
            ("when-ecb-running-emacs" code nil nil [8762 9687])
            ("silentcomp-defun" code nil nil [9769 9806])
            ("silentcomp-defvar" code nil nil [9807 9842])
            ("ecb-before-ediff-window-config" variable nil nil [10267 10310])
            ("ecb-ediff-before-setup-hook" function nil nil [10542 11460])
            ("ecb-ediff-quit-hook" function nil nil [11685 12238])
            ("ecb-activate-ediff-compatibility" function nil nil [12240 12776])
            ("ecb-deactivate-ediff-compatibility" function nil nil [12778 13133])
            ("when-ecb-running-emacs" code nil nil [14552 15822])
            ("ecb-disable-advices" code nil nil [16622 16672])
            ("silentcomp-provide" code nil nil [16674 16713]))          
    :file "ecb-compatibility.el"
    :pointmax 16750
    :fsize 16749
    :lastmodtime '(20457 7011)
    :unmatched-syntax '((close-paren 1615 . 1616) (symbol 1574 . 1591) (open-paren 1573 . 1574))
    )
   (semanticdb-table "ecb-analyse.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("semantic-analyze" include nil nil [1160 1187])
            ("ecb-layout" include nil nil [1188 1209])
            ("ecb-common-browser" include nil nil [1210 1239])
            ("ecb-method-browser" include nil nil [1240 1269])
            ("silentcomp" include nil nil [1292 1313])
            ("cl" include nil nil [1366 1379])
            ("ecb-analyse" customgroup (:user-visible-flag t) nil [1383 1503])
            ("ecb-analyse-buffer-name" variable
               (:user-visible-flag t
                :default-value " *ECB Analyse*")
                nil [1506 2002])
            ("ecb-analyse-buffer-after-create-hook" variable (:user-visible-flag t) nil [2004 2435])
            ("ecb-analyse-show-node-info" variable
               (:user-visible-flag t
                :default-value (quote (if-too-long . name)))
                nil [2437 3489])
            ("ecb-analyse-collapsed-buckets" variable (:user-visible-flag t) nil [3492 5734])
            ("ecb-analyse-fontified-buckets" variable
               (:user-visible-flag t
                :default-value (quote ("Context" "Function")))
                nil [5736 7295])
            ("ecb-analyse-gen-tag-info-fn" variable (:user-visible-flag t) nil [7297 7971])
            ("ecb-analyse-show-tag-info-fn" variable
               (:user-visible-flag t
                :default-value (quote message))
                nil [7973 8942])
            ("ecb-analyse-buffer-sync" variable
               (:user-visible-flag t
                :default-value (quote basic))
                nil [8944 10010])
            ("ecb-analyse-buffer-sync-delay" variable
               (:user-visible-flag t
                :default-value 2)
                nil [10012 11218])
            ("ecb-analyse-buffer-sync-hook" variable nil nil [11220 12466])
            ("ecb-analyse-nodedata-tag-with-pos" variable (:constant-flag t) nil [12468 12514])
            ("ecb-analyse-nodedata-tag-without-pos" variable
               (:constant-flag t
                :default-value 1)
                nil [12515 12564])
            ("ecb-analyse-nodedata-no-tag" variable
               (:constant-flag t
                :default-value 2)
                nil [12565 12605])
            ("ecb-analyse-nodetype-bucket" variable (:constant-flag t) nil [12607 12647])
            ("ecb-analyse-nodetype-context" variable
               (:constant-flag t
                :default-value 1)
                nil [12648 12689])
            ("ecb-analyse-nodetype-arguments" variable
               (:constant-flag t
                :default-value 2)
                nil [12690 12733])
            ("ecb-analyse-nodetype-completions" variable
               (:constant-flag t
                :default-value 3)
                nil [12734 12779])
            ("ecb-analyse-nodetype-localvars" variable
               (:constant-flag t
                :default-value 4)
                nil [12780 12823])
            ("ecb-analyse-nodetype-prefix" variable
               (:constant-flag t
                :default-value 5)
                nil [12824 12864])
            ("ecb-analyse-nodetype-assignee" variable
               (:constant-flag t
                :default-value 6)
                nil [12865 12907])
            ("ecb-analyse-nodetype-function" variable
               (:constant-flag t
                :default-value 7)
                nil [12908 12950])
            ("ecb-analyse-nodetype-function-arg" variable
               (:constant-flag t
                :default-value 8)
                nil [12951 12997])
            ("defecb-autocontrol/sync-function" code nil nil [12999 15163])
            ("ecb-analyse-show-scope" function (:arguments ("scope")) nil [15173 15460])
            ("ecb-analyse-more-nodes" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [15462 15724])
            ("ecb-analyse-more-nodes" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [15726 16063])
            ("ecb-analyse-more-nodes" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [16065 16694])
            ("ecb-analyse-add-nodes" function (:arguments ("bucket" "bucket-name" "list" "nodetype")) nil [17055 19631])
            ("ecb-analyse-compare-node-data" function (:arguments ("left" "right")) nil [19635 19862])
            ("tree-buffer-defpopup-command" code nil nil [19864 20994])
            ("tree-buffer-defpopup-command" code nil nil [20996 22094])
            ("defecb-tree-buffer-callback" code nil nil [22096 23352])
            ("defecb-window-dedicator" code nil nil [23354 23685])
            ("ecb-maximize-window-analyse" function (:user-visible-flag t) nil [23687 24028])
            ("ecb-goto-window-analyse" function (:user-visible-flag t) nil [24030 24180])
            ("ecb-analyse-show-tag-info-in-temp-buffer" function (:arguments ("info-string")) nil [24182 24544])
            ("ecb-analyse-gen-tag-info" function (:arguments ("tag")) nil [24683 26175])
            ("tree-buffer-defpopup-command" code nil nil [26178 26654])
            ("ecb-mouse-over-analyse-node" function (:arguments ("node" "window" "no-message" "click-force")) nil [26656 27554])
            ("ecb-analyse-node-mouse-highlighted-p" function (:arguments ("node")) nil [27556 28009])
            ("ecb-analyse-create-menu" function (:arguments ("node")) nil [28011 28798])
            ("ecb-analyse-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [28804 29566])
            ("ecb-analyse-gen-menu-title-creator" function nil nil [29569 30245])
            ("defecb-tree-buffer-creator" code nil nil [30248 32594])
            ("silentcomp-provide" code nil nil [32598 32631]))          
    :file "ecb-analyse.el"
    :pointmax 32662
    :fsize 32661
    :lastmodtime '(20457 7011)
    :unmatched-syntax '((close-paren 1379 . 1380) (symbol 1317 . 1334) (open-paren 1316 . 1317) (close-paren 1313 . 1314) (symbol 1272 . 1289) (open-paren 1271 . 1272) (close-paren 1437 . 1438) (symbol 1375 . 1392) (open-paren 1374 . 1375) (close-paren 1371 . 1372) (symbol 1330 . 1347) (open-paren 1329 . 1330))
    )
   (semanticdb-table "ecb-symboldef.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("ecb-util" include nil nil [1685 1704])
            ("ecb-layout" include nil nil [1705 1726])
            ("ecb-common-browser" include nil nil [1727 1756])
            ("ecb-cedet-wrapper" include nil nil [1757 1785])
            ("silentcomp" include nil nil [1808 1829])
            ("silentcomp-defun" code nil nil [1848 1883])
            ("silentcomp-defun" code nil nil [1884 1925])
            ("silentcomp-defun" code nil nil [1926 1962])
            ("silentcomp-defun" code nil nil [1978 2014])
            ("ecb-symboldef" customgroup (:user-visible-flag t) nil [2180 2312])
            ("ecb-symboldef-buffer-name" variable
               (:user-visible-flag t
                :default-value " *ECB Symboldefinition*")
                nil [2314 2852])
            ("ecb-symboldef-find-functions" variable
               (:user-visible-flag t
                :default-value (quote ((lisp-interaction-mode . ecb-symboldef-find-lisp-doc) (lisp-mode . ecb-symboldef-find-lisp-doc) (emacs-lisp-mode . ecb-symboldef-find-lisp-doc) (default . ecb-symboldef-find-definition))))
                nil [2854 4746])
            ("ecb-symboldef-buffer-sync" variable
               (:user-visible-flag t
                :default-value (quote basic))
                nil [5431 6310])
            ("ecb-symboldef-buffer-sync-delay" variable
               (:user-visible-flag t
                :default-value (quote basic))
                nil [6317 7388])
            ("ecb-symboldef-buffer-sync-hook" variable nil nil [7392 8667])
            ("ecb-symboldef-last-symbol" variable nil nil [8710 8791])
            ("ecb-symboldef-get-find-function" function nil nil [8793 9136])
            ("ecb-symboldef-find-null" function (:arguments ("symbol-name" "edit-buffer")) nil [9138 9634])
            ("ecb-symboldef-get-elisp-arglist" function (:arguments ("function")) nil [9636 11320])
            ("ecb-symboldef-find-lisp-doc" function (:arguments ("symbol-name" "edit-buffer")) nil [11322 13736])
            ("ecb-symboldef-find-tag-by-semanticdb" function (:arguments ("symbol-name" "edit-buffer")) nil [13738 14631])
            ("ecb-symboldef-find-tag-by-etags" function (:arguments ("symbol-name" "edit-buffer")) nil [14633 15323])
            ("ecb-symboldef-find-definition" function (:arguments ("symbol-name" "edit-buffer")) nil [15325 17168])
            ("defecb-autocontrol/sync-function" code nil nil [17170 19620])
            ("defecb-window-dedicator" code nil nil [19623 20064])
            ("ecb-maximize-window-symboldef" function (:user-visible-flag t) nil [20066 20429])
            ("ecb-goto-window-symboldef" function (:user-visible-flag t) nil [20431 20595])
            ("silentcomp-provide" code nil nil [20597 20632]))          
    :file "ecb-symboldef.el"
    :pointmax 20665
    :fsize 20664
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 1829 . 1830) (symbol 1788 . 1805) (open-paren 1787 . 1788))
    )
   (semanticdb-table "ecb-common-browser.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1476 1497])
            ("ecb-util" include nil nil [1501 1520])
            ("tree-buffer" include nil nil [1522 1544])
            ("ecb-mode-line" include nil nil [1601 1625])
            ("ecb-navigate" include nil nil [1626 1649])
            ("assoc" include nil nil [1668 1684])
            ("cl" include nil nil [1736 1749])
            ("silentcomp-defvar" code nil nil [1752 1784])
            ("ecb-tree-buffer" customgroup (:user-visible-flag t) nil [1786 1904])
            ("ecb-bucket-node-display" variable
               (:user-visible-flag t
                :default-value (quote ("" "" ecb-bucket-node-face)))
                nil [1906 3366])
            ("ecb-use-speedbar-instead-native-tree-buffer" variable (:user-visible-flag t) nil [3368 5067])
            ("ecb-tree-do-not-leave-window-after-select--internal" variable nil nil [5069 5328])
            ("ecb-tree-do-not-leave-window-after-select" variable (:user-visible-flag t) nil [5330 7360])
            ("ecb-tree-indent" variable
               (:user-visible-flag t
                :default-value 4)
                nil [7362 7599])
            ("ecb-tree-expand-symbol-before" variable
               (:user-visible-flag t
                :default-value t)
                nil [7601 8492])
            ("ecb-tree-buffer-style" variable
               (:user-visible-flag t
                :default-value (quote image))
                nil [8654 10466])
            ("ecb-tree-image-icons-directories" variable
               (:user-visible-flag t
                :default-value (let ((base (concat (if ecb-regular-xemacs-package-p (format "%s" (locate-data-directory "ecb")) ecb-ecb-dir) "ecb-images/"))) (cons (concat base "default/height-17") (mapcar (function (lambda (i) (cons (car i) (concat base (cdr i))))) (quote ((ecb-directories-buffer-name . "directories/height-17") (ecb-sources-buffer-name . "sources/height-14_to_21") (ecb-methods-buffer-name . "methods/height-14_to_21")))))))
                nil [10658 13391])
            ("ecb-tree-truncate-lines" variable
               (:user-visible-flag t
                :default-value (quote (ecb-directories-buffer-name ecb-sources-buffer-name ecb-methods-buffer-name ecb-history-buffer-name ecb-analyse-buffer-name)))
                nil [13393 14647])
            ("ecb-tree-easy-hor-scroll" variable
               (:user-visible-flag t
                :default-value 5)
                nil [14649 15884])
            ("ecb-tree-make-parent-node-sticky" variable
               (:user-visible-flag t
                :default-value t)
                nil [15887 16592])
            ("ecb-tree-stickynode-indent-string" variable
               (:user-visible-flag t
                :default-value (tree-buffer-sticky-default-indent-string))
                nil [16594 17293])
            ("ecb-truncate-long-names" variable
               (:user-visible-flag t
                :default-value t)
                nil [17421 17676])
            ("ecb-tree-incremental-search" variable
               (:user-visible-flag t
                :default-value (quote prefix))
                nil [17801 18404])
            ("ecb-tree-navigation-by-arrow" variable
               (:user-visible-flag t
                :default-value t)
                nil [18406 19239])
            ("ecb-show-any-node-info-by-mouse-moving-p" function nil nil [19241 19971])
            ("ecb-primary-secondary-mouse-buttons" variable
               (:user-visible-flag t
                :default-value (quote mouse-2--C-mouse-2))
                nil [19973 22306])
            ("ecb-tree-mouse-action-trigger" variable
               (:user-visible-flag t
                :default-value (quote button-release))
                nil [22308 22925])
            ("ecb-mouse-click-destination" variable
               (:user-visible-flag t
                :default-value (quote last-point))
                nil [22927 24490])
            ("ecb-common-tree-buffer-after-create-hook" variable (:user-visible-flag t) nil [24493 25042])
            ("ecb-basic-buffer-sync" variable
               (:user-visible-flag t
                :default-value (quote (Info-mode dired-mode)))
                nil [25044 26577])
            ("ecb-basic-buffer-sync-delay" variable
               (:user-visible-flag t
                :default-value 0.25)
                nil [26579 27472])
            ("ecb-basic-buffer-sync-hook" variable (:user-visible-flag t) nil [27474 28669])
            ("ecb-adviced-function-sets" variable nil nil [28857 29151])
            ("ecb-adviced-permanent-function-sets" variable nil nil [29153 29430])
            ("ecb-adviced-functions" variable nil nil [29432 29637])
            ("ecb-advices-debug-error" variable nil nil [29639 29755])
            ("ecb-advices-debug-error" function (:arguments ("advice" "class" "action" "args")) nil [29757 30553])
            ("defecb-advice-set" function (:arguments ("advice-set" "docstring" "permanent")) nil [30555 32419])
            ("put" code nil nil [32421 32469])
            ("defecb-advice" function (:arguments ("adviced-function" "advice-class" "advice-set" "advice-docstring" "body")) nil [32471 34352])
            ("put" code nil nil [34354 34398])
            ("ecb-enable-ecb-advice" function (:arguments ("function-symbol" "advice-class" "arg")) nil [34603 35377])
            ("ecb-enable-advices" function (:arguments ("adviced-function-set-var")) nil [35384 36138])
            ("ecb-disable-advices" function (:arguments ("adviced-function-set-var" "force-permanent")) nil [36142 37765])
            ("ecb-with-ecb-advice" function (:arguments ("function-symbol" "advice-class" "body")) nil [37842 40514])
            ("put" code nil nil [40525 40575])
            ("ecb-with-original-adviced-function-set" function (:arguments ("adviced-function-set-var" "body")) nil [40698 42948])
            ("put" code nil nil [42951 43020])
            ("defecb-advice-set" code nil nil [43024 43301])
            ("ecb-combine-ecb-button/edit-win-nr" function (:arguments ("ecb-button" "edit-window-nr")) nil [43323 43672])
            ("ecb-get-edit-window" function (:arguments ("other-edit-window")) nil [43674 44911])
            ("ecb-source-make" function (:arguments ("filename" "buffer")) nil [44913 45466])
            ("ecb-source-get-filename" function (:arguments ("source")) nil [45468 45747])
            ("ecb-source-get-buffername" function (:arguments ("source")) nil [45749 46019])
            ("ecb-source-get-buffer" function (:arguments ("source")) nil [46021 46812])
            ("ecb-display-source" function (:arguments ("source" "other-edit-window")) nil [46814 47458])
            ("ecb-path-selected-directory" variable nil nil [47460 47542])
            ("ecb-path-selected-source" variable nil nil [47544 47973])
            ("ecb-path-selected-source-set" function (:arguments ("filename" "buffer")) nil [47975 48446])
            ("ecb-path-selected-source" function (:arguments ("type")) nil [48450 49258])
            ("ecb-tree-buffer-creators" variable nil nil [49298 49603])
            ("ecb-tree-buffer-creators-init" function nil nil [49605 49766])
            ("ecb-tree-buffer-creators-register" function (:arguments ("name-symbol" "fn")) nil [49768 49960])
            ("ecb-tree-buffer-creators-run" function nil nil [49962 50200])
            ("defecb-tree-buffer-creator" function (:arguments ("creator" "tree-buffer-name-symbol" "docstring" "body")) nil [50205 51581])
            ("put" code nil nil [51583 51640])
            ("ecb-tree-buffers" variable nil nil [51672 51928])
            ("ecb-tree-buffers-init" function nil nil [51930 51995])
            ("ecb-tree-buffers-add" function (:arguments ("name" "name-symbol")) nil [51997 52192])
            ("ecb-tree-buffers-name-list" function nil nil [52194 52294])
            ("ecb-tree-buffers-symbol-list" function nil nil [52296 52398])
            ("ecb-tree-buffers-buffer-list" function nil nil [52400 52515])
            ("ecb-tree-buffers-get-symbol" function (:arguments ("name")) nil [52517 52609])
            ("ecb-tree-buffer-callbacks" variable (:default-value (quote ((expand) (select)))) nil [52611 52987])
            ("ecb-tree-buffer-callbacks-add" function (:arguments ("type" "buffer-name-symbol" "callback")) nil [52990 53608])
            ("ecb-tree-buffer-callbacks-alist-of-type" function (:arguments ("type")) nil [53611 53856])
            ("defecb-tree-buffer-callback" function (:arguments ("callback" "tree-buffer-name-symbol" "callback-type" "optional-arg-list" "docstring" "body")) nil [53859 58181])
            ("put" code nil nil [58448 58506])
            ("defecb-multicache" code nil nil [58536 61423])
            ("ecb-filename-cache-init" function nil nil [61425 61615])
            ("ecb-directory-sep-char" variable
               (:constant-flag t
                :default-value (if ecb-running-xemacs (symbol-value (quote directory-sep-char)) 47))
                nil [61641 61788])
            ("ecb-directory-sep-char" function (:arguments ("refdir")) nil [61790 61945])
            ("ecb-directory-sep-string" function (:arguments ("refdir")) nil [61947 62052])
            ("ecb-autotrace-autocontrol/sync-functions" variable nil nil [62129 62784])
            ("ecb-bodytrace-autocontrol/sync-functions" variable nil nil [62786 63264])
            ("ecb-autotrace-autocontrol/sync-fcn-error" function (:arguments ("autocontrol-fcn" "args")) nil [63479 64284])
            ("ecb-bodytrace-autocontrol/sync-fcn-error" function (:arguments ("autocontrol-fcn" "args")) nil [64286 65219])
            ("ecb-autocontrol/sync-fcn-register" variable nil nil [65221 65509])
            ("ecb-idle-timer-alist" variable nil nil [65510 65581])
            ("ecb-post-command-hooks" variable nil nil [65582 65697])
            ("ecb-pre-command-hooks" variable nil nil [65698 65811])
            ("ecb-register-autocontrol/sync-function" function (:arguments ("fcn-symbol" "buffer-name-symbol")) nil [65813 65979])
            ("ecb-stop-all-autocontrol/sync-functions" function nil nil [65981 66143])
            ("ecb-stop-autocontrol/sync-function" function (:arguments ("fcn-symbol")) nil [66145 66667])
            ("ecb-activate-ecb-autocontrol-function" function (:arguments ("value" "func")) nil [66672 67940])
            ("defecb-autocontrol/sync-function" function (:arguments ("fcn" "buffer-name-symbol" "buffer-sync-option-symbol" "interactive-p" "docstring" "body")) nil [67942 73923])
            ("put" code nil nil [73924 73987])
            ("defecb-autocontrol/sync-function" code nil nil [74965 75612])
            ("dolist" code nil nil [75703 76351])
            ("ecb-expand-file-name" function (:arguments ("name" "default-dir")) nil [76353 76567])
            ("ecb-fix-path" function (:arguments ("path")) nil [76631 77294])
            ("ecb-fixed-filename-cache-put" function (:arguments ("path" "filename" "fixed-filename")) nil [77340 77697])
            ("ecb-fixed-filename-cache-get" function (:arguments ("path" "filename")) nil [77699 78067])
            ("ecb-fixed-filename-cache-dump" function
               (:user-visible-flag t
                :arguments ("no-nil-value"))
                nil [78069 78462])
            ("silentcomp-defun" code nil nil [78696 78745])
            ("ecb-fix-filename" function (:arguments ("path" "filename" "substitute-env-vars")) nil [78746 82230])
            ("ecb-format-bucket-name" function (:arguments ("name" "ignore-prefix-suffix" "ignore-bucket-face")) nil [82322 83005])
            ("ecb-toggle-do-not-leave-window-after-select" function (:user-visible-flag t) nil [83007 84536])
            ("ecb-common-tree-buffer-modeline-menu-creator" function (:arguments ("buf-name")) nil [84538 84788])
            ("ecb-common-after-tree-buffer-create-actions" function nil nil [84790 85394])
            ("ecb-tree-buffer-node-select-callback" function (:arguments ("node" "mouse-button" "shift-pressed" "control-pressed" "meta-pressed" "tree-buffer-name")) nil [85532 88641])
            ("ecb-tree-buffer-node-collapsed-callback" function (:arguments ("node" "mouse-button" "shift-pressed" "control-pressed" "meta-pressed" "tree-buffer-name")) nil [88644 89489])
            ("ecb-tree-buffer-node-expand-callback" function (:arguments ("node" "mouse-button" "shift-pressed" "control-pressed" "meta-pressed" "tree-buffer-name")) nil [89491 90938])
            ("ecb-interpret-mouse-click" function (:arguments ("mouse-button" "shift-pressed" "control-pressed" "meta-pressed" "tree-buffer-name")) nil [90940 92797])
            ("ecb-show-minibuffer-info" function (:arguments ("node" "window" "when-spec")) nil [92799 93200])
            ("tree-buffer-defpopup-command" code nil nil [93203 93382])
            ("ecb-stealthy-function-list" variable nil nil [93407 93582])
            ("ecb-stealthy-function-state-alist" variable nil nil [93584 93811])
            ("ecb-stealthy-function-list-add" function (:arguments ("fcn")) nil [93813 93905])
            ("ecb-stealthy-function-state-alist-add" function (:arguments ("fcn")) nil [93907 94041])
            ("ecb-stealthy-function-state-get" function (:arguments ("fcn")) nil [94043 94238])
            ("ecb-stealthy-function-state-set" function (:arguments ("fcn" "state")) nil [94240 94461])
            ("ecb-stealthy-function-p" function (:arguments ("fcn")) nil [94463 94623])
            ("ecb-stealthy-function-state-init" function (:arguments ("fcn" "state")) nil [94625 95247])
            ("defecb-stealthy" function (:arguments ("name" "docstring" "body")) nil [95249 97225])
            ("put" code nil nil [97229 97275])
            ("ecb-stealthy-update-running" variable nil nil [97277 97376])
            ("defecb-autocontrol/sync-function" code nil nil [97378 98557])
            ("ecb-generate-node-name" function (:arguments ("text-name" "first-chars" "icon-name" "name-of-buffer")) nil [98613 100001])
            ("silentcomp-provide" code nil nil [100004 100044]))          
    :file "ecb-common-browser.el"
    :pointmax 100082
    :fsize 100081
    :lastmodtime '(20457 7011)
    :unmatched-syntax '((close-paren 1749 . 1750) (symbol 1687 . 1704) (open-paren 1686 . 1687) (close-paren 1497 . 1498) (symbol 1456 . 1473) (open-paren 1455 . 1456))
    )
   (semanticdb-table "ecb-autoloads.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("ecb-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [142 447])
            ("ecb-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [449 667])
            ("ecb-byte-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [669 937])
            ("ecb-show-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1072 1652])
            ("ecb-running-xemacs" variable
               (:constant-flag t
                :default-value (featurep (quote xemacs)))
                nil [1767 1822])
            ("ecb-autoloads" package nil nil [2446 2470]))          
    :file "ecb-autoloads.el"
    :pointmax 2471
    :fsize 2470
    :lastmodtime '(20457 7011)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ecb-cedet-wrapper.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("semantic" include nil nil [1761 1780])
            ("semantic-ctxt" include nil nil [1781 1805])
            ("semantic-analyze" include nil nil [1806 1833])
            ("semanticdb" include nil nil [1834 1855])
            ("semanticdb-find" include nil nil [1856 1882])
            ("semanticdb-mode" include nil nil [1883 1909])
            ("ecb-semantic-2-loaded" variable
               (:constant-flag t
                :default-value (string-match "^2" semantic-version))
                nil [1911 1980])
            ("ecb-cedet-required-version-min" variable
               (:constant-flag t
                :default-value (quote (1 1 1 1)))
                nil [1981 2033])
            ("ecb-cedet-required-version-max" variable
               (:constant-flag t
                :default-value (quote (1 1 4 9)))
                nil [2034 2086])
            ("silentcomp" include nil nil [2108 2129])
            ("cl" include nil nil [2182 2195])
            ("ecb--semantic-symbol->name-assoc-list" function nil nil [2275 2437])
            ("ecb--semantic-symbol->name-assoc-list-for-type-parts" function nil nil [2439 2646])
            ("ecb--semantic-format-tag-functions" function nil nil [2648 2797])
            ("ecb--semantic-orphaned-member-metaparent-type" function nil nil [2799 2985])
            ("ecb--semantic-uml-colon-string" function nil nil [2987 3128])
            ("ecb--semantic-format-face-alist" function nil nil [3130 3274])
            ("ecb--semantic-after-toplevel-cache-change-hook" function nil nil [3276 3453])
            ("ecb--semantic-after-partial-cache-change-hook" function nil nil [3455 3629])
            ("ecb--semantic--before-fetch-tags-hook" function nil nil [3631 3781])
            ("ecb--ezimage-use-images" function nil nil [3783 3881])
            ("ecb--semantic-format-use-images-flag" function nil nil [3883 4020])
            ("ecb--cedet-function-list" variable
               (:constant-flag t
                :default-value (quote (semantic--format-colorize-text semantic--tag-get-property semantic--tag-overlay-cdr semantic--tag-put-property semantic--tag-set-overlay semantic-active-p semantic-adopt-external-members semantic-analyze-current-context semantic-analyze-find-tag semantic-analyze-possible-completions semantic-analyze-tag-type semantic-brute-find-first-tag-by-name semantic-bucketize semantic-calculate-scope semantic-clear-toplevel-cache semantic-current-tag semantic-current-tag-parent semantic-dependency-tag-file semantic-documentation-for-tag semantic-equivalent-tag-p semantic-fetch-available-tags semantic-fetch-tags semantic-find-tag-by-overlay semantic-find-tags-by-class semantic-find-tags-by-name semantic-flatten-tags-table semantic-get-local-arguments semantic-go-to-tag semantic-lex-token-start semantic-overlay-live-p semantic-overlay-p semantic-something-to-tag-table semantic-tag semantic-tag-abstract-p semantic-tag-buffer semantic-tag-calculate-parent semantic-tag-children-compatibility semantic-tag-class semantic-tag-components semantic-tag-end semantic-tag-faux-p semantic-tag-function-arguments semantic-tag-function-constructor-p semantic-tag-function-destructor-p semantic-tag-function-parent semantic-tag-get-attribute semantic-tag-name semantic-tag-new-variable semantic-tag-overlay semantic-tag-p semantic-tag-protection semantic-tag-prototype-p semantic-tag-start semantic-tag-static-p semantic-tag-type semantic-tag-type-interfaces semantic-tag-type-members semantic-tag-type-superclasses semantic-tag-with-position-p semanticdb-brute-deep-find-tags-by-name semanticdb-deep-find-tags-by-name semanticdb-find-result-length semanticdb-find-result-nth semanticdb-find-tags-by-name semanticdb-full-filename semanticdb-minor-mode-p semanticdb-strip-find-results)))
                nil [4280 6366])
            ("ecb--semantic-format-function-list" variable
               (:constant-flag t
                :default-value (quote (semantic-format-tag-abbreviate semantic-format-tag-concise-prototype semantic-format-tag-name semantic-format-tag-prin1 semantic-format-tag-prototype semantic-format-tag-summarize semantic-format-tag-uml-abbreviate semantic-format-tag-uml-concise-prototype semantic-format-tag-uml-prototype)))
                nil [6368 6751])
            ("dolist" code nil nil [6846 7000])
            ("silentcomp-provide" code nil nil [7002 7041]))          
    :file "ecb-cedet-wrapper.el"
    :pointmax 7077
    :fsize 7076
    :lastmodtime '(20458 18061)
    :unmatched-syntax '((close-paren 2195 . 2196) (symbol 2133 . 2150) (open-paren 2132 . 2133) (close-paren 2129 . 2130) (symbol 2088 . 2105) (open-paren 2087 . 2088))
    )
   (semanticdb-table "ecb-layout-defs.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1524 1545])
            ("ecb-util" include nil nil [1548 1567])
            ("ecb-layout" include nil nil [1568 1589])
            ("ecb-layout-define" code nil nil [1780 3538])
            ("ecb-layout-define" code nil nil [3611 5221])
            ("ecb-layout-define" code nil nil [5294 6953])
            ("ecb-layout-define" code nil nil [7026 8685])
            ("ecb-layout-define" code nil nil [8758 10417])
            ("ecb-layout-define" code nil nil [10491 12218])
            ("ecb-layout-define" code nil nil [12292 13966])
            ("ecb-layout-define" code nil nil [14039 15461])
            ("ecb-layout-define" code nil nil [15533 17190])
            ("ecb-layout-define" code nil nil [17263 19009])
            ("ecb-layout-define" code nil nil [19082 20792])
            ("ecb-layout-define" code nil nil [20864 22419])
            ("ecb-layout-define" code nil nil [22492 24049])
            ("ecb-layout-define" code nil nil [24123 25544])
            ("ecb-layout-define" code nil nil [25618 26990])
            ("ecb-layout-define" code nil nil [27064 28622])
            ("ecb-layout-define" code nil nil [28696 30345])
            ("ecb-layout-define" code nil nil [30419 31882])
            ("ecb-layout-define" code nil nil [31956 33654])
            ("ecb-layout-define" code nil nil [33732 35637])
            ("ecb-layout-define" code nil nil [35715 37642])
            ("ecb-layout-define" code nil nil [37720 39536])
            ("ecb-layout-define" code nil nil [39539 41254])
            ("ecb-layout-define" code nil nil [41256 42972])
            ("ecb-layout-define" code nil nil [42974 44964])
            ("ecb-layout-define" code nil nil [44966 46686])
            ("ecb-buildin-layouts" variable
               (:constant-flag t
                :default-value (ecb-copy-list ecb-available-layouts))
                nil [46688 46791])
            ("silentcomp-provide" code nil nil [46793 46830]))          
    :file "ecb-layout-defs.el"
    :pointmax 46864
    :fsize 46863
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 1545 . 1546) (symbol 1504 . 1521) (open-paren 1503 . 1504))
    )
   (semanticdb-table "ecb-examples.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("ecb-util" include nil nil [2496 2515])
            ("ecb-layout" include nil nil [2516 2537])
            ("ecb-common-browser" include nil nil [2538 2567])
            ("cl" include nil nil [2619 2632])
            ("ecb-examples" customgroup (:user-visible-flag t) nil [2975 3120])
            ("ecb-examples-bufferinfo-buffer-sync" variable
               (:user-visible-flag t
                :default-value (quote basic))
                nil [3625 4534])
            ("ecb-examples-bufferinfo-buffer-sync-delay" variable
               (:user-visible-flag t
                :default-value (quote basic))
                nil [4536 5680])
            ("ecb-examples-bufferinfo-buffer-sync-hook" variable nil nil [5682 7005])
            ("ecb-examples-bufferinfo-buffer-name" variable
               (:constant-flag t
                :default-value " *ECB buffer info*")
                nil [7080 7147])
            ("ecb-examples-bufferinfo-last-file-buffer" variable nil nil [7148 7201])
            ("ecb-examples-print-file-attributes" function (:arguments ("buffer" "filename")) nil [7269 8181])
            ("ecb-examples-print-non-filebuffer" function (:arguments ("buffer" "buffer-name")) nil [8184 8544])
            ("defecb-autocontrol/sync-function" code nil nil [8663 11725])
            ("ecb-maximize-bufferinfo-window" function (:user-visible-flag t) nil [11770 12125])
            ("ecb-goto-bufferinfo-window" function (:user-visible-flag t) nil [12127 12291])
            ("defecb-window-dedicator" code nil nil [12410 13402])
            ("ecb-examples-action-buffer-name" variable
               (:constant-flag t
                :default-value " *ECB action buffer*")
                nil [13643 13708])
            ("ecb-examples-action-buffer-keymap" variable nil nil [13709 13755])
            ("ecb-examples-insert-text-in-action-buffer" function (:arguments ("text")) nil [13849 14100])
            ("ecb-examples-action-buffer-create" function nil nil [14102 15785])
            ("ecb-examples-action-buffer-clicked" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [15854 16552])
            ("ecb-maximize-action-window" function (:user-visible-flag t) nil [16597 16940])
            ("ecb-goto-action-window" function (:user-visible-flag t) nil [16942 17094])
            ("defecb-window-dedicator" code nil nil [17209 17500])
            ("ecb-layout-define" code nil nil [17742 19977])
            ("ecb-examples-preact-layout" variable nil nil [20282 20321])
            ("ecb-examples-preact-windows-height" variable nil nil [20322 20369])
            ("ecb-examples-preact-compile-window-height" variable nil nil [20370 20424])
            ("ecb-examples-preactivation-state" function (:arguments ("action")) nil [20425 21051])
            ("ecb-examples-activate" function (:user-visible-flag t) nil [21720 22913])
            ("ecb-examples-deactivate" function (:user-visible-flag t) nil [22948 23639])
            ("ecb-examples" package nil nil [23882 23905]))          
    :file "ecb-examples.el"
    :pointmax 23936
    :fsize 23935
    :lastmodtime '(20457 7012)
    :unmatched-syntax '((close-paren 2632 . 2633) (symbol 2570 . 2587) (open-paren 2569 . 2570))
    )
   (semanticdb-table "ecb-advice-test.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("silentcomp" include nil nil [1610 1631])
            ("ecb-util" include nil nil [1634 1653])
            ("ecb-common-browser" include nil nil [1654 1683])
            ("defecb-advice-set" code nil nil [1685 1787])
            ("ecb-advice-test-defun-1" function nil nil [1789 1887])
            ("defecb-advice" code nil nil [1889 2032])
            ("ecb-advice-test-defun-2" function nil nil [2034 2132])
            ("defecb-advice" code nil nil [2134 2277])
            ("defecb-advice" code nil nil [2279 2420])
            ("ecb-advice-test-defun-3" function nil nil [2422 2520])
            ("defecb-advice" code nil nil [2522 2711])
            ("defecb-advice" code nil nil [2713 2900])
            ("ecb-advice-test-defun-4" function nil nil [2902 3000])
            ("defecb-advice" code nil nil [3002 3191])
            ("ecb-test-with-original-advice-set" function nil nil [3193 6390])
            ("silentcomp-provide" code nil nil [14218 14255]))          
    :file "ecb-advice-test.el"
    :pointmax 14291
    :fsize 14571
    :lastmodtime '(20457 7010)
    :unmatched-syntax '((close-paren 1631 . 1632) (symbol 1590 . 1607) (open-paren 1589 . 1590))
    )
   (semanticdb-table "Makefile"
    :major-mode 'makefile-gmake-mode
    :tags 
        '( ("EMACS" variable (:default-value ("emacs")) nil [1768 1780])
            ("CEDET" variable (:default-value ("c:/Programme/emacs-22.3/site-lisp/package-development/cedet")) nil [2136 2202])
            ("LOADPATH" variable nil nil [2309 2319])
            ("MAKEINFO" variable (:default-value ("/usr/bin/makeinfo")) nil [3364 3391])
            ("TEXI2DVI" variable (:default-value ("/C/Programme/texmf/miktex/bin/texi2dvi")) nil [3391 3439])
            ("DVIPDFM" variable nil nil [3521 3530])
            ("DVIPS" variable (:default-value ("/C/Programme/texmf/miktex/bin/dvips")) nil [3617 3659])
            ("PS2PDF" variable (:default-value ("/C/home/bin/ps2pdf")) nil [3659 3685])
            ("EMACSINFOPATH" variable (:default-value ("/C/Programme/emacs-22.3/info")) nil [4137 4180])
            ("INSTALLINFO" variable (:default-value ("/usr/bin/install-info")) nil [4388 4422])
            ("ecb_VERSION" variable (:default-value ("2.40")) nil [4959 4976])
            ("ecb-makedef.mk" include nil nil [4995 5018])
            ("ecb" function (:arguments ("$(ecb_LISP_EL)")) nil [5019 5673])
            ("all" function (:arguments ("ecb" "online-help")) nil [5674 5695])
            ("online-help" function (:arguments ("$(ecb_TEXI)")) nil [5696 6443])
            ("pdf" function (:arguments ("$(ecb_TEXI)")) nil [6444 7223])
            ("install-help" function (:arguments ("$(ecb_INFO_DIR)/$(ecb_INFO)")) nil [7225 7680])
            ("clean" function nil nil [7682 7732])
            ("$(ecb_INFO_DIR)" function (:arguments ("online-help")) nil [7796 7837])
            ("prepversion" function nil nil [7940 8666])
            ("autoloads" function nil nil [8668 8772])
            ("distrib" function (:arguments ("$(ecb_INFO_DIR)/$(ecb_INFO)" "prepversion" "autoloads" "ecb")) nil [8827 9482]))          
    :file "Makefile"
    :pointmax 9501
    :fsize 9500
    :lastmodtime '(20457 7013)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ecb-makedef.mk"
    :major-mode 'makefile-gmake-mode
    :tags 
        '( ("RM" variable (:default-value ("rm" "-f")) nil [1087 1096])
            ("CP" variable (:default-value ("cp")) nil [1096 1102])
            ("MV" variable (:default-value ("mv" "-f")) nil [1102 1111])
            ("MKDIR" variable (:default-value ("mkdir" "-p")) nil [1111 1126])
            ("EBATCH" variable (:default-value ("$(EMACS)" "-batch" "-no-site-file")) nil [1127 1164])
            ("ecb_LISP_EL" variable (:default-value ("tree-buffer.el" "ecb-util.el" "ecb-mode-line.el" "ecb-help.el" "ecb-layout.el" "ecb-layout-defs.el" "ecb-navigate.el" "ecb.el" "ecb-eshell.el" "ecb-cycle.el" "ecb-face.el" "ecb-compilation.el" "ecb-upgrade.el" "ecb-create-layout.el" "silentcomp.el" "ecb-speedbar.el" "ecb-examples.el" "ecb-tod.el" "ecb-autogen.el" "ecb-jde.el" "ecb-file-browser.el" "ecb-method-browser.el" "ecb-winman-support.el" "ecb-cedet-wrapper.el" "ecb-compatibility.el" "ecb-common-browser.el" "ecb-analyse.el" "ecb-symboldef.el" "ecb-advice-test.el")) nil [1165 1729])
            ("ecb_LISP_ELC" variable (:default-value ("$(ecb_LISP_EL:.el=.elc)")) nil [1730 1767])
            ("ecb_AUTOLOADS" variable (:default-value ("ecb-autoloads.el")) nil [1768 1799])
            ("ecb_ETC" variable (:default-value ("NEWS" "README" "RELEASE_NOTES" "ecb-makedef.mk" "Makefile" "make.bat")) nil [1800 1867])
            ("ecb_TEXI" variable (:default-value ("ecb.texi")) nil [1868 1886])
            ("ecb_INFO" variable (:default-value ("$(ecb_TEXI:.texi=.info)")) nil [1887 1920])
            ("ecb_HTML" variable (:default-value ("$(ecb_TEXI:.texi=.html)")) nil [1920 1953])
            ("ecb_HTML_DIR" variable (:default-value ("html-help")) nil [1953 1976])
            ("ecb_INFO_DIR" variable (:default-value ("info-help")) nil [1976 1999])
            ("ecb_DVI" variable (:default-value ("$(ecb_TEXI:.texi=.dvi)")) nil [2000 2031])
            ("ecb_PS" variable (:default-value ("$(ecb_TEXI:.texi=.ps)")) nil [2031 2060])
            ("ecb_PDF" variable (:default-value ("$(ecb_TEXI:.texi=.pdf)")) nil [2060 2091])
            ("ecb_IMAGE_DIR" variable (:default-value ("ecb-images")) nil [2092 2117])
            ("ecb_DISTRIB_FILES" variable (:default-value ("$(ecb_LISP_EL)" "$(ecb_AUTOLOADS)" "$(ecb_TEXI)" "$(ecb_ETC)")) nil [2118 2191]))          
    :file "ecb-makedef.mk"
    :pointmax 2192
    :fsize 2191
    :lastmodtime '(20457 7012)
    :unmatched-syntax 'nil
    )
   )
  :file "!drive_c!Program Files (x86)!emacs-24.1!home!ecb-2.40!semantic.cache"
  :semantic-tag-version "2.1"
  :semanticdb-version "2.1"
  )
